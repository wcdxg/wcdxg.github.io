<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git命令</title>
      <link href="/2020/04/23/git-ming-ling/"/>
      <url>/2020/04/23/git-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h2><h3 id="设置用户名和邮箱地址"><a href="#设置用户名和邮箱地址" class="headerlink" title="设置用户名和邮箱地址"></a>设置用户名和邮箱地址</h3><pre class=" language-java"><code class="language-java">$ git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name <span class="token string">"Your Name"</span>$ git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email <span class="token string">"email@example.com"</span></code></pre><h3 id="Git初始化"><a href="#Git初始化" class="headerlink" title="Git初始化"></a>Git初始化</h3><pre class=" language-java"><code class="language-java">git init</code></pre><h3 id="Git添加文件"><a href="#Git添加文件" class="headerlink" title="Git添加文件"></a>Git添加文件</h3><ul><li>添加单个文件  </li></ul><pre class=" language-java"><code class="language-java">git add readme<span class="token punctuation">.</span>txt</code></pre><ul><li>添加所有文件</li></ul><pre class=" language-java"><code class="language-java">git add <span class="token punctuation">.</span></code></pre><h3 id="Git查看状态"><a href="#Git查看状态" class="headerlink" title="Git查看状态"></a>Git查看状态</h3><pre class=" language-java"><code class="language-java">git status</code></pre><h3 id="Git修改操作"><a href="#Git修改操作" class="headerlink" title="Git修改操作"></a>Git修改操作</h3><ul><li><p>查看版本历史记录</p><pre class=" language-java"><code class="language-java">git log <span class="token operator">--</span>pretty<span class="token operator">=</span>oneline</code></pre></li><li><p>回退到指定版本</p><pre class=" language-java"><code class="language-java">git reset <span class="token operator">--</span>hard commit_id  版本号没必要写全，前几位就可以了git reset <span class="token operator">--</span>hard HEAD<span class="token operator">~</span><span class="token number">1</span>上一个版本就是HEAD<span class="token operator">^</span>，上上一个版本就是HEAD<span class="token operator">^</span><span class="token operator">^</span>，当然往上<span class="token number">100</span>个版本写<span class="token number">100</span>个<span class="token operator">^</span>比较容易数不过来，所以写成HEAD<span class="token operator">~</span><span class="token number">100</span>。</code></pre></li><li><p>查看Git提交历史命令</p><pre class=" language-java"><code class="language-java">git reflog</code></pre></li><li><p>比较文件区别</p><pre class=" language-java"><code class="language-java">git diff filename<span class="token operator">:</span>比较工作区和暂存区git diff HEAD <span class="token operator">--</span> filename<span class="token operator">:</span>比较工作区和版本库的最新版本</code></pre></li><li><p>丢弃工作区的修改</p><pre class=" language-java"><code class="language-java">git checkout <span class="token operator">--</span> readme<span class="token punctuation">.</span>txt回到最近一次git commit或git add时的状态从来没有被添加到版本库就被删除的文件，是无法恢复的！</code></pre></li><li><p>丢弃暂存区的修改</p><pre class=" language-java"><code class="language-java">git reset HEAD readme<span class="token punctuation">.</span>txt</code></pre><p>如果已经add到暂存区需要恢复，需要先执行reset再执行checkout</p></li><li><p>删除文件</p><pre class=" language-java"><code class="language-java">git rm test<span class="token punctuation">.</span>txt</code></pre></li></ul><h3 id="GitHub远程仓库操作"><a href="#GitHub远程仓库操作" class="headerlink" title="GitHub远程仓库操作"></a>GitHub远程仓库操作</h3><ul><li><p>创建SSH Key</p><pre class=" language-java"><code class="language-java"> ssh<span class="token operator">-</span>keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span>C <span class="token string">"youremail@example.com"</span></code></pre></li><li><p>远程仓库与本地仓库关联</p><pre class=" language-java"><code class="language-java">git remote add origin git<span class="token annotation punctuation">@github</span><span class="token punctuation">.</span>com<span class="token operator">:</span>用户名<span class="token operator">/</span>仓库名<span class="token punctuation">.</span>git添加第二个仓库也是这个命令</code></pre></li><li><p>第一次推送</p><pre class=" language-java"><code class="language-java">git push <span class="token operator">-</span>u origin master由于远程库是空的，我们第一次推送master分支时，加上了<span class="token operator">-</span>u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令</code></pre></li><li><p>推送到远程仓库</p><pre class=" language-java"><code class="language-java">git push origin masterorigin仓库名 master分支名多个远程仓库需要不同的仓库名</code></pre></li><li><p>删除已经添加的远程库：</p><pre class=" language-java"><code class="language-java">git remote rm <span class="token function">origin</span><span class="token punctuation">(</span>远程库名称<span class="token punctuation">)</span></code></pre></li></ul><h3 id="Git分支管理"><a href="#Git分支管理" class="headerlink" title="Git分支管理"></a>Git分支管理</h3><ul><li><p>创建并切换到新分支</p><pre class=" language-java"><code class="language-java">gut <span class="token keyword">switch</span> <span class="token operator">-</span>c dev    <span class="token comment" spellcheck="true">//新版本命令</span>git checkout <span class="token operator">-</span>b dev    <span class="token comment" spellcheck="true">//旧的命令</span>git checkout命令加上<span class="token operator">-</span>b参数表示创建并切换，相当于以下两条命令：$ git branch dev      <span class="token comment" spellcheck="true">//创建分支</span>$ git checkout dev  <span class="token comment" spellcheck="true">//切换分支 旧版本</span>$ git <span class="token keyword">switch</span> dev    <span class="token comment" spellcheck="true">//切换分支 新版本</span>Switched to branch <span class="token string">'dev'</span></code></pre></li><li><p>合并分支</p><pre class=" language-java"><code class="language-java">git merge dev将dev分支内容合并到当前分支</code></pre></li><li><p>合并分支禁用Fast forward </p><blockquote><p>通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。</p></blockquote></li></ul><pre class=" language-java"><code class="language-java">  git merge <span class="token operator">--</span>no<span class="token operator">-</span>ff <span class="token operator">-</span>m <span class="token string">"merge with no-ff"</span> dev  因为本次合并要创建一个新的commit，所以加上<span class="token operator">-</span>m参数，把commit描述写进去。</code></pre><ul><li><p>删除分支</p><pre class=" language-java"><code class="language-java">git branch <span class="token operator">-</span>d dev如果要丢弃一个没有被合并过的分支，可以通过git branch <span class="token operator">-</span>D <span class="token operator">&lt;</span>name<span class="token operator">></span>强行删除</code></pre></li><li><p>查看分支合并情况</p><pre class=" language-java"><code class="language-java">git log <span class="token operator">--</span>graph <span class="token operator">--</span>pretty<span class="token operator">=</span>oneline <span class="token operator">--</span>abbrev<span class="token operator">-</span>commit  <span class="token comment" spellcheck="true">//简略</span>git log <span class="token operator">--</span>graph    <span class="token comment" spellcheck="true">//详细信息</span></code></pre></li><li><p>保存工作状态(未commit时切换分支需要保存工作状态)</p><pre class=" language-java"><code class="language-java">git stash  保存状态前需要先add追踪</code></pre></li><li><p>恢复工作状态</p><pre class=" language-java"><code class="language-java">一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；另一种方式是用git stash pop，恢复的同时把stash内容也删了：</code></pre></li><li><p>查看保存的工作状态</p><pre class=" language-java"><code class="language-java">git stash list多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stashgit stash apply stash@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span></code></pre></li><li><p>复制一个特定的提交到当前分支</p><pre class=" language-java"><code class="language-java">git cherry<span class="token operator">-</span>pick 4c805e2 </code></pre></li><li><p>查看远程库信息</p><pre class=" language-java"><code class="language-java">git remote git remote <span class="token operator">-</span>v  查看详细信息</code></pre></li><li><p>本地推送分支要远程库</p><pre class=" language-java"><code class="language-java">使用git push origin branch<span class="token operator">-</span>name，如果推送失败，先用git pull抓取远程的新提交</code></pre></li><li><p>本地创建远程分支对应的分支</p><pre class=" language-java"><code class="language-java">git checkout <span class="token operator">-</span>b branch<span class="token operator">-</span>name origin<span class="token operator">/</span>branch<span class="token operator">-</span>namegit <span class="token keyword">switch</span> <span class="token operator">-</span>c branch<span class="token operator">-</span>name origin<span class="token operator">/</span>branch<span class="token operator">-</span>name本地和远程分支的名称最好一致</code></pre></li><li><p>建立本地分支和远程分支的关联</p><pre class=" language-java"><code class="language-java">git branch <span class="token operator">--</span>set<span class="token operator">-</span>upstream branch<span class="token operator">-</span>name origin<span class="token operator">/</span>branch<span class="token operator">-</span>name</code></pre></li><li><p>从远程抓取分支</p><pre class=" language-java"><code class="language-java">git pull </code></pre></li><li><p>删除远程仓库分支</p><pre><code>git push origin --delete dev</code></pre></li><li><h4 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h4><pre class=" language-java"><code class="language-java">Git rebase   在push之前操作 把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。</code></pre></li></ul><h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><ul><li><p>创建Tag</p><pre class=" language-java"><code class="language-java">git tag <span class="token operator">&lt;</span>name<span class="token operator">></span> 默认标签是打在最新提交的commit上的git tag v0<span class="token number">.9</span> f52c633     <span class="token comment" spellcheck="true">//对指定的commit id打tag</span>git tag <span class="token operator">-</span>a v0<span class="token number">.1</span> <span class="token operator">-</span>m <span class="token string">"version 0.1 released"</span> 1094adb    <span class="token comment" spellcheck="true">//创建带有说明的标签</span></code></pre></li><li><p>查看标签</p><pre class=" language-java"><code class="language-java">git taggit show <span class="token operator">&lt;</span>tagname<span class="token operator">></span>        <span class="token comment" spellcheck="true">//查看标签信息</span></code></pre></li><li><p>删除标签</p><pre class=" language-java"><code class="language-java">git tag <span class="token operator">-</span>d v0<span class="token number">.1</span></code></pre></li><li><p>推送标签到远程库</p><pre class=" language-java"><code class="language-java">git push origin <span class="token operator">&lt;</span>tagname<span class="token operator">></span>        <span class="token comment" spellcheck="true">//推送某个标签</span>git push origin <span class="token operator">--</span>tags            <span class="token comment" spellcheck="true">//推送全部标签</span></code></pre></li><li><p>删除远程库标签</p><pre class=" language-java"><code class="language-java">git tag <span class="token operator">-</span>d v0<span class="token number">.9</span>        <span class="token comment" spellcheck="true">//先删除本地标签</span>git push origin <span class="token operator">:</span>refs<span class="token operator">/</span>tags<span class="token operator">/</span>v0<span class="token number">.9</span>    <span class="token comment" spellcheck="true">//删除远程标签</span></code></pre></li></ul><h3 id="添加忽略文件"><a href="#添加忽略文件" class="headerlink" title="添加忽略文件"></a>添加忽略文件</h3><ul><li><p>强制添加已经被忽略的文件 <code>-f</code></p><pre class=" language-java"><code class="language-java">git add <span class="token operator">-</span>f App<span class="token punctuation">.</span><span class="token keyword">class</span></code></pre></li><li><p>检查忽略文件规则    <code>git check-ignore</code></p><pre class=" language-java"><code class="language-java">$ git check<span class="token operator">-</span>ignore <span class="token operator">-</span>v App<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token class-name"><span class="token punctuation">.</span>gitignore</span><span class="token operator">:</span><span class="token number">3</span><span class="token operator">:</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token keyword">class</span>    <span class="token class-name">App<span class="token punctuation">.</span>class</span></code></pre><p><code>.gitignore</code>文件本身要放到版本库里，并且可以对<code>.gitignore</code>做版本管理</p></li></ul><h3 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h3><ul><li><pre class=" language-java"><code class="language-java">我们只需要敲一行命令，告诉Git，以后st就表示status：$ git config <span class="token operator">--</span>global alias<span class="token punctuation">.</span>st status</code></pre><p>每个仓库的Git配置文件都放在<code>.git/config</code>文件中：</p><pre class=" language-java"><code class="language-java">$ cat <span class="token punctuation">.</span>git<span class="token operator">/</span>config </code></pre><p>而当前用户的Git配置文件放在用户主目录下的一个隐藏文件<code>.gitconfig</code>中：</p><pre class=" language-java"><code class="language-java">$ cat <span class="token punctuation">.</span>gitconfig</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/01/15/hello-world/"/>
      <url>/2020/01/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><a id="more"></a><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Blog</title>
      <link href="/2020/01/15/hello-blog/"/>
      <url>/2020/01/15/hello-blog/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Hexo的配置"><a href="#1-Hexo的配置" class="headerlink" title="1.Hexo的配置"></a>1.Hexo的配置</h3><ul><li><p>经过一两天的熟悉，博客的页面初步完成，大概的框架搭建完毕，剩下的功能看后面的需求。</p></li><li><p>博客采用Hexo搭建，主题采用<a href=""https://github.com/JoeyBling/hexo-theme-yilia-plus"">Yilia-plus</a></p></li></ul><h3 id="2-后续计划"><a href="#2-后续计划" class="headerlink" title="2.后续计划"></a>2.后续计划</h3><ul><li>将之前在其他地方的文章转移过来</li><li>搭建随笔栏目</li></ul><a id="more"></a><h3 id="3-2020年个人计划"><a href="#3-2020年个人计划" class="headerlink" title="3.2020年个人计划"></a>3.2020年个人计划</h3><ul><li>TODO…</li></ul><p><strong>2020-1-15</strong><br><strong>深圳</strong>  </p>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
