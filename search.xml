<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git命令</title>
      <link href="/2020/04/23/git-ming-ling/"/>
      <url>/2020/04/23/git-ming-ling/</url>
      
        <content type="html"><![CDATA[<h3 id="设置用户名和邮箱地址"><a href="#设置用户名和邮箱地址" class="headerlink" title="设置用户名和邮箱地址"></a>设置用户名和邮箱地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs bash">$ git config --global user.name <span class="hljs-string">"Your Name"</span><br>$ git config --global user.email <span class="hljs-string"><code class="language-hljs bash">$ git config --global user.name <span class="hljs-string">"Your Name"</span><br>$ git config --global user.email <span class="hljs-string">"email@example.com"</span><br></code></pre></td></tr></table></figure><h3 id="Git初始化"><a href="#Git初始化" class="headerlink" title="Git初始化"></a>Git初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">git init<br></code></pre></td></tr></table></figure><h3 id="Git添加文件"><a href="#Git添加文件" class="headerlink" title="Git添加文件"></a>Git添加文件</h3><ul><li>添加单个文件  </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">git add readme.txt<br></code></pre></td></tr></table></figure><ul><li>添加所有文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs java"><code class="language-hljs java">git add .<br></code></pre></td></tr></table></figure><h3 id="Git查看状态"><a href="#Git查看状态" class="headerlink" title="Git查看状态"></a>Git查看状态</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs java"><code class="language-hljs java">git status<br></code></pre></td></tr></table></figure><h3 id="Git修改操作"><a href="#Git修改操作" class="headerlink" title="Git修改操作"></a>Git修改操作</h3><p>查看版本历史记录</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash">git <span class="hljs-built_in"><code class="language-hljs bash">git <span class="hljs-built_in">log</span> --pretty=oneline<br></code></pre></td></tr></table></figure><p>回退到指定版本</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs java">git reset --hard commit_id  版本号没必要写全，前几位就可以了<br>git reset --hard HEAD~<span class="hljs-number">1</span><br>上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上<span class="hljs-number">100</span>个版本写<span class="hljs-number">100</span>个^比较容易数不过来，所以写成HEAD~<span class="hljs-number"><code class="language-hljs java">git reset --hard commit_id  版本号没必要写全，前几位就可以了<br>git reset --hard HEAD~<span class="hljs-number">1</span><br>上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上<span class="hljs-number">100</span>个版本写<span class="hljs-number">100</span>个^比较容易数不过来，所以写成HEAD~<span class="hljs-number">100</span>。<br></code></pre></td></tr></table></figure><p>查看Git提交历史命令</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs java"><code class="language-hljs java">git reflog<br></code></pre></td></tr></table></figure>  <a id="more"></a><p>比较文件区别</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">git diff filename:比较工作区和暂存区<br>git diff HEAD -- filename:比较工作区和版本库的最新版本<br></code></pre></td></tr></table></figure><p>丢弃工作区的修改</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">git checkout -- readme.txt<br>回到最近一次git commit或git add时的状态<br>从来没有被添加到版本库就被删除的文件，是无法恢复的！<br></code></pre></td></tr></table></figure><p>丢弃暂存区的修改</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">git reset HEAD readme.txt<br></code></pre></td></tr></table></figure><p>  如果已经add到暂存区需要恢复，需要先执行reset再执行checkout</p><p>删除文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">git rm test.txt<br></code></pre></td></tr></table></figure><h3 id="GitHub远程仓库操作"><a href="#GitHub远程仓库操作" class="headerlink" title="GitHub远程仓库操作"></a>GitHub远程仓库操作</h3><p>创建SSH Key</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash">ssh-keygen -t rsa -C <span class="hljs-string"><code class="language-hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">"youremail@example.com"</span><br></code></pre></td></tr></table></figure><p>远程仓库与本地仓库关联</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">git remote add origin git@github.com:用户名/仓库名.git<br>添加第二个仓库也是这个命令<br></code></pre></td></tr></table></figure><p>第一次推送</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">git push -u origin master<br>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令<br></code></pre></td></tr></table></figure><p>推送到远程仓库</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">git push origin master<br>origin仓库名 master分支名<br>多个远程仓库需要不同的仓库名<br></code></pre></td></tr></table></figure><p>删除已经添加的远程库：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">git remote rm origin(远程库名称)<br></code></pre></td></tr></table></figure><h3 id="Git分支管理"><a href="#Git分支管理" class="headerlink" title="Git分支管理"></a>Git分支管理</h3><p>创建并切换到新分支</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre class=" language-hljs bash">gut switch -c dev//新版本命令<br><br>git checkout -b dev//旧的命令<br>git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：<br>$ git branch dev  //创建分支<br>$ git checkout dev  //切换分支 旧版本<br>$ git switch dev//切换分支 新版本<br>Switched to branch <span class="hljs-string"><code class="language-hljs bash">gut switch -c dev//新版本命令<br><br>git checkout -b dev//旧的命令<br>git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：<br>$ git branch dev  //创建分支<br>$ git checkout dev  //切换分支 旧版本<br>$ git switch dev//切换分支 新版本<br>Switched to branch <span class="hljs-string">'dev'</span><br></code></pre></td></tr></table></figure><p>合并分支</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">git merge dev<br>将dev分支内容合并到当前分支<br></code></pre></td></tr></table></figure><p>合并分支禁用Fast forward </p><blockquote><p>通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。</p></blockquote>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs bash">git merge --no-ff -m <span class="hljs-string"><code class="language-hljs bash">git merge --no-ff -m <span class="hljs-string">"merge with no-ff"</span> dev<br>因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。<br></code></pre></td></tr></table></figure><p>删除分支</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">git branch -d dev<br><br>如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除<br></code></pre></td></tr></table></figure><p>查看分支合并情况</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs bash">git <span class="hljs-built_in">log</span> --graph --pretty=oneline --abbrev-commit  //简略<br>git <span class="hljs-built_in"><code class="language-hljs bash">git <span class="hljs-built_in">log</span> --graph --pretty=oneline --abbrev-commit  //简略<br>git <span class="hljs-built_in">log</span> --graph//详细信息<br></code></pre></td></tr></table></figure><p>保存工作状态(未commit时切换分支需要保存工作状态)</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">git stash  保存状态前需要先add追踪<br></code></pre></td></tr></table></figure><p>恢复工作状态</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；<br>另一种方式是用git stash pop，恢复的同时把stash内容也删了：<br></code></pre></td></tr></table></figure><p>查看保存的工作状态</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">git stash list<br>多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash<br><br>git stash apply stash@&#123;0&#125;<br></code></pre></td></tr></table></figure><p>复制一个特定的提交到当前分支</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">git cherry-pick 4c805e2<br></code></pre></td></tr></table></figure><p>查看远程库信息</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">git remote <br>git remote -v  查看详细信息<br></code></pre></td></tr></table></figure><p>本地推送分支要远程库</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交<br></code></pre></td></tr></table></figure><p>本地创建远程分支对应的分支</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">git checkout -b branch-name origin/branch-name<br>git switch -c branch-name origin/branch-name<br>本地和远程分支的名称最好一致<br></code></pre></td></tr></table></figure><p>建立本地分支和远程分支的关联</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash">git branch --<span class="hljs-built_in"><code class="language-hljs bash">git branch --<span class="hljs-built_in">set</span>-upstream branch-name origin/branch-name<br></code></pre></td></tr></table></figure><p>从远程抓取分支</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">git pull<br></code></pre></td></tr></table></figure><p>删除远程仓库分支</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">git push origin --delete dev<br></code></pre></td></tr></table></figure><h4 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h4>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">Git rebase   <br>在push之前操作操作,把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。<br></code></pre></td></tr></table></figure><h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><p>创建Tag</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre class=" language-hljs bash">git tag &lt;name&gt; 默认标签是打在最新提交的commit上的<br><br>git tag v0.9 f52c633     //对指定的commit id打tag<br><br>git tag -a v0.1 -m <span class="hljs-string"><code class="language-hljs bash">git tag &lt;name&gt; 默认标签是打在最新提交的commit上的<br><br>git tag v0.9 f52c633     //对指定的commit id打tag<br><br>git tag -a v0.1 -m <span class="hljs-string">"version 0.1 released"</span> 1094adb//创建带有说明的标签<br></code></pre></td></tr></table></figure><p>查看标签</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">git tag<br><br>git show <tagname>//查看标签信息<br></code></pre></td></tr></table></figure><p>删除标签</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">git tag -d v0.1<br></code></pre></td></tr></table></figure><p>推送标签到远程库</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">git push origin <tagname>//推送某个标签<br>git push origin --tags//推送全部标签<br></code></pre></td></tr></table></figure><p>删除远程库标签</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">git tag -d v0.9//先删除本地标签<br>git push origin :refs/tags/v0.9//删除远程标签<br></code></pre></td></tr></table></figure><h3 id="添加忽略文件"><a href="#添加忽略文件" class="headerlink" title="添加忽略文件"></a>添加忽略文件</h3><p>强制添加已经被忽略的文件 <code>-f</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">git add -f App.class<br></code></pre></td></tr></table></figure><p>检查忽略文件规则    <code>git check-ignore</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">$ git check-ignore -v App.class<br>.gitignore:3:*.classApp.class<br></code></pre></td></tr></table></figure><p><code>.gitignore</code>文件本身要放到版本库里，并且可以对<code>.gitignore</code>做版本管理</p><h3 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h3><p>我们只需要敲一行命令，告诉Git，以后st就表示status：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">$ git config --global alias.st status<br></code></pre></td></tr></table></figure><p>每个仓库的Git配置文件都放在<code>.git/config</code>文件中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">$ cat .git/config<br></code></pre></td></tr></table></figure><p>而当前用户的Git配置文件放在用户主目录下的一个隐藏文件<code>.gitconfig</code>中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">$ cat .gitconfig<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo命令</title>
      <link href="/2020/01/15/hello-world/"/>
      <url>/2020/01/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建新的文件"><a href="#创建新的文件" class="headerlink" title="创建新的文件"></a>创建新的文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash">$ hexo new <span class="hljs-string"><code class="language-hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="本地运行服务"><a href="#本地运行服务" class="headerlink" title="本地运行服务"></a>本地运行服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">$ hexo s<br>$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">$ hexo g<br>$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="上传到远程仓库"><a href="#上传到远程仓库" class="headerlink" title="上传到远程仓库"></a>上传到远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre class=" language-hljs bash"><code class="language-hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
