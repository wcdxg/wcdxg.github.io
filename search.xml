<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PhotoView缩放后的坐标转换</title>
      <link href="/2020/11/06/photoview-zuo-biao-zhuan-huan/"/>
      <url>/2020/11/06/photoview-zuo-biao-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<p>最近在项目中使用到了PhotoView来针对图片进行缩放处理，原本绘制在Bitmap上的内容位置就发生了偏移，在此记录一下解决步骤。</p><p>在PhotoView缩放操作中，图片本身的大小是不变的，图片的所有平移缩放等操作都是采用Matrix类来操作</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setScale</span><span class="token punctuation">(</span><span class="token keyword">float</span> scale<span class="token punctuation">,</span> <span class="token keyword">float</span> focalX<span class="token punctuation">,</span> <span class="token keyword">float</span> focalY<span class="token punctuation">,</span>        <span class="token keyword">boolean</span> animate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Check to see if the scale is within bounds</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scale <span class="token operator">&lt;</span> mMinScale <span class="token operator">||</span> scale <span class="token operator">></span> mMaxScale<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Scale must be within the range of minScale and maxScale"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>animate<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mImageView<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnimatedZoomRunnable</span><span class="token punctuation">(</span><span class="token function">getScale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> scale<span class="token punctuation">,</span>                focalX<span class="token punctuation">,</span> focalY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            mSuppMatrix<span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span>scale<span class="token punctuation">,</span> scale<span class="token punctuation">,</span> focalX<span class="token punctuation">,</span> focalY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkAndDisplayMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>在PhotoView中保存有几个Matrix：</p><blockquote><ul><li>mBaseMatrix 基础的matrix，图片根据ScaleType来决定最初的大小，在初始化完成之后就基本不会改变，除非布局发生了变化。</li><li>mSuppMatrix 由于mBaseMatrix在初始化后基本是不变的(布局发生变化的时候会重置mBaseMatrix)，因此需要另外一个matrix来记录这些变化（比如说双击事件后缩放啊什么的），然后通过mBaseMatrix的右乘来将变化加进去。</li><li>mDrawMatrix mBaseMatrix右乘mSuppMatrix，实际上就是存储所有变化的matrix，最后set进imageView的就是这个</li></ul></blockquote><p>我们计算偏移后的坐标需要获取到偏移量和缩放倍数，而Android中的Matrix是一个3×3的矩阵，在其中就保存有偏移量和缩放比率等值。</p><p><img src="/images/matrix.webp" alt="matrix"></p><p>因此计算平移缩放后的坐标位置，需要获取到存储所有变化的Matrix，在PhotoView中用来存储变化的是<code>mDrawMatrix</code>，对外提供<code>getImageMatrix()</code>方法获取<code>mDrawMatrix</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Matrix <span class="token function">getImageMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> mDrawMatrix<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>而计算缩放后的坐标位置，需要用原坐标 × 缩放比率 + 偏移量，代码如下：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">object</span> MatrixUtil <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 存储Matrix矩阵的9个值     * Matrix是一个3 x 3的矩阵     */</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> matrixValues <span class="token operator">=</span> <span class="token function">FloatArray</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * 获取Matrix在平移缩放之后的X坐标     * @param x 缩放操作前的X坐标     * @param matrix 变化的Matrix矩阵     */</span>    <span class="token keyword">fun</span> <span class="token function">getMatrixScaleX</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Float<span class="token punctuation">,</span> matrix<span class="token operator">:</span> Matrix<span class="token punctuation">)</span><span class="token operator">:</span> Float <span class="token punctuation">{</span>        matrix<span class="token punctuation">.</span><span class="token function">getValues</span><span class="token punctuation">(</span>matrixValues<span class="token punctuation">)</span>        <span class="token keyword">val</span> mscale_x <span class="token operator">=</span> matrixValues<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">val</span> mtrans_x <span class="token operator">=</span> matrixValues<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> x <span class="token operator">*</span> mscale_x <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> mtrans_x    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取Matrix在平移缩放之后的X坐标     * @param y 缩放操作前的Y坐标     * @param matrix 变化的Matrix矩阵     */</span>    <span class="token keyword">fun</span> <span class="token function">getMatrixScaleY</span><span class="token punctuation">(</span>y<span class="token operator">:</span> Float<span class="token punctuation">,</span> matrix<span class="token operator">:</span> Matrix<span class="token punctuation">)</span><span class="token operator">:</span> Float <span class="token punctuation">{</span>        matrix<span class="token punctuation">.</span><span class="token function">getValues</span><span class="token punctuation">(</span>matrixValues<span class="token punctuation">)</span>        <span class="token keyword">val</span> mscale_y <span class="token operator">=</span> matrixValues<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>        <span class="token keyword">val</span> mtrans_y <span class="token operator">=</span> matrixValues<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> y <span class="token operator">*</span> mscale_y <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">*</span> mtrans_y    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>因此原坐标x,y，在变化后的坐标为：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> x1 <span class="token operator">=</span> <span class="token function">getMatrixScaleX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>photoView<span class="token punctuation">.</span><span class="token function">getAttacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>。<span class="token function">getImageMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token keyword">val</span> y1 <span class="token operator">=</span> <span class="token function">getMatrixScaleY</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>photoView<span class="token punctuation">.</span><span class="token function">getAttacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>。<span class="token function">getImageMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span></code></pre><p>本文参考以下链接：</p><p><a href="https://blog.csdn.net/yi_shun/article/details/51565524" target="_blank" rel="noopener">https://blog.csdn.net/yi_shun/article/details/51565524</a></p><p><a href="https://www.jianshu.com/p/8144e88a474d" target="_blank" rel="noopener">https://www.jianshu.com/p/8144e88a474d</a></p>]]></content>
      
      
      <categories>
          
          <category> 自定义View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PhotoView </tag>
            
            <tag> Matrix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin的一些小技巧</title>
      <link href="/2020/09/16/kotlin-de-yi-xie-xiao-ji-qiao/"/>
      <url>/2020/09/16/kotlin-de-yi-xie-xiao-ji-qiao/</url>
      
        <content type="html"><![CDATA[<p>作者：HiDhl<br>链接：<a href="https://juejin.im/post/6844904184974835720" target="_blank" rel="noopener">https://juejin.im/post/6844904184974835720</a><br>来源：掘金</p><h4 id="1-Plus操作符"><a href="#1-Plus操作符" class="headerlink" title="1.Plus操作符"></a>1.Plus操作符</h4><p>在kotlin中可以利用 <code>plus (+)</code>和 <code>minus (-)</code>对 Map 集合做运算，如下所示。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> numbersMap <span class="token operator">=</span> <span class="token function">mapOf</span><span class="token punctuation">(</span><span class="token string">"one"</span> <span class="token keyword">to</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"two"</span> <span class="token keyword">to</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"three"</span> <span class="token keyword">to</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// plus (+)</span>    <span class="token function">println</span><span class="token punctuation">(</span>numbersMap <span class="token operator">+</span> <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string">"four"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {one=1, two=2, three=3, four=4}</span>    <span class="token function">println</span><span class="token punctuation">(</span>numbersMap <span class="token operator">+</span> <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {one=10, two=2, three=3}</span>    <span class="token function">println</span><span class="token punctuation">(</span>numbersMap <span class="token operator">+</span> <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string">"five"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {one=11, two=2, three=3, five=5}</span>    <span class="token comment" spellcheck="true">// minus (-)</span>    <span class="token function">println</span><span class="token punctuation">(</span>numbersMap <span class="token operator">-</span> <span class="token string">"one"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {two=2, three=3}</span>    <span class="token function">println</span><span class="token punctuation">(</span>numbersMap <span class="token operator">-</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"four"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {one=1, three=3}</span><span class="token punctuation">}</span></code></pre><p>其实这里用到了运算符重载，Kotlin 在 <code>Maps.kt</code> 文件里面，定义了一系列用关键字 <code>operator</code> 声明的 Map 的扩展函数。</p><p>用 operator 关键字声明 plus 函数，可以直接使用 + 号来做运算，使用 operator 修饰符声明 minus 函数，可以直接使用 - 号来做运算，其实我们也可以在自定义类里面实现 plus (+) 和 minus (-) 做运算。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Salary</span><span class="token punctuation">(</span><span class="token keyword">var</span> base<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>operator <span class="token keyword">fun</span> Salary<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>other<span class="token operator">:</span> Salary<span class="token punctuation">)</span><span class="token operator">:</span> Salary <span class="token operator">=</span> <span class="token function">Salary</span><span class="token punctuation">(</span>base <span class="token operator">+</span> other<span class="token punctuation">.</span>base<span class="token punctuation">)</span>operator <span class="token keyword">fun</span> Salary<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>other<span class="token operator">:</span> Salary<span class="token punctuation">)</span><span class="token operator">:</span> Salary <span class="token operator">=</span> <span class="token function">Salary</span><span class="token punctuation">(</span>base <span class="token operator">-</span> other<span class="token punctuation">.</span>base<span class="token punctuation">)</span><span class="token keyword">val</span> s1 <span class="token operator">=</span> <span class="token function">Salary</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">val</span> s2 <span class="token operator">=</span> <span class="token function">Salary</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">+</span> s2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 30</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">-</span> s2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -10</span></code></pre><h4 id="2-Map设置默认值"><a href="#2-Map设置默认值" class="headerlink" title="2.Map设置默认值"></a>2.Map设置默认值</h4><p>在 Map 集合中，可以使用 withDefault 设置一个默认值，当键不在 Map 集合中，通过 getValue 返回默认值。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> map <span class="token operator">=</span> <span class="token function">mapOf</span><span class="token punctuation">(</span>        <span class="token string">"java"</span> <span class="token keyword">to</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"kotlin"</span> <span class="token keyword">to</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token string">"python"</span> <span class="token keyword">to</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withDefault</span> <span class="token punctuation">{</span> <span class="token string">"?"</span> <span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"kotlin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"c++"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ?</span></code></pre><h4 id="3-使用-require-或者-check-函数作为条件检查"><a href="#3-使用-require-或者-check-函数作为条件检查" class="headerlink" title="3.使用 require 或者 check 函数作为条件检查"></a>3.使用 require 或者 check 函数作为条件检查</h4><pre class=" language-kotlin"><code class="language-kotlin"><span class="token operator">/</span> 传统的做法<span class="token keyword">val</span> age <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"age must  not be negative"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 使用 require 去检查 如果age小于等于0 则抛出异常</span><span class="token function">require</span><span class="token punctuation">(</span>age <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string">"age must be negative"</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 使用 checkNotNull 检查</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token string">"name must not be null"</span><span class="token punctuation">}</span></code></pre><h4 id="4-如何区分和使用-run-with-let-also-apply"><a href="#4-如何区分和使用-run-with-let-also-apply" class="headerlink" title="4. 如何区分和使用 run, with, let, also, apply"></a>4. 如何区分和使用 run, with, let, also, apply</h4><table><thead><tr><th align="center"><strong>函数</strong></th><th align="center"><strong>是否是扩展函数</strong></th><th align="center"><strong>函数参数(this、it)</strong></th><th align="center"><strong>返回值(调用本身、最后一行)</strong></th></tr></thead><tbody><tr><td align="center">with</td><td align="center">不是</td><td align="center">this</td><td align="center">最后一行</td></tr><tr><td align="center">T.run</td><td align="center">是</td><td align="center">this</td><td align="center">最后一行</td></tr><tr><td align="center">T.let</td><td align="center">是</td><td align="center">it</td><td align="center">最后一行</td></tr><tr><td align="center">T.also</td><td align="center">是</td><td align="center">it</td><td align="center">调用本身</td></tr><tr><td align="center">T.apply</td><td align="center">是</td><td align="center">this</td><td align="center">调用本身</td></tr></tbody></table><h5 id="是否是扩展函数"><a href="#是否是扩展函数" class="headerlink" title="是否是扩展函数"></a>是否是扩展函数</h5><p>首先我们来看一下 with 和 T.run，这两个函数非常的相似，他们的区别在于 with 是个普通函数，T.run 是个扩展函数，来看一下下面的例子。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token function">with</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">val</span> subName <span class="token operator">=</span> name<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 使用之前可以检查它的可空性</span>name<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">run</span> <span class="token punctuation">{</span> <span class="token keyword">val</span> subName <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token operator">?:</span><span class="token keyword">throw</span> <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"name must not be null"</span><span class="token punctuation">)</span></code></pre><p>在这个例子当中，name?.run 会更好一些，因为在使用之前可以检查它的可空性。</p><h5 id="作用域函数的参数（this、it）"><a href="#作用域函数的参数（this、it）" class="headerlink" title="作用域函数的参数（this、it）"></a>作用域函数的参数（this、it）</h5><p>我们在来看一下 T.run 和 T.let，它们都是扩展函数，但是他们的参数不一样 T.run 的参数是 this, T.let 的参数是 it。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token string">"hi-dhl.com"</span><span class="token comment" spellcheck="true">// 参数是 this，可以省略不写</span>name<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">run</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The length  is <span class="token interpolation"><span class="token delimiter variable">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token delimiter variable">}</span></span>  this 是可以省略的 <span class="token interpolation"><span class="token delimiter variable">${</span>length<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 参数 it</span>name<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The length  is  <span class="token interpolation"><span class="token delimiter variable">${</span>it<span class="token punctuation">.</span>length<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 自定义参数名字</span>name<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> str <span class="token operator">-></span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The length  is  <span class="token interpolation"><span class="token delimiter variable">${</span>str<span class="token punctuation">.</span>length<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>在上面的例子中看似 T.run 会更好，因为 this 可以省略，调用更加的简洁，但是 T.let 允许我们自定义参数名字，使可读性更强，如果倾向可读性可以选择 T.let。</p><h5 id="作用域函数的返回值（调用本身、其他类型）"><a href="#作用域函数的返回值（调用本身、其他类型）" class="headerlink" title="作用域函数的返回值（调用本身、其他类型）"></a>作用域函数的返回值（调用本身、其他类型）</h5><p>接下里我们来看一下 T.let 和 T.also 它们接受的参数都是 it, 但是它们的返回值是不同的 T.let 返回最后一行，T.also 返回调用本身。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"hi-dhl"</span><span class="token comment" spellcheck="true">// 返回调用本身</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">1</span>    <span class="token string">"juejin"</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name = <span class="token interpolation"><span class="token delimiter variable">${</span>name<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// name = hi-dhl</span><span class="token comment" spellcheck="true">// 返回的最后一行</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">1</span>    <span class="token string">"hi-dhl.com"</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name = <span class="token interpolation"><span class="token delimiter variable">${</span>name<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// name = hi-dhl.com</span></code></pre><p>从上面的例子来看 T.also 似乎没有什么意义，细想一下其实是非常有意义的，在使用之前可以进行自我操作，结合其他的函数，功能会更强大。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">makeDir</span><span class="token punctuation">(</span>path<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">let</span><span class="token punctuation">{</span> <span class="token function">File</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">also</span><span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre><h5 id="T-apply-函数"><a href="#T-apply-函数" class="headerlink" title="T.apply 函数"></a>T.apply 函数</h5><p>通过上面三个方面，大致了解函数的行为，接下来看一下 T.apply 函数，T.apply 函数是一个扩展函数，返回值是它本身，并且接受的参数是 this。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">// 普通方法</span><span class="token keyword">fun</span> <span class="token function">createInstance</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Bundle<span class="token punctuation">)</span> <span class="token operator">:</span> MyFragment <span class="token punctuation">{</span>    <span class="token keyword">val</span> fragment <span class="token operator">=</span> <span class="token function">MyFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fragment<span class="token punctuation">.</span>arguments <span class="token operator">=</span> args    <span class="token keyword">return</span> fragment<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 改进方法</span><span class="token keyword">fun</span> <span class="token function">createInstance</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Bundle<span class="token punctuation">)</span>               <span class="token operator">=</span> <span class="token function">MyFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span> arguments <span class="token operator">=</span> args <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 普通方法</span><span class="token keyword">fun</span> <span class="token function">createIntent</span><span class="token punctuation">(</span>intentData<span class="token operator">:</span> String<span class="token punctuation">,</span> intentAction<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Intent <span class="token punctuation">{</span>    <span class="token keyword">val</span> intent <span class="token operator">=</span> <span class="token function">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    intent<span class="token punctuation">.</span>action <span class="token operator">=</span> intentAction    intent<span class="token punctuation">.</span>data<span class="token operator">=</span>Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>intentData<span class="token punctuation">)</span>    <span class="token keyword">return</span> intent<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 改进方法，链式调用</span><span class="token keyword">fun</span> <span class="token function">createIntent</span><span class="token punctuation">(</span>intentData<span class="token operator">:</span> String<span class="token punctuation">,</span> intentAction<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span>        <span class="token function">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span> action <span class="token operator">=</span> intentAction <span class="token punctuation">}</span>                <span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span> <span class="token keyword">data</span> <span class="token operator">=</span> Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>intentData<span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre><h5 id="使用-T-also-函数交换两个变量"><a href="#使用-T-also-函数交换两个变量" class="headerlink" title="使用 T.also 函数交换两个变量"></a>使用 T.also 函数交换两个变量</h5><p>接下来演示的是使用 T.also 函数，实现一行代码交换两个变量？我们先来回顾一下 Java 的做法。</p><pre class=" language-kotlin"><code class="language-kotlin">int a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>int b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Java - 中间变量</span>int temp <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a = "</span><span class="token operator">+</span>a <span class="token operator">+</span><span class="token string">" b = "</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a = 2 b = 1</span><span class="token comment" spellcheck="true">// Kotlin</span>a <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span> b <span class="token operator">=</span> a <span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a = <span class="token interpolation"><span class="token delimiter variable">${</span>a<span class="token delimiter variable">}</span></span> b = <span class="token interpolation"><span class="token delimiter variable">${</span>b<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// a = 2 b = 1</span></code></pre><p>来一起分析 T.also 是如何做到的，其实这里用到了 T.also 函数的两个特点。</p><ul><li>调用 T.also 函数返回的是调用者本身。</li><li>在使用之前可以进行自我操作。</li></ul><p>也就是说 b.also { b = a } 会先将 a 的值 (1) 赋值给 b，此时 b 的值为 1，然后将 b 原始的值（2）赋值给 a，此时 a 的值为 2，实现交换两个变量的目的。</p><h4 id="5-in-和-when-关键字"><a href="#5-in-和-when-关键字" class="headerlink" title="5. in 和 when 关键字"></a>5. in 和 when 关键字</h4><p>使用 in 和 when 关键字结合正则表达式，验证用户的输入，这是一个很酷的技巧。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">// 使用扩展函数重写 contains 操作符</span>operator <span class="token keyword">fun</span> Regex<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>text<span class="token operator">:</span> CharSequence<span class="token punctuation">)</span> <span class="token operator">:</span> Boolean <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">containsMatchIn</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 结合着 in 和 when 一起使用</span><span class="token keyword">when</span> <span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">in</span> <span class="token function">Regex</span><span class="token punctuation">(</span><span class="token string">"[0–9]"</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"contains a number"</span><span class="token punctuation">)</span>  <span class="token keyword">in</span> <span class="token function">Regex</span><span class="token punctuation">(</span><span class="token string">"[a-zA-Z]"</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"contains a letter"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>in 关键字其实是 contains 操作符的简写，它不是一个接口，也不是一个类型，仅仅是一个操作符，也就是说任意一个类只要重写了 contains 操作符，都可以使用 in 关键字，如果我们想要在自定义类型中检查一个值是否在列表中，只需要重写 contains() 方法即可，Collections 集合也重写了 contains 操作符。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> input <span class="token operator">=</span> <span class="token string">"kotlin"</span><span class="token keyword">when</span> <span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">in</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token string">"kotlin"</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"found <span class="token interpolation"><span class="token delimiter variable">${</span>input<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>    <span class="token keyword">in</span> <span class="token function">setOf</span><span class="token punctuation">(</span><span class="token string">"python"</span><span class="token punctuation">,</span> <span class="token string">"c++"</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"found <span class="token interpolation"><span class="token delimiter variable">${</span>input<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" not found <span class="token interpolation"><span class="token delimiter variable">${</span>input<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bugly Tinker接入步骤</title>
      <link href="/2020/08/03/30.tinker-jie-ru-bu-zou/"/>
      <url>/2020/08/03/30.tinker-jie-ru-bu-zou/</url>
      
        <content type="html"><![CDATA[<p>最近项目中需要接入热更新,在接入Bugly Tinker过程中遇到了很多问题,在此记录下,同时建议如果APP用户量不是非常大的还是接入阿里的Sophix吧,每月5万台设备免费,而且问题也没有这么多…</p><h3 id="一-接入步骤-TinkerSupport和tinker插件的对应关系在Bugly官网-更新日志页面查询"><a href="#一-接入步骤-TinkerSupport和tinker插件的对应关系在Bugly官网-更新日志页面查询" class="headerlink" title="一.接入步骤,TinkerSupport和tinker插件的对应关系在Bugly官网 更新日志页面查询"></a>一.接入步骤,TinkerSupport和tinker插件的对应关系在<a href="https://bugly.qq.com/docs/release-notes/release-android-beta/?v=20200622202242" target="_blank" rel="noopener">Bugly官网</a> 更新日志页面查询</h3><h4 id="1-项目根目录build-gradle添加依赖"><a href="#1-项目根目录build-gradle添加依赖" class="headerlink" title="1. 项目根目录build.gradle添加依赖"></a>1. 项目根目录<code>build.gradle</code>添加依赖</h4><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//tinkersupport</span>  classpath <span class="token string">"com.tencent.bugly:tinker-support:1.2.0"</span></code></pre><h4 id="2-app-module下的build-gradle添加插件依赖"><a href="#2-app-module下的build-gradle添加插件依赖" class="headerlink" title="2. app module下的build.gradle添加插件依赖"></a>2. app module下的<code>build.gradle</code>添加插件依赖</h4><pre class=" language-java"><code class="language-java">  android <span class="token punctuation">{</span>        defaultConfig <span class="token punctuation">{</span>          ndk <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//设置支持的SO库架构</span>            abiFilters <span class="token string">'armeabi'</span> <span class="token comment" spellcheck="true">//, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      dependencies <span class="token punctuation">{</span>          compile <span class="token string">"com.android.support:multidex:1.0.1"</span> <span class="token comment" spellcheck="true">// 多dex配置</span>          <span class="token comment" spellcheck="true">//注释掉原有bugly的仓库</span>          <span class="token comment" spellcheck="true">//compile 'com.tencent.bugly:crashreport:latest.release'//其中latest.release指代最新版本号，也可以指定明确的版本号，例如1.3.4</span>          compile <span class="token string">'com.tencent.bugly:crashreport_upgrade:1.3.6'</span>          <span class="token comment" spellcheck="true">// 指定tinker依赖版本（注：应用升级1.3.5版本起，不再内置tinker）</span>          compile <span class="token string">'com.tencent.tinker:tinker-android-lib:1.9.9'</span>          compile <span class="token string">'com.tencent.bugly:nativecrashreport:latest.release'</span> <span class="token comment" spellcheck="true">//其中latest.release指代最新版本号，也可以指定明确的版本号，例如2.2.0</span>      <span class="token punctuation">}</span></code></pre><h4 id="3-添加tinker依赖插件脚本到app-module中build-gradle同级目录下"><a href="#3-添加tinker依赖插件脚本到app-module中build-gradle同级目录下" class="headerlink" title="3.添加tinker依赖插件脚本到app module中build.gradle同级目录下"></a>3.添加tinker依赖插件脚本到app module中build.gradle同级目录下</h4><pre class=" language-java"><code class="language-java">apply from<span class="token operator">:</span> <span class="token string">'tinker-support.gradle'</span></code></pre><p>tinker-support.gradle内容如下:</p><pre class=" language-groovy"><code class="language-groovy">apply plugin<span class="token punctuation">:</span> <span class="token string">'com.tencent.bugly.tinker-support'</span><span class="token keyword">def</span> bakPath <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"${buildDir}/bakApk/"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/** * 此处填写每次构建生成的基准包目录 */</span><span class="token keyword">def</span> baseApkDir <span class="token operator">=</span> <span class="token string">"app-0803-16-53-32"</span><span class="token comment" spellcheck="true">/** * 对于插件各参数的详细解析请参考 */</span>tinkerSupport <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 开启tinker-support插件，默认值true</span>    enable <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token comment" spellcheck="true">// 指定归档目录，默认值当前module的子目录tinker</span>    autoBackupApkDir <span class="token operator">=</span> <span class="token string">"${bakPath}"</span>    <span class="token comment" spellcheck="true">// 是否启用覆盖tinkerPatch配置功能，默认值false</span>    <span class="token comment" spellcheck="true">// 开启后tinkerPatch配置不生效，即无需添加tinkerPatch</span>    overrideTinkerPatchConfiguration <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token comment" spellcheck="true">// 编译补丁包时，必需指定基线版本的apk，默认值为空</span>    <span class="token comment" spellcheck="true">// 如果为空，则表示不是进行补丁包的编译</span>    <span class="token comment" spellcheck="true">// @{link tinkerPatch.oldApk }</span>    baseApk <span class="token operator">=</span> <span class="token string">"${bakPath}/${baseApkDir}/app-release.apk"</span>    <span class="token comment" spellcheck="true">// 对应tinker插件applyMapping</span>    baseApkProguardMapping <span class="token operator">=</span> <span class="token string">"${bakPath}/${baseApkDir}/app-release-mapping.txt"</span>    <span class="token comment" spellcheck="true">// 对应tinker插件applyResourceMapping</span>    baseApkResourceMapping <span class="token operator">=</span> <span class="token string">"${bakPath}/${baseApkDir}/app-release-R.txt"</span>    <span class="token comment" spellcheck="true">//建议设置true,用户就不用再自己管理tinkerId的命名,插件会为每一次构建的base包自动生成唯一的tinkerId，默认命名规则是versionname.versioncode_时间戳</span>    <span class="token comment" spellcheck="true">//具体参考https://github.com/BuglyDevTeam/Bugly-Android-Demo/wiki/Tinker-ID%E8%AF%A5%E6%80%8E%E4%B9%88%E8%AE%BE%E7%BD%AE</span>    autoGenerateTinkerId <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token comment" spellcheck="true">// 构建基准包和补丁包都要指定不同的tinkerId，并且必须保证唯一性</span>    tinkerId <span class="token operator">=</span> <span class="token string">"if autoGenerateTinkerId=true ,no need set here"</span>    <span class="token comment" spellcheck="true">// 构建多渠道补丁时使用</span>    <span class="token comment" spellcheck="true">// buildAllFlavorsDir = "${bakPath}/${baseApkDir}"</span>    <span class="token comment" spellcheck="true">// 是否启用加固模式，默认为false.(tinker-spport 1.0.7起支持）</span>    <span class="token comment" spellcheck="true">// isProtectedApp = true</span>    <span class="token comment" spellcheck="true">// 是否开启反射Application模式</span>    enableProxyApplication <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token comment" spellcheck="true">// 是否支持新增非export的Activity（注意：设置为true才能修改AndroidManifest文件）</span>    supportHotplugComponent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 一般来说,我们无需对下面的参数做任何的修改 * 对于各参数的详细介绍请参考: * https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97 */</span>tinkerPatch <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//oldApk ="${bakPath}/${appName}/app-release.apk"</span>    ignoreWarning <span class="token operator">=</span> <span class="token boolean">false</span>    useSign <span class="token operator">=</span> <span class="token boolean">true</span>    dex <span class="token punctuation">{</span>        dexMode <span class="token operator">=</span> <span class="token string">"jar"</span>        pattern <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"classes*.dex"</span><span class="token punctuation">]</span>        loader <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    lib <span class="token punctuation">{</span>        pattern <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"lib/*/*.so"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    res <span class="token punctuation">{</span>        pattern <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"res/*"</span><span class="token punctuation">,</span> <span class="token string">"r/*"</span><span class="token punctuation">,</span> <span class="token string">"assets/*"</span><span class="token punctuation">,</span> <span class="token string">"resources.arsc"</span><span class="token punctuation">,</span> <span class="token string">"AndroidManifest.xml"</span><span class="token punctuation">]</span>        ignoreChange <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        largeModSize <span class="token operator">=</span> <span class="token number">100</span>    <span class="token punctuation">}</span>    packageConfig <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    sevenZip <span class="token punctuation">{</span>        zipArtifact <span class="token operator">=</span> <span class="token string">"com.tencent.mm:SevenZip:1.1.10"</span><span class="token comment" spellcheck="true">//        path = "/usr/local/bin/7za"</span>    <span class="token punctuation">}</span>    buildConfig <span class="token punctuation">{</span>        keepDexApply <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token comment" spellcheck="true">//tinkerId = "1.0.1-base"</span>        <span class="token comment" spellcheck="true">//applyMapping = "${bakPath}/${appName}/app-release-mapping.txt" //  可选，设置mapping文件，建议保持旧apk的proguard混淆方式</span>        <span class="token comment" spellcheck="true">//applyResourceMapping = "${bakPath}/${appName}/app-release-R.txt" // 可选，设置R.txt文件，通过旧apk文件保持ResId的分配</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-在AndroidMainfest-xml中添加权限"><a href="#4-在AndroidMainfest-xml中添加权限" class="headerlink" title="4. 在AndroidMainfest.xml中添加权限"></a>4. 在<code>AndroidMainfest.xml</code>中添加权限</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.READ_PHONE_STATE"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.INTERNET"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_NETWORK_STATE"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_WIFI_STATE"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.READ_LOGS"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.REQUEST_INSTALL_PACKAGES"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><h4 id="5-添加混淆配置-在app-module中的proguard-rules-pro"><a href="#5-添加混淆配置-在app-module中的proguard-rules-pro" class="headerlink" title="5. 添加混淆配置,在app module中的proguard-rules.pro"></a>5. 添加混淆配置,在app module中的<code>proguard-rules.pro</code></h4><pre class=" language-java"><code class="language-java"><span class="token operator">-</span>dontwarn com<span class="token punctuation">.</span>tencent<span class="token punctuation">.</span>bugly<span class="token punctuation">.</span>*<span class="token operator">*</span><span class="token operator">-</span>keep <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">com<span class="token punctuation">.</span>tencent<span class="token punctuation">.</span>bugly<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token punctuation">}</span># tinker混淆规则<span class="token operator">-</span>dontwarn com<span class="token punctuation">.</span>tencent<span class="token punctuation">.</span>tinker<span class="token punctuation">.</span>*<span class="token operator">*</span><span class="token operator">-</span>keep <span class="token keyword">class</span> <span class="token class-name">com<span class="token punctuation">.</span>tencent<span class="token punctuation">.</span>tinker<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token operator">*</span> <span class="token punctuation">{</span> <span class="token operator">*</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h4 id="5-初始化SDK"><a href="#5-初始化SDK" class="headerlink" title="5.初始化SDK"></a>5.初始化SDK</h4><h5 id="5-1-enableProxyApplication-false-的情况"><a href="#5-1-enableProxyApplication-false-的情况" class="headerlink" title="5.1 enableProxyApplication = false 的情况"></a>5.1 enableProxyApplication = false 的情况</h5><p><strong>自定义Application</strong>  xxx.xxx.SampleApplicationLike 修改为自己的包名对应位置的SampleApplicationLike</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleApplication</span> <span class="token keyword">extends</span> <span class="token class-name">TinkerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">SampleApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>ShareConstants<span class="token punctuation">.</span>TINKER_ENABLE_ALL<span class="token punctuation">,</span> <span class="token string">"xxx.xxx.SampleApplicationLike"</span><span class="token punctuation">,</span>                <span class="token string">"com.tencent.tinker.loader.TinkerLoader"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>修改<code>AndroidManifest</code>中<code>application</code>的name为<code>SampleApplication</code></p><p><strong>自定义ApplicationLike</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleApplicationLike</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultApplicationLike</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"Tinker.SampleApplicationLike"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SampleApplicationLike</span><span class="token punctuation">(</span>Application application<span class="token punctuation">,</span> <span class="token keyword">int</span> tinkerFlags<span class="token punctuation">,</span>            <span class="token keyword">boolean</span> tinkerLoadVerifyFlag<span class="token punctuation">,</span> <span class="token keyword">long</span> applicationStartElapsedTime<span class="token punctuation">,</span>            <span class="token keyword">long</span> applicationStartMillisTime<span class="token punctuation">,</span> Intent tinkerResultIntent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>application<span class="token punctuation">,</span> tinkerFlags<span class="token punctuation">,</span> tinkerLoadVerifyFlag<span class="token punctuation">,</span> applicationStartElapsedTime<span class="token punctuation">,</span> applicationStartMillisTime<span class="token punctuation">,</span> tinkerResultIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里实现SDK初始化，appId替换成你的在Bugly平台申请的appId</span>        <span class="token comment" spellcheck="true">// 调试时，将第三个参数改为true</span>        Bugly<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"900029763"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@TargetApi</span><span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>ICE_CREAM_SANDWICH<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onBaseContextAttached</span><span class="token punctuation">(</span>Context base<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onBaseContextAttached</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// you must install multiDex whatever tinker is installed!</span>        MultiDex<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 安装tinker</span>        <span class="token comment" spellcheck="true">// TinkerManager.installTinker(this); 替换成下面Bugly提供的方法</span>        Beta<span class="token punctuation">.</span><span class="token function">installTinker</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@TargetApi</span><span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>ICE_CREAM_SANDWICH<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerActivityLifecycleCallback</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>ActivityLifecycleCallbacks callbacks<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerActivityLifecycleCallbacks</span><span class="token punctuation">(</span>callbacks<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>tinker需要你开启MultiDex,Android 21以上自带MultiDex 在app module下的<code>build.gradle</code> - <code>defaultConfig</code>下添加<code>multiDexEnabled true</code></p></blockquote><h5 id="5-2-enableProxyApplication-true-的情况"><a href="#5-2-enableProxyApplication-true-的情况" class="headerlink" title="5.2 enableProxyApplication = true 的情况"></a>5.2 enableProxyApplication = true 的情况</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里实现SDK初始化，appId替换成你的在Bugly平台申请的appId</span>        <span class="token comment" spellcheck="true">// 调试时，将第三个参数改为true</span>        Bugly<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"900029763"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">attachBaseContext</span><span class="token punctuation">(</span>Context base<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">attachBaseContext</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// you must install multiDex whatever tinker is installed!</span>        MultiDex<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 安装tinker</span>        Beta<span class="token punctuation">.</span><span class="token function">installTinker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="二-生成基准包和补丁包步骤"><a href="#二-生成基准包和补丁包步骤" class="headerlink" title="二.生成基准包和补丁包步骤"></a>二.生成基准包和补丁包步骤</h3><h4 id="2-1-生成基准包"><a href="#2-1-生成基准包" class="headerlink" title="2.1 生成基准包"></a>2.1 生成基准包</h4><p>gradler中点击<code>assembleRelease</code>或直接<code>Generate signed APK</code>,生成后的文件会在app-build-bakApk目录下,按照生成时间命令文件夹,基准包需要保存好.</p><p><img src="/images/tinker_01.png" alt="tinker_01.png"></p><h4 id="2-2-生成补丁包"><a href="#2-2-生成补丁包" class="headerlink" title="2.2 生成补丁包"></a>2.2 生成补丁包</h4><ul><li><p>在改好bug后,修改<code>tinker-support.gradle</code>中的<code>def baseApkDir = &quot;app-0803-16-53-32&quot;</code>为基准包的文件夹名称,<code>tinkerId</code>由于已经设置了<code>autoGenerateTinkerId = true</code>,因此不需要自己修改</p></li><li><p>点击Gradle选项中的<code>tinker-support</code>,选择<code>buildTinkerPatchRelease</code>,等待生成补丁包完成</p></li></ul><p><img src="/images/tinker_02.png" alt="tinker_02.png"></p><ul><li>如 果一切正常,生成的补丁包会在<strong>app-build-outputs-patch-release目录</strong>下,选择<code>patch_signed.apk</code>或<code>patch_signed_7zip.apk</code>上传到bugly平台的热更新中即可.</li></ul><p><img src="/images/tinker_03.png" alt="tinker_03.png"></p><h3 id="三-tinker生成补丁包中出现的问题"><a href="#三-tinker生成补丁包中出现的问题" class="headerlink" title="三.tinker生成补丁包中出现的问题"></a>三.tinker生成补丁包中出现的问题</h3><h5 id="1-签名配置-can’t-the-get-signConfig-for-this-build"><a href="#1-签名配置-can’t-the-get-signConfig-for-this-build" class="headerlink" title="1.签名配置 can’t the get signConfig for this build"></a>1.签名配置 <strong>can’t the get signConfig for this build</strong></h5><p>签名没有配置正确,除需要在app module-android下配置<code>signingConfigs</code>和<code>buildTypes</code>外,在<code>defaultConfig</code>下添加<code>signingConfig signingConfigs.release</code></p><p><img src="/images/tinker_04.png" alt="tinker_04.png"></p><h4 id="2-提交补丁时提示未匹配到可应用补丁包的APP版本"><a href="#2-提交补丁时提示未匹配到可应用补丁包的APP版本" class="headerlink" title="2.提交补丁时提示未匹配到可应用补丁包的APP版本"></a>2.提交补丁时提示未匹配到可应用补丁包的APP版本</h4><ul><li><p>基准包需要安装并且联网运行一次,才能上报到bugly</p></li><li><p>如果是Android P以上的版本,基准包运行后也会发现无法上报到bugly,查看日志会提示<code>Cleartext HTTP traffic to android.bugly.qq.com not permitted</code>,解决方法如下:</p><p>在<code>res</code>目录下新建<code>xml</code>文件夹,新建文件<code>network_security_config.xml</code>,然后重新打包运行即可.</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>network<span class="token operator">-</span>security<span class="token operator">-</span>config<span class="token operator">></span>    <span class="token operator">&lt;</span>base<span class="token operator">-</span>config cleartextTrafficPermitted<span class="token operator">=</span><span class="token string">"true"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>network<span class="token operator">-</span>security<span class="token operator">-</span>config<span class="token operator">></span></code></pre></li></ul><h4 id="3-运行assembleDebug时提示”错误-无法访问Keep-找不到android-support-annotation-Keep的类文件"><a href="#3-运行assembleDebug时提示”错误-无法访问Keep-找不到android-support-annotation-Keep的类文件" class="headerlink" title="3.运行assembleDebug时提示”错误: 无法访问Keep 找不到android.support.annotation.Keep的类文件"></a>3.运行assembleDebug时提示”错误: 无法访问Keep 找不到android.support.annotation.Keep的类文件</h4><blockquote><p>tinker-android-anno-1.9.14.5使用了supprot包的<a href="https://github.com/keep" target="_blank" rel="noopener">@keep</a>，应该是androidx和suport包不能并存，可将当前工程和依赖包都统一为androidx，在gradle.properties添加以下配置试试</p></blockquote><pre class=" language-java"><code class="language-java">android<span class="token punctuation">.</span>useAndroidX<span class="token operator">=</span><span class="token boolean">true</span>android<span class="token punctuation">.</span>enableJetifier<span class="token operator">=</span><span class="token boolean">true</span></code></pre><h4 id="4-生成补丁包时提示can’t-find-tinkerProcessReleaseManifest-you-must-init-tinker-plugin-first"><a href="#4-生成补丁包时提示can’t-find-tinkerProcessReleaseManifest-you-must-init-tinker-plugin-first" class="headerlink" title="4.生成补丁包时提示can’t find tinkerProcessReleaseManifest, you must init tinker plugin first!"></a>4.生成补丁包时提示<strong>can’t find tinkerProcessReleaseManifest, you must init tinker plugin first!</strong></h4><blockquote><p>Tinker目前还不支持Gradle 5.x，需要降低Gradle版本</p><p>1.修改gradle文件夹下的<code>gradle-wrapper.properties</code>版本</p><p>distributionUrl=https://services.gradle.org/distributions/gradle-5.6.4-all.zip</p><p>2.修改项目根目录下的<code>build.gradle</code>中gradle依赖版本为</p><pre class=" language-java"><code class="language-java">classpath <span class="token string">"com.android.tools.build:gradle:3.5.3"</span></code></pre></blockquote><h4 id="5-警告Warning-ignoreWarning-is-false-but-we-found-loader-classes-are-found-in-old-secondary-dex-Found-classes-Lcom-tencent-tinker-loader-R"><a href="#5-警告Warning-ignoreWarning-is-false-but-we-found-loader-classes-are-found-in-old-secondary-dex-Found-classes-Lcom-tencent-tinker-loader-R" class="headerlink" title="5. 警告Warning:ignoreWarning is false, but we found loader classes are found in old secondary dex. Found classes: {Lcom/tencent/tinker/loader/R;}"></a>5. 警告Warning:ignoreWarning is false, but we found loader classes are found in old secondary dex. Found classes: {Lcom/tencent/tinker/loader/R;}</h4><p>降低<code>minSdkVersion</code>版本到21有效解决</p><pre><code>defaultConfig {        applicationId &quot;xxx&quot;        minSdkVersion 21        targetSdkVersion 29        versionCode 1        versionName &quot;1&quot;}</code></pre><h4 id="6-加固版本生成基准包步骤-先在官网确认bugly支持的加固产品和版本"><a href="#6-加固版本生成基准包步骤-先在官网确认bugly支持的加固产品和版本" class="headerlink" title="6.加固版本生成基准包步骤,先在官网确认bugly支持的加固产品和版本"></a>6.加固版本生成基准包步骤,先在官网确认bugly支持的<a href="https://bugly.qq.com/docs/user-guide/instruction-manual-android-hotfix-demo/?v=20200622202242#1isprotectedapp" target="_blank" rel="noopener">加固产品和版本</a></h4><ul><li><p>5.1 打补丁包时<strong>tinker-support</strong>中<code>isProtectedApp = true</code>需要打开</p></li><li><p>5.2 <strong>tinker-support</strong> 填写加固前的基准包目录,生成补丁包上传到bugly</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 热修复 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tinker </tag>
            
            <tag> Bugly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android模拟器启动报错：Cannot find AVD system path. Please define ANDROID_SDK_ROOT</title>
      <link href="/2020/06/09/29.android-mo-ni-qi-qi-dong-bao-cuo-cannot-find-avd-system-path-please-define-android-sdk-root/"/>
      <url>/2020/06/09/29.android-mo-ni-qi-qi-dong-bao-cuo-cannot-find-avd-system-path-please-define-android-sdk-root/</url>
      
        <content type="html"><![CDATA[<p>今天在重装系统安装AS之后发现模拟器无法启动，提示这样一个错误：<br><code>Cannot find AVD system path. Please define ANDROID_SDK_ROOT</code></p><p>按照网上的方法设置AVD_HOME，开启VT等均无法解决，后来发现是由于中文用户名导致的，参照教程更改Windows中文用户名为英文后，删除C:\User\xxx.android\avd目录，重启AS，新建模拟器就可以正常启动了。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android Studio </tag>
            
            <tag> Android模拟器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin使用接口回调</title>
      <link href="/2020/06/02/14.kotlin-jie-kou-hui-diao/"/>
      <url>/2020/06/02/14.kotlin-jie-kou-hui-diao/</url>
      
        <content type="html"><![CDATA[<h1 id="Kotlin的接口回调实现"><a href="#Kotlin的接口回调实现" class="headerlink" title="Kotlin的接口回调实现"></a>Kotlin的接口回调实现</h1><h2 id="1-Java中的接口回调实现-支持多方法回调"><a href="#1-Java中的接口回调实现-支持多方法回调" class="headerlink" title="1.Java中的接口回调实现(支持多方法回调)"></a>1.Java中的接口回调实现(支持多方法回调)</h2><ul><li>声明回调接口,初始化接口</li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> OnClickListener onClickListener<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOnClickListener</span><span class="token punctuation">(</span>OnClickListener onClickListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onClickListener <span class="token operator">=</span> onClickListener<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">interface</span> <span class="token class-name">OnClickListener</span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">void</span> <span class="token function">onItemClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><ul><li>使用接口回调(无参数)</li></ul><pre class=" language-java"><code class="language-java">    onClickListener<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>使用接口回调(带参数)</li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">interface</span> <span class="token class-name">OnClickListener</span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    onClickListener<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="2-Kotlin中的接口回调实现-适用于接口中单个方法"><a href="#2-Kotlin中的接口回调实现-适用于接口中单个方法" class="headerlink" title="2.Kotlin中的接口回调实现(适用于接口中单个方法)"></a>2.Kotlin中的接口回调实现(适用于接口中单个方法)</h2><h3 id="2-1方法无参无返回值回调"><a href="#2-1方法无参无返回值回调" class="headerlink" title="2.1方法无参无返回值回调"></a>2.1方法无参无返回值回调</h3><pre class=" language-kotlin"><code class="language-kotlin">   <span class="token keyword">fun</span> <span class="token function">setClickListener</span><span class="token punctuation">(</span>listener<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>listener <span class="token operator">=</span> listener    <span class="token punctuation">}</span>   <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> listener<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit</code></pre><ul><li>使用接口回调</li></ul><pre class=" language-kotlin"><code class="language-kotlin">listener<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-2-方法有参无返回值回调"><a href="#2-2-方法有参无返回值回调" class="headerlink" title="2.2 方法有参无返回值回调"></a>2.2 方法有参无返回值回调</h3><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> listener<span class="token operator">:</span> <span class="token punctuation">(</span>position<span class="token operator">:</span>Int<span class="token punctuation">)</span> <span class="token operator">-></span> Unit       <span class="token keyword">fun</span> <span class="token function">setClickListener</span><span class="token punctuation">(</span>listener<span class="token operator">:</span> <span class="token punctuation">(</span>position<span class="token operator">:</span>Int<span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>listener <span class="token operator">=</span> listener    <span class="token punctuation">}</span></code></pre><ul><li>使用接口回调</li></ul><pre class=" language-kotlin"><code class="language-kotlin">    listener<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span></code></pre><h3 id="2-3-方法有参有返回值回调"><a href="#2-3-方法有参有返回值回调" class="headerlink" title="2.3 方法有参有返回值回调"></a>2.3 方法有参有返回值回调</h3><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> listener<span class="token operator">:</span> <span class="token punctuation">(</span>position<span class="token operator">:</span>Int<span class="token punctuation">)</span> <span class="token operator">-></span> Int    <span class="token keyword">fun</span> <span class="token function">setClickListener</span><span class="token punctuation">(</span>listener<span class="token operator">:</span> <span class="token punctuation">(</span>position<span class="token operator">:</span>Int<span class="token punctuation">)</span> <span class="token operator">-></span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>listener <span class="token operator">=</span> listener    <span class="token punctuation">}</span></code></pre><ul><li>使用接口回调</li></ul><pre class=" language-kotlin"><code class="language-kotlin">    listener<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span></code></pre><ul><li>外部调用接口时</li></ul><pre class=" language-kotlin"><code class="language-kotlin">    view<span class="token punctuation">.</span><span class="token function">setClickListener</span><span class="token punctuation">{</span>position <span class="token operator">-></span>        <span class="token operator">..</span><span class="token punctuation">.</span>        <span class="token number">0</span>  <span class="token comment" spellcheck="true">//返回值放在最后               </span>    <span class="token punctuation">}</span></code></pre><h2 id="3-Kotlin多方法接口回调"><a href="#3-Kotlin多方法接口回调" class="headerlink" title="3.Kotlin多方法接口回调"></a>3.Kotlin多方法接口回调</h2><ul><li>新建Interface类</li></ul><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token keyword">interface</span> TestInterface <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">onClick</span><span class="token punctuation">(</span>position<span class="token operator">:</span>Int<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//带参数方法回调</span>    <span class="token keyword">fun</span> <span class="token function">onItemClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>初始化接口</li></ul><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token keyword">fun</span> <span class="token function">setInterface</span><span class="token punctuation">(</span>listener<span class="token operator">:</span> TestInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>listener <span class="token operator">=</span> listener    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> listener<span class="token operator">:</span> TestInterface</code></pre><ul><li>使用接口回调</li></ul><pre class=" language-kotlin"><code class="language-kotlin">     listener<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span>     listener<span class="token punctuation">.</span><span class="token function">onItemClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2020/05/19/28.zheng-ze-biao-da-shi/"/>
      <url>/2020/05/19/28.zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="1-单个字符的匹配规则如下："><a href="#1-单个字符的匹配规则如下：" class="headerlink" title="1.单个字符的匹配规则如下："></a>1.单个字符的匹配规则如下：</h3><table><thead><tr><th align="left">正则表达式</th><th align="left">规则</th><th align="right">可以匹配</th></tr></thead><tbody><tr><td align="left"><code>A</code></td><td align="left">指定字符</td><td align="right"><code>A</code></td></tr><tr><td align="left"><code>\u548c</code></td><td align="left">指定Unicode字符</td><td align="right"><code>和</code></td></tr><tr><td align="left"><code>.</code></td><td align="left">任意字符</td><td align="right"><code>a</code>，<code>b</code>，<code>&amp;</code>，<code>0</code></td></tr><tr><td align="left"><code>\d</code></td><td align="left">数字0~9</td><td align="right"><code>0</code>~<code>9</code></td></tr><tr><td align="left"><code>\w</code></td><td align="left">大小写字母，数字和下划线</td><td align="right"><code>a</code><del><code>z</code>，<code>A</code></del><code>Z</code>，<code>0</code>~<code>9</code>，<code>_</code></td></tr><tr><td align="left"><code>\s</code></td><td align="left">空格、Tab键</td><td align="right">空格，Tab</td></tr><tr><td align="left"><code>\D</code></td><td align="left">非数字</td><td align="right"><code>a</code>，<code>A</code>，<code>&amp;</code>，<code>_</code>，……</td></tr><tr><td align="left"><code>\W</code></td><td align="left">非\w</td><td align="right"><code>&amp;</code>，<code>@</code>，<code>中</code>，……</td></tr><tr><td align="left"><code>\S</code></td><td align="left">非\s</td><td align="right"><code>a</code>，<code>A</code>，<code>&amp;</code>，<code>_</code>，……</td></tr></tbody></table><h3 id="2-多个字符的匹配规则如下"><a href="#2-多个字符的匹配规则如下" class="headerlink" title="2.多个字符的匹配规则如下"></a>2.多个字符的匹配规则如下</h3><table><thead><tr><th align="left">正则表达式</th><th align="left">规则</th><th align="left">可以匹配</th></tr></thead><tbody><tr><td align="left"><code>A*</code></td><td align="left">任意个数字符</td><td align="left">空，<code>A</code>，<code>AA</code>，<code>AAA</code>，……</td></tr><tr><td align="left"><code>A+</code></td><td align="left">至少1个字符</td><td align="left"><code>A</code>，<code>AA</code>，<code>AAA</code>，……</td></tr><tr><td align="left"><code>A?</code></td><td align="left">0个或1个字符</td><td align="left">空，<code>A</code></td></tr><tr><td align="left"><code>A{3}</code></td><td align="left">指定个数字符</td><td align="left"><code>AAA</code></td></tr><tr><td align="left"><code>A{2,3}</code></td><td align="left">指定范围个数字符</td><td align="left"><code>AA</code>，<code>AAA</code></td></tr><tr><td align="left"><code>A{2,}</code></td><td align="left">至少n个字符</td><td align="left"><code>AA</code>，<code>AAA</code>，<code>AAAA</code>，……</td></tr><tr><td align="left"><code>A{0,3}</code></td><td align="left">最多n个字符</td><td align="left">空，<code>A</code>，<code>AA</code>，<code>AAA</code></td></tr></tbody></table><h3 id="3-匹配指定范围"><a href="#3-匹配指定范围" class="headerlink" title="3.匹配指定范围"></a>3.匹配指定范围</h3><pre class=" language-java"><code class="language-java">比如1A2b3c，我们可以这样写：<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span>9a<span class="token operator">-</span>fA<span class="token operator">-</span>F<span class="token punctuation">]</span>，它表示一共可以匹配以下任意范围的字符：<span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>：字符<span class="token number">0</span><span class="token operator">~</span><span class="token number">9</span>；a<span class="token operator">-</span>f：字符a<span class="token operator">~</span>f；A<span class="token operator">-</span>F：字符A<span class="token operator">~</span>F。</code></pre><h4 id="3-1排除法"><a href="#3-1排除法" class="headerlink" title="3.1排除法"></a>3.1排除法</h4><p>​    <code>^</code> 不包含指定范围的字符</p><ul><li><p>假设我们要匹配任意字符，但不包括数字，可以写<code>[^1-9]{3}</code>：</p><ul><li><p>可以匹配<code>&quot;ABC&quot;</code>，因为不包含字符<code>1</code>~<code>9</code>；</p></li><li><p>可以匹配<code>&quot;A00&quot;</code>，因为不包含字符<code>1</code>~<code>9</code>；</p></li><li><p>不能匹配<code>&quot;A01&quot;</code>，因为包含字符<code>1</code>；</p></li><li><p>不能匹配<code>&quot;A05&quot;</code>，因为包含字符<code>5</code>。</p></li></ul></li></ul><h3 id="4-或规则匹配"><a href="#4-或规则匹配" class="headerlink" title="4.或规则匹配"></a>4.或规则匹配</h3><p>用<code>|</code>连接的两个正则规则是<em>或</em>规则，例如，<code>AB|CD</code>表示可以匹配<code>AB</code>或<code>CD</code></p><h3 id="5-实用括号"><a href="#5-实用括号" class="headerlink" title="5.实用括号"></a>5.实用括号</h3><p>现在我们想要匹配字符串<code>learn java</code>、<code>learn php</code>和<code>learn go</code>怎么办？一个最简单的规则是<code>learn\sjava|learn\sphp|learn\sgo</code>，但是这个规则太复杂了，可以把公共部分提出来，然后用<code>(...)</code>把子规则括起来表示成<code>learn\\s(java|php|go)</code>。</p><pre class=" language-java"><code class="language-java">var 使用括号匹配大写 <span class="token operator">=</span> <span class="token string">"learn\\s([Jj]ava|[Gg]o|[Pp]hp)"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//匹配字符串learn Java、learn Php和learn Go的大小写</span></code></pre><h3 id="6-分组匹配"><a href="#6-分组匹配" class="headerlink" title="6.分组匹配"></a>6.分组匹配</h3><p>正则匹配<code>区号-电话号</code>码这个规则</p><pre class=" language-java"><code class="language-java">\d<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span>\<span class="token operator">-</span>\d<span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span></code></pre><p>如果需要提取区号和电话号码，需要将要提取的规则使用括号分组，把上述正则表达式变为<code>(\d{3,4})\-(\d{6,8})</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Pattern p <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"(\\d{3,4})\\-(\\d{7,8})"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Matcher m <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"010-12345678"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//010-12345678</span>            String g1 <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">////010</span>            String g2 <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//12345678</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g1<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匹配失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用<code>Matcher</code>时，必须首先调用<code>matches()</code>判断是否匹配成功，匹配成功后，才能调用<code>group()</code>提取子串。</p><p>例子：<br>从字符串<code>23:01:59</code>提取时、分、秒</p><pre class=" language-java"><code class="language-java">var time <span class="token operator">=</span> <span class="token string">"([0-1]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)"</span><span class="token punctuation">;</span>Pattern p1 <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>Matcher m1 <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"23:01:59"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>m1<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匹配失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h3 id="7-非贪婪匹配"><a href="#7-非贪婪匹配" class="headerlink" title="7.非贪婪匹配"></a>7.非贪婪匹配</h3><p>给定一个字符串表示的数字，判断该数字末尾<code>0</code>的个数。可以很容易地写出该正则表达式：<code>(\d+)(0*)</code></p><ul><li><p><code>&quot;123000&quot;</code>：3个<code>0</code>  期望结果: <code>123</code> <code>000</code>  实际结果:<code>&quot;123000&quot;</code> <code>&quot;&quot;</code></p></li><li><p><code>&quot;10100&quot;</code>：2个<code>0</code>    期望结果: <code>101</code> <code>00</code>     实际结果:<code>&quot;10100&quot;</code> <code>&quot;&quot;</code></p></li><li><p><code>&quot;1001&quot;</code>：0个<code>0</code>      期望结果: <code>1001</code> <code>&quot;&quot;</code>   实际结果:<code>&quot;1001&quot;</code> <code>&quot;&quot;</code></p></li></ul><p>这是因为正则表达式默认使用贪婪匹配：任何一个规则，它总是尽可能多地向后匹配，因此，<code>\d+</code>总是会把后面的<code>0</code>包含进来。</p><p>要让<code>\d+</code>尽量少匹配，让<code>0*</code>尽量多匹配，我们就必须让<code>\d+</code>使用非贪婪匹配。在规则<code>\d+</code>后面加个<code>?</code>即可表示非贪婪匹配。</p><p>改写正则表达式如下<code>(\d+?)(0*)&quot;</code>   因此，给定一个匹配规则，加上<code>?</code>后就变成了非贪婪匹配。</p><p>我们再来看这个正则表达式<code>(\d??)(9*)</code>，注意<code>\d?</code>表示匹配0个或1个数字，后面第二个<code>?</code>表示非贪婪匹配，因此，给定字符串<code>&quot;9999&quot;</code>，匹配到的两个子串分别是<code>&quot;&quot;</code>和<code>&quot;9999&quot;</code>，因为对于<code>\d?</code>来说，可以匹配1个<code>9</code>，也可以匹配0个<code>9</code>，但是因为后面的<code>?</code>表示非贪婪匹配，它就会尽可能少的匹配，结果是匹配了0个<code>9</code>。</p><h3 id="8-搜索和替换"><a href="#8-搜索和替换" class="headerlink" title="8.搜索和替换"></a>8.搜索和替换</h3><h4 id="8-1-分割字符串"><a href="#8-1-分割字符串" class="headerlink" title="8.1 分割字符串"></a>8.1 分割字符串</h4><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"a b c"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[a, b, c]</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"a b  c"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[a, b, "", c]</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"a,b ;; c"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"[\\,\\s\\;]+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[a, b, c]</span></code></pre><h4 id="8-2-搜索字符串"><a href="#8-2-搜索字符串" class="headerlink" title="8.2 搜索字符串"></a>8.2 搜索字符串</h4><pre class=" language-java"><code class="language-java">String s <span class="token operator">=</span> <span class="token string">"the quick brown fox jumps over the lazy dog."</span><span class="token punctuation">;</span>Pattern p3 <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"\\wo\\w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// \w匹配[A-Za-z0-9_]</span>Matcher m3 <span class="token operator">=</span> p3<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>m3<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   String sub <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>m3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m3<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//row fox dog</span><span class="token punctuation">}</span></code></pre><p>我们获取到<code>Matcher</code>对象后，不需要调用<code>matches()</code>方法（因为匹配整个串肯定返回false），而是反复调用<code>find()</code>方法，在整个串中搜索能匹配上<code>\\wo\\w</code>规则的子串，并打印出来。这种方式比<code>String.indexOf()</code>要灵活得多，因为我们搜索的规则是3个字符：中间必须是<code>o</code>，前后两个必须是字符<code>[A-Za-z0-9_]</code>。</p><h4 id="8-3-替换字符串"><a href="#8-3-替换字符串" class="headerlink" title="8.3 替换字符串"></a>8.3 替换字符串</h4><pre class=" language-java"><code class="language-java">String s2 <span class="token operator">=</span> <span class="token string">"The     quick\t\t brown   fox  jumps   over the  lazy dog."</span><span class="token punctuation">;</span>String r <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将多个空格替换成一个</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "The quick brown fox jumps over the lazy dog."</span></code></pre><h4 id="8-4-反向引用"><a href="#8-4-反向引用" class="headerlink" title="8.4 反向引用"></a>8.4 反向引用</h4><pre class=" language-java"><code class="language-java">String s3 <span class="token operator">=</span> <span class="token string">"the quick brown fox jumps over the lazy dog."</span><span class="token punctuation">;</span>String r2 <span class="token operator">=</span> s3<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\\s([a-z]{4})\\s"</span><span class="token punctuation">,</span> <span class="token string">"&lt;b>$1&lt;/b>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//the quick brown fox jumps&lt;b>over&lt;/b>the&lt;b>lazy&lt;/b>dog.</span></code></pre><p>它实际上把任何4字符单词的前后用<code>&lt;b&gt;xxxx&lt;/b&gt;</code>括起来。实现替换的关键就在于<code>&quot; &lt;b&gt;$1&lt;/b&gt; &quot;</code>，它用匹配的分组子串<code>([a-z]{4})</code>替换了<code>$1</code>。</p><h4 id="8-5-使用Map替换模板中的值"><a href="#8-5-使用Map替换模板中的值" class="headerlink" title="8.5 使用Map替换模板中的值"></a>8.5 使用Map替换模板中的值</h4><pre class=" language-java"><code class="language-java">        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Mary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lang"</span><span class="token punctuation">,</span> <span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String model <span class="token operator">=</span> <span class="token string">"Hello, ${name}! You are learning ${lang}!"</span><span class="token punctuation">;</span>        Pattern pt <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"\\$\\{([a-z]+)}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Matcher mt <span class="token operator">=</span> pt<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>mt<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//0->${name}  1->name</span>           <span class="token comment" spellcheck="true">//0->${lang}  1->lang</span>           <span class="token comment" spellcheck="true">//0 代表整个匹配的字段  1代表匹配字段中的第一个分组</span>           mt<span class="token punctuation">.</span><span class="token function">appendReplacement</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mt<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mt<span class="token punctuation">.</span><span class="token function">appendTail</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
            <tag> Java学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter打包apk</title>
      <link href="/2020/04/29/8.flutter-da-bao-apk/"/>
      <url>/2020/04/29/8.flutter-da-bao-apk/</url>
      
        <content type="html"><![CDATA[<p>许多人在使用Flutter打包apk时都会参照文档的做法，但是按照文档基本上是百分之百失败的[手动狗头],官网的做法是这样的(可以不用看)</p><p><a href="https://flutterchina.club/android-release/" target="_blank" rel="noopener">官网做法</a></p><p>但是方法基本不可行。</p><p><strong>下面介绍一下正确的打包姿势</strong></p><p>如果没有创建key的同学，先在命令行里输入下面的代码</p><pre class=" language-java"><code class="language-java">keytool <span class="token operator">-</span>genkey <span class="token operator">-</span>v <span class="token operator">-</span>keystore D<span class="token operator">:</span><span class="token operator">/</span>key<span class="token punctuation">.</span>jks <span class="token operator">-</span>keyalg RSA <span class="token operator">-</span>keysize <span class="token number">2048</span> <span class="token operator">-</span>validity <span class="token number">10000</span> <span class="token operator">-</span>alias key</code></pre><p>接下来会让你创建密钥库和密钥的密码，记住自己创建的密码，下面会用到，</p><p>然后cmd就会让你输入一些信息，像一些奇奇怪怪的消息比如个人信息直接回车就可以了，然后中间会问你是否确认，输入y就可以了</p><p>不出意外在D盘的根目录下就会创建一个key.jks文件了，注意这个文件一定不要共享给别人。</p><a id="more"></a><ol><li>在android目录下创建一个key.properties文件 输入以下代码,保存一下。</li></ol><pre class=" language-java"><code class="language-java">storePassword<span class="token operator">=</span> 刚刚创建密钥库时的密码keyPassword<span class="token operator">=</span>  刚刚创建密钥的密码keyAlias<span class="token operator">=</span>keystoreFile<span class="token operator">=</span>D<span class="token operator">:</span><span class="token operator">/</span>key<span class="token punctuation">.</span>jks</code></pre><ol start="2"><li>接下来就是和文档不一样的地方了，也是个巨坑。打开flutter的/android/app/build.gradle文件，在android前加入<pre class=" language-java"><code class="language-java">def keystorePropertiesFile <span class="token operator">=</span> rootProject<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"key.properties"</span><span class="token punctuation">)</span>def keystoreProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span>keystoreProperties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>keystorePropertiesFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span></code></pre></li></ol><p>如图</p><p><img src="images/7.png" alt="img"></p><p>把buildTypes换成</p><pre class=" language-java"><code class="language-java">signingConfigs <span class="token punctuation">{</span>    release <span class="token punctuation">{</span>       keyAlias <span class="token string">"创建的密钥别名，如果不知道可以去key.jsk文件所在目录输入keytool -list -v -keystore key.jks -storepass 对应的密码"</span>        keyPassword <span class="token string">"密钥的密码"</span><span class="token operator">*</span><span class="token operator">*</span>        storeFile <span class="token function">file</span><span class="token punctuation">(</span>“密钥所在文件夹，如果是按照我上面的步骤的话是D<span class="token operator">:</span><span class="token operator">/</span>key<span class="token punctuation">.</span>jks”<span class="token punctuation">)</span>        storePassword <span class="token string">"密钥库的密码"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>buildTypes <span class="token punctuation">{</span>    release <span class="token punctuation">{</span>        signingConfig signingConfigs<span class="token punctuation">.</span>release    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如图</p><p><img src="/images/8.png" alt="img"><br>最后在命令行输入输入</p><pre class=" language-java"><code class="language-java">flutter build apk</code></pre><p>大概率就大功告成了！</p><p>我们的apk文件保存在Flutter文件夹的build\app\outputs\apk\release\app-release.apk 目录下。</p><p>这样我们就完美避开了G家在文档里挖的坑啦！</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin中的泛型</title>
      <link href="/2020/04/29/15.kotlin-zhong-de-fan-xing/"/>
      <url>/2020/04/29/15.kotlin-zhong-de-fan-xing/</url>
      
        <content type="html"><![CDATA[<p>泛型</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>TextView<span class="token operator">></span> textViews <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Button<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//会报错</span></code></pre><p>Java 的泛型类型会在编译时发生类型擦除，为了保证类型安全，不允许这样赋值。</p><p>Java中的解决方式:</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">TextView</span><span class="token operator">></span> textViews <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Button<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>其中 ? 是个通配符，表示这个 List 的泛型类型是一个未知类型这个 ，? extends 叫做「上界通配符」，可以使 Java 泛型具有「协变性 Covariance」，协变就是允许上面的赋值是合法的</p><p>下面几种情况都是可以的：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">TextView</span><span class="token operator">></span> textViews <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>TextView<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 👈 本身</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">TextView</span><span class="token operator">></span> textViews <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Button<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 👈 直接子类</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">TextView</span><span class="token operator">></span> textViews <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>RadioButton<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 👈 间接子类</span></code></pre><p>编译器没法确定 ? 的类型，所以只能 get 到 Object 对象,无法add。</p><p>这个 ? super 叫做「下界通配符」，可以使 Java 泛型具有「逆变性 Contravariance」。</p><p>与上界通配符对应，这里 super 限制了通配符 ? 的子类型，所以称之为下界。</p><pre><code>List&lt;? super Button&gt; buttons = new ArrayList&lt;TextView&gt;();</code></pre><p>下面几种情况都是可以的：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Button<span class="token operator">></span> buttons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Button<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 👈 本身</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Button<span class="token operator">></span> buttons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>TextView<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 👈 直接父类</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Button<span class="token operator">></span> buttons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 👈 间接父类</span></code></pre><a id="more"></a><p>对于使用了下界通配符的 List，我们再看看它的 get 和 add 操作：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Button<span class="token operator">></span> buttons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>TextView<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object object <span class="token operator">=</span> buttons<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 👈 get 出来的是 Object 类型</span>Button button <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>buttons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 👈 add 操作是可以的</span></code></pre><p>Kotlin中的写法:</p><p>和 Java 泛型一样，Kolin 中的泛型本身也是不可变的。</p><ul><li><p>使用关键字 out 来支持协变，等同于 Java 中的上界通配符 ? extends。</p></li><li><p>使用关键字 in 来支持逆变，等同于 Java 中的下界通配符 ? super。</p><p>  🏝️<br>  var textViews: List<out TextView><br>  var textViews: List<in TextView></p></li></ul><p>out 表示，我这个变量或者参数只用来输出，不用来输入，你只能读我不能写我；in就反过来，表示它只用来输入，不用来输出，你只能写我不能读我。</p><p>Kotlin 提供了另外一种写法：可以在声明类的时候，给泛型符号加上 out 关键字，表明泛型参数 T 只会用来输出，在使用的时候就不用额外加 out 了。</p><pre class=" language-java"><code class="language-java">🏝️             👇<span class="token keyword">class</span> <span class="token class-name">Producer</span><span class="token operator">&lt;</span>out T<span class="token operator">></span> <span class="token punctuation">{</span>    fun <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>val producer<span class="token operator">:</span> Producer<span class="token operator">&lt;</span>TextView<span class="token operator">></span> <span class="token operator">=</span> Producer<span class="token operator">&lt;</span>Button<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 👈 这里不写 out 也不会报错</span>val producer<span class="token operator">:</span> Producer<span class="token operator">&lt;</span>out TextView<span class="token operator">></span> <span class="token operator">=</span> Producer<span class="token operator">&lt;</span>Button<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 👈 out 可以但没必要</span></code></pre><p>与 out 一样，可以在声明类的时候，给泛型参数加上 in 关键字，来表明这个泛型参数 T 只用来输入。</p><pre class=" language-java"><code class="language-java">🏝️            👇<span class="token keyword">class</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>in T<span class="token operator">></span> <span class="token punctuation">{</span>    fun <span class="token function">consume</span><span class="token punctuation">(</span>t<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>val consumer<span class="token operator">:</span> Consumer<span class="token operator">&lt;</span>Button<span class="token operator">></span> <span class="token operator">=</span> Consumer<span class="token operator">&lt;</span>TextView<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 👈 这里不写 in 也不会报错</span>val consumer<span class="token operator">:</span> Consumer<span class="token operator">&lt;</span>in Button<span class="token operator">></span> <span class="token operator">=</span> Consumer<span class="token operator">&lt;</span>TextView<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 👈 in 可以但没必要</span></code></pre><ul><li><p>号</p><p>Java 中单个 ? 号也能作为泛型通配符使用，相当于 ? extends Object。 它在 Kotlin 中有等效的写法：*号，相当于 out Any</p></li></ul><p>reified 关键字</p><p>检查一个对象是否为泛型类型 T 的实例：</p><p>Java:</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span>Object item<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               👆        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Kotlin:</p><pre class=" language-java"><code class="language-java">inline fun <span class="token operator">&lt;</span>reified T<span class="token operator">></span> <span class="token function">printIfTypeMatch</span><span class="token punctuation">(</span>item<span class="token operator">:</span> Any<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item is T<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 👈 这里就不会在提示错误了</span>        <span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>练习题</p><ul><li><p>实现一个 fill 函数，传入一个 Array 和一个对象，将对象填充到 Array 中，要求 Array 参数的泛型支持逆变（假设  Array size 为 1）。</p></li><li><p>实现一个 copy 函数，传入两个 Array 参数，将一个 Array 中的元素复制到另外个 Array 中，要求 Array 参数的泛型分别支持协变和逆变。（提示：Kotlin 中的 for 循环如果要用索引，需要使用 Array.indices）</p><pre class=" language-java"><code class="language-java">  fun <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">fill</span><span class="token punctuation">(</span>array<span class="token operator">:</span> Array<span class="token operator">&lt;</span>in T<span class="token operator">></span><span class="token punctuation">,</span> t<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>          array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> t      <span class="token punctuation">}</span>  fun <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">copy</span><span class="token punctuation">(</span>srcArray<span class="token operator">:</span> Array<span class="token operator">&lt;</span>out T<span class="token operator">></span><span class="token punctuation">,</span> dstArray<span class="token operator">:</span> Array<span class="token operator">&lt;</span>in T<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      srcArray<span class="token punctuation">.</span>forEachIndexed <span class="token punctuation">{</span> index<span class="token punctuation">,</span> t <span class="token operator">-</span><span class="token operator">></span>          dstArray<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> t      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Recyclerview 嵌套滑动冲突和非嵌套去除滑动效果的完美解决方案</title>
      <link href="/2020/04/29/20.recyclerview-qian-tao-hua-dong-chong-tu-he-fei-qian-tao-qu-chu-hua-dong-xiao-guo-de-jie-jue-fang-an/"/>
      <url>/2020/04/29/20.recyclerview-qian-tao-hua-dong-chong-tu-he-fei-qian-tao-qu-chu-hua-dong-xiao-guo-de-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<p>实际开发过程中，经常会使用Recyclerview嵌套 RecyclerView 或者 ScrollView 中嵌套Recyclerview。然而通过这种嵌套方式会导致 Recyclerview 显示不全、滑动卡顿等问题，下面我们就来提出解决以上问题的方案。</p><p>嵌套滑动解决方案<br>第一种方案 ： 将Recyclerview 放置于 LinearLayout 或 RelateveLayout 中</p><pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span>LinearLayout    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>    android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"vertical"</span><span class="token operator">></span>         <span class="token operator">&lt;</span>android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RecyclerView            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>overScrollMode<span class="token operator">=</span><span class="token string">"never"</span>            android<span class="token operator">:</span>scrollbars<span class="token operator">=</span><span class="token string">"none"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span></code></pre><p>第二种方案 ：用 NestedScrollView 来替换 ScrollView</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>NestedScrollView    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>LinearLayout        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"vertical"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RecyclerView            android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/recyclerView"</span>            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>NestedScrollView<span class="token operator">></span></code></pre><p>但是第二种方案还是会出现滑动卡顿问题，这时只需要禁止 RecyclerView 的滑动即可，<br>通过在 xml 中给 RecyclerView 添加 <strong>android:nestedScrollingEnabled=”false”</strong><br>或者 直接在代码中设置  <strong>recyclerView.setNestedScrollingEnabled(false);</strong></p><p>也可结合方案三使用<br>第三种方案：重写LinearLayoutManager的 canScrollVertically 方法从而禁止滑动 ，代码如下</p><pre class=" language-java"><code class="language-java">recyclerView<span class="token punctuation">.</span><span class="token function">setLayoutManager</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinearLayoutManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canScrollVertically</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>版权声明：本文为CSDN博主「浮生未歇_」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/w13576267399/article/details/86238822" target="_blank" rel="noopener">https://blog.csdn.net/w13576267399/article/details/86238822</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RecyclerView </tag>
            
            <tag> 滑动冲突 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RecyclerView实现ViewPager翻页效果</title>
      <link href="/2020/04/29/21.recyclerview-shi-xian-viewpager-fan-ye-xiao-guo/"/>
      <url>/2020/04/29/21.recyclerview-shi-xian-viewpager-fan-ye-xiao-guo/</url>
      
        <content type="html"><![CDATA[<p>RecyclerView通过使用SnapHelper中的PagerSnapHelper可以实现ViewPager类似的一次滑动一页的显示效果:</p><p>在recyclerView设置LayoutManager的时候设置:</p><pre class=" language-java"><code class="language-java">PagerSnapHelper snapHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PagerSnapHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>recyclerView<span class="token punctuation">.</span><span class="token function">setOnFlingListener</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>snapHelper<span class="token punctuation">.</span><span class="token function">attachToRecyclerView</span><span class="token punctuation">(</span>recyclerView<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RecyclerView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>notifyItemRemoved的坑</title>
      <link href="/2020/04/29/18.recyclerview-notifyitemremoved-de-keng/"/>
      <url>/2020/04/29/18.recyclerview-notifyitemremoved-de-keng/</url>
      
        <content type="html"><![CDATA[<p>关于RecyclerView如何使用正确notifyItemRemoved,有一些坑必须要填,直接调用</p><pre class=" language-java"><code class="language-java">   data<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>posiiton<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">notifyItemRemoved</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>   position的位置会错乱,  <code>onBindViewHolder</code>不会调用,所以必须加上<code>notifyItemRangeChanged</code>才行</p><pre class=" language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">{</span>        data<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>posiiton<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">notifyItemRemoved</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">notifyItemRangeChanged</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RecyclerView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GridView与RecycleView滑动事件冲突的解决方案</title>
      <link href="/2020/04/29/11.gridview-yu-recycleview-hua-dong-shi-jian-chong-tu-de-jie-jue-fang-an/"/>
      <url>/2020/04/29/11.gridview-yu-recycleview-hua-dong-shi-jian-chong-tu-de-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/0883583f9074/" target="_blank" rel="noopener">GridView滑动事件冲突解决</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>AttributeSet<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>GridView<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by inerdstack on 2016/9/14. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyGridView</span> <span class="token keyword">extends</span> <span class="token class-name">GridView</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyGridView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyGridView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyGridView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> expandSpec <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">,</span>                MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onMeasure</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">,</span> expandSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><a id="more"></a><h2 id="或者手动计算GridView高度"><a href="#或者手动计算GridView高度" class="headerlink" title="或者手动计算GridView高度"></a>或者手动计算GridView高度</h2><p><img src="/images/6.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GridView </tag>
            
            <tag> RecyclerView </tag>
            
            <tag> 滑动冲突 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android RxJava的使用</title>
      <link href="/2020/04/29/2.android-rxjava-de-shi-yong/"/>
      <url>/2020/04/29/2.android-rxjava-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建一个上游 Observable：</span>        Observable<span class="token operator">&lt;</span>Integer<span class="token operator">></span> observable <span class="token operator">=</span> Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObservableOnSubscribe</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>ObservableEmitter<span class="token operator">&lt;</span>Integer<span class="token operator">></span> emitter<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                emitter<span class="token punctuation">.</span><span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建一个下游 Observer</span>        Observer<span class="token operator">&lt;</span>Integer<span class="token operator">></span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span>Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"subscribe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>Integer value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">""</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"complete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//建立连接</span>        observable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="线程的切换"><a href="#线程的切换" class="headerlink" title="线程的切换"></a>线程的切换</h3><h4 id="在RxJava中内置了很多线程选项"><a href="#在RxJava中内置了很多线程选项" class="headerlink" title="在RxJava中内置了很多线程选项:"></a>在RxJava中内置了很多线程选项:</h4><ul><li><code>Schedulers.io()</code> 代表io操作的线程, 通常用于网络,读写文件等io密集型的操作</li><li><code>Schedulers.computation()</code> 代表CPU计算密集型的操作, 例如需要大量计算的操作</li><li><code>Schedulers.newThread()</code> 代表一个常规的新线程</li><li><code>AndroidSchedulers.mainThread()</code> 代表Android的主线程</li></ul><h4 id="RxJava的操作符"><a href="#RxJava的操作符" class="headerlink" title="RxJava的操作符"></a>RxJava的操作符</h4><ol><li><code>Map</code>: 对上游发送的每一个事件应用一个函数, 使得每一个事件都按照指定的函数去变化</li><li><code>FlatMap</code>: 上游每发送一个事件, <code>flatMap</code>都将创建一个新的水管, 然后发送转换之后的新的事件, 下游接收到的就是这些新的水管发送的数据.需要注意的是, <code>flatMap</code>并不保证事件接收的顺序, 如果需要保证顺序则需要使用<code>concatMap</code>.</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RxJava </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ViewPager动态添加删除及刷新页面</title>
      <link href="/2020/04/29/26.viewpager-dong-tai-tian-jia-shan-chu-ji-shua-xin-ye-mian/"/>
      <url>/2020/04/29/26.viewpager-dong-tai-tian-jia-shan-chu-ji-shua-xin-ye-mian/</url>
      
        <content type="html"><![CDATA[<p>ViewPager的Adapter 支持Fragment动态添加和销毁<br>代码如下：</p><a id="more"></a><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//ViewPager的Adapter 支持Fragment动态添加和销毁</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ViewPagerAdapterNew</span> <span class="token keyword">extends</span> <span class="token class-name">MyFragmentPagerAdapter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>BaseFragment<span class="token operator">></span> mFragmentList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> mItemIdList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ViewPagerAdapterNew</span><span class="token punctuation">(</span>FragmentManager fm<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> List<span class="token operator">&lt;</span>BaseFragment<span class="token operator">></span> fragmentList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>fm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>BaseFragment fragment <span class="token operator">:</span> fragmentList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>mFragmentList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>            mItemIdList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">ViewPagerAdapterNew</span><span class="token punctuation">(</span>FragmentManager fm<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>fm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>BaseFragment<span class="token operator">></span> <span class="token function">getFragmentList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mFragmentList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPage</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> BaseFragment fragment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mFragmentList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>        mItemIdList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> id<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">notifyDataSetChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPage</span><span class="token punctuation">(</span>BaseFragment fragment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mFragmentList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>        mItemIdList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">notifyDataSetChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delPage</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mFragmentList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        mItemIdList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">notifyDataSetChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mFragmentList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mItemIdList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">notifyDataSetChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updatePage</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>BaseFragment<span class="token operator">></span> fragmentList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mFragmentList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mItemIdList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fragmentList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mFragmentList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fragmentList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mItemIdList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意这里是id++，不是i++。</span>        <span class="token punctuation">}</span>        <span class="token function">notifyDataSetChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> BaseFragment <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mFragmentList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mFragmentList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回值有三种，     * POSITION_UNCHANGED  默认值，位置没有改变     * POSITION_NONE       item已经不存在     * position            item新的位置     * 当position发生改变时这个方法应该返回改变后的位置，以便页面刷新。     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getItemPosition</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">BaseFragment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mFragmentList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mFragmentList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> POSITION_NONE<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getItemPosition</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getItemId</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mItemIdList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>链接：<a href="https://blog.csdn.net/wangxiaocheng16/article/details/79028954" target="_blank" rel="noopener">https://blog.csdn.net/wangxiaocheng16/article/details/79028954</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ViewPager </tag>
            
            <tag> Fragment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Layout.Inflater三个参数与两个参数的区别</title>
      <link href="/2020/04/29/16.layout-inflater-san-ge-can-shu-yu-liang-ge-can-shu-de-qu-bie/"/>
      <url>/2020/04/29/16.layout-inflater-san-ge-can-shu-yu-liang-ge-can-shu-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java">inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item<span class="token punctuation">,</span>parent<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//item直接绑定在parent,不用手动添加</span>inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item<span class="token punctuation">,</span>parent<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//item测量依赖parent,需要手动添加才能显示在parent</span>inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item<span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不管true、false,item都要手动添加才能显示在parent上，且item测量没有基准，显示效果不理想</span>inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item<span class="token punctuation">,</span>parent<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不管true、false,item都要手动添加才能显示在parent上，且item测量没有基准，显示效果不理想</span>总之一句话，推荐使用下边这种方式：inflate<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item<span class="token punctuation">,</span>parent<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Layout </tag>
            
            <tag> Inflate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android利用adb修改手机的分辨率和dpi</title>
      <link href="/2020/04/29/4.android-li-yong-adb-xiu-gai-shou-ji-de-fen-bian-lu-he-dpi/"/>
      <url>/2020/04/29/4.android-li-yong-adb-xiu-gai-shou-ji-de-fen-bian-lu-he-dpi/</url>
      
        <content type="html"><![CDATA[<p>在android开发过程中，适配更多的适配是必不可少的一步，而每次测试适配时，要么购买设配，要么模拟器，买设配太花钱，模拟器太占内存，不过幸好还可以通过修改手机的size(分辨率)和density来进行测试</p><ul><li><p>进入adb shell</p></li><li><p>wm size 查看分辨率</p><pre class=" language-java"><code class="language-java">$ wm sizePhysical size<span class="token operator">:</span> 2560x1600 默认的分辨率</code></pre></li><li><p>wm size 1920x1280 修改分辨率</p><pre class=" language-java"><code class="language-java">$ wm size 1920x1280 （小写的x）修改分辨率$ wm sizePhysical size<span class="token operator">:</span> 2560x1600Override size<span class="token operator">:</span> 1920x1280</code></pre></li><li><p>wm density 查看dpi</p><pre class=" language-java"><code class="language-java">$ wm densityPhysical density<span class="token operator">:</span> <span class="token number">320</span> 默认的dpi</code></pre></li><li><p>修改dpi</p><pre class=" language-java"><code class="language-java">$ wm density <span class="token number">240</span> 修改dpi$ wm densityPhysical density<span class="token operator">:</span> <span class="token number">320</span>Override density<span class="token operator">:</span> <span class="token number">240</span></code></pre></li><li><p>reset</p><pre class=" language-java"><code class="language-java">$ wm size reset$ wm density reset</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ADB </tag>
            
            <tag> dpi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android APP 黑白化实现探索</title>
      <link href="/2020/04/29/1.android-app-hei-bai-hua-shi-xian-tan-suo/"/>
      <url>/2020/04/29/1.android-app-hei-bai-hua-shi-xian-tan-suo/</url>
      
        <content type="html"><![CDATA[<p>BaseActivity<br>-&gt;<br>onCreate()<br>-&gt;参考链接</p><p><a href="https://mp.weixin.qq.com/s/EioJ8ogsCxQEFm44mKFiOQ" target="_blank" rel="noopener">App 黑白化实现探索2， 发现了一种更方便的方案，我被锤了</a></p><pre class=" language-java"><code class="language-java">Paint paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ColorMatrix cm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColorMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cm<span class="token punctuation">.</span><span class="token function">setSaturation</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mPaint<span class="token punctuation">.</span><span class="token function">setColorFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColorMatrixColorFilter</span><span class="token punctuation">(</span>cm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDecorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLayerType</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>LAYER_TYPE_HARDWARE<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 黑白化探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fragment的嵌套和切换代码</title>
      <link href="/2020/04/29/9.fragment-de-qian-tao-he-qie-huan-dai-ma/"/>
      <url>/2020/04/29/9.fragment-de-qian-tao-he-qie-huan-dai-ma/</url>
      
        <content type="html"><![CDATA[<p>在Activity中获取到FragmentManager</p><pre class=" language-java"><code class="language-java">mFragmentManager <span class="token operator">=</span> <span class="token function">getSupportFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>添加或者切换Fragment</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addView</span><span class="token punctuation">(</span>BaseFragment fragment<span class="token punctuation">,</span> String tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mFragmentTransaction <span class="token operator">=</span> mFragmentManager<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//优先检查，fragment是否存在，避免重叠</span>        BaseFragment tempFragment <span class="token operator">=</span> <span class="token punctuation">(</span>BaseFragment<span class="token punctuation">)</span> mFragmentManager<span class="token punctuation">.</span><span class="token function">findFragmentByTag</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tempFragment <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            fragment <span class="token operator">=</span> tempFragment<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fragment<span class="token punctuation">.</span><span class="token function">isAdded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">addOrShowFragment</span><span class="token punctuation">(</span>fragment<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>currentFragment <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> currentFragment<span class="token punctuation">.</span><span class="token function">isAdded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mFragmentTransaction<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>currentFragment<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>fl_container<span class="token punctuation">,</span> fragment<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commitAllowingStateLoss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                mFragmentTransaction<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>fl_container<span class="token punctuation">,</span> fragment<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commitAllowingStateLoss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            currentFragment <span class="token operator">=</span> fragment<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><a id="more"></a><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * 添加或者显示 fragment     *     * @param fragment     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addOrShowFragment</span><span class="token punctuation">(</span>BaseFragment fragment<span class="token punctuation">,</span> String tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentFragment <span class="token operator">==</span> fragment <span class="token operator">||</span> mFragmentManager <span class="token operator">==</span> null <span class="token operator">||</span> currentFragment <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果当前fragment未被添加，则添加到Fragment管理器中</span>        FragmentTransaction transaction <span class="token operator">=</span> mFragmentManager<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fragment<span class="token punctuation">.</span><span class="token function">isAdded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            transaction<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>currentFragment<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>fl_container<span class="token punctuation">,</span> fragment<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commitAllowingStateLoss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            transaction<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>currentFragment<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commitAllowingStateLoss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        currentFragment<span class="token punctuation">.</span><span class="token function">setUserVisibleHint</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        currentFragment <span class="token operator">=</span> fragment<span class="token punctuation">;</span>        currentFragment<span class="token punctuation">.</span><span class="token function">setUserVisibleHint</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fragment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CoordinatorLayout+AppBarLayout布局下的一键滚动到顶部的实现</title>
      <link href="/2020/04/29/7.coordinatorlayout-appbarlayout-bu-ju-fang-shi-xia-de-yi-jian-gun-dong-dao-ding-bu-de-shi-xian/"/>
      <url>/2020/04/29/7.coordinatorlayout-appbarlayout-bu-ju-fang-shi-xia-de-yi-jian-gun-dong-dao-ding-bu-de-shi-xian/</url>
      
        <content type="html"><![CDATA[<p>首先是布局</p><p>CoordinatorLayout嵌套AppBarLayout，滚动的头部都应该放在AppBarLayout里面，并使用app:layout_scrollFlags=”scroll”，<br>下面跟随滚动的使用app:layout_behavior=”@string/appbar_scrolling_view_behavior”</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//拿到 appbar 的 behavior,让 appbar 滚动</span>        ViewGroup<span class="token punctuation">.</span>LayoutParams layoutParams <span class="token operator">=</span> mAppbar<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CoordinatorLayout<span class="token punctuation">.</span>Behavior behavior <span class="token operator">=</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>CoordinatorLayout<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">)</span> layoutParams<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>behavior <span class="token keyword">instanceof</span> <span class="token class-name">AppBarLayout<span class="token punctuation">.</span>Behavior</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            AppBarLayout<span class="token punctuation">.</span>Behavior appBarLayoutBehavior <span class="token operator">=</span> <span class="token punctuation">(</span>AppBarLayout<span class="token punctuation">.</span>Behavior<span class="token punctuation">)</span> behavior<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//拿到下方tabs的y坐标，即为我要的偏移量</span>            <span class="token keyword">float</span> y <span class="token operator">=</span> mLlDataArea<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//注意传递负值</span>            appBarLayoutBehavior<span class="token punctuation">.</span><span class="token function">setTopAndBottomOffset</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//监听滚动</span>    appBarLayout<span class="token punctuation">.</span><span class="token function">addOnOffsetChangedListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AppBarLayout<span class="token punctuation">.</span>OnOffsetChangedListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onOffsetChanged</span><span class="token punctuation">(</span>AppBarLayout appBarLayout<span class="token punctuation">,</span> <span class="token keyword">int</span> verticalOffset<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>verticalOffset<span class="token punctuation">)</span> <span class="token operator">==</span> appBarLayout<span class="token punctuation">.</span><span class="token function">getTotalScrollRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            iv_scroll_to_top<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>VISIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            iv_scroll_to_top<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>GONE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CoordinatorLayout </tag>
            
            <tag> AppBarLayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android设置TabLayout间距</title>
      <link href="/2020/04/29/5.android-she-zhi-tablayout-jian-ju/"/>
      <url>/2020/04/29/5.android-she-zhi-tablayout-jian-ju/</url>
      
        <content type="html"><![CDATA[<h5 id="TabLayout-xml代码"><a href="#TabLayout-xml代码" class="headerlink" title="TabLayout xml代码"></a>TabLayout xml代码</h5><pre class=" language-java"><code class="language-java">   <span class="token operator">&lt;</span>com<span class="token punctuation">.</span>androidkun<span class="token punctuation">.</span>xtablayout<span class="token punctuation">.</span>XTabLayout        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/xTablayout"</span>        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"80dp"</span>        android<span class="token operator">:</span>layout_marginTop<span class="token operator">=</span><span class="token string">"65dp"</span>        app<span class="token operator">:</span>tabMaxWidth<span class="token operator">=</span><span class="token string">"240dp"</span>        app<span class="token operator">:</span>tabMinWidth<span class="token operator">=</span><span class="token string">"240dp"</span>        app<span class="token operator">:</span>tabPaddingEnd<span class="token operator">=</span><span class="token string">"20dp"</span>        app<span class="token operator">:</span>tabPaddingStart<span class="token operator">=</span><span class="token string">"20dp"</span>        app<span class="token operator">:</span>xTabIndicatorColor<span class="token operator">=</span><span class="token string">"@color/gradient_start_color"</span>        app<span class="token operator">:</span>xTabIndicatorHeight<span class="token operator">=</span><span class="token string">"10dp"</span>        app<span class="token operator">:</span>xTabIndicatorWidth<span class="token operator">=</span><span class="token string">"90dp"</span>        app<span class="token operator">:</span>xTabMode<span class="token operator">=</span><span class="token string">"scrollable"</span><span class="token operator">/</span><span class="token operator">></span></code></pre><h5 id="Actitivy代码"><a href="#Actitivy代码" class="headerlink" title="Actitivy代码"></a>Actitivy代码</h5><pre class=" language-java"><code class="language-java">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> labelList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    fragments<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>LabelFragment<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>labelList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    XTabLayout<span class="token punctuation">.</span>Tab tab <span class="token operator">=</span> mXTablayout<span class="token punctuation">.</span><span class="token function">newTab</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    View inflate <span class="token operator">=</span> View<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>mContext<span class="token punctuation">,</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>view_tab<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    TextView tv <span class="token operator">=</span> inflate<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_tabName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    tv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>labelList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLabelName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    LinearLayout<span class="token punctuation">.</span>LayoutParams layoutParams <span class="token operator">=</span> <span class="token punctuation">(</span>LinearLayout<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">)</span> tv<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    layoutParams<span class="token punctuation">.</span>rightMargin <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                    layoutParams<span class="token punctuation">.</span>leftMargin <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                    tv<span class="token punctuation">.</span><span class="token function">setLayoutParams</span><span class="token punctuation">(</span>layoutParams<span class="token punctuation">)</span><span class="token punctuation">;</span>                    tab<span class="token punctuation">.</span><span class="token function">setCustomView</span><span class="token punctuation">(</span>tv<span class="token punctuation">)</span><span class="token punctuation">;</span>                    mXTablayout<span class="token punctuation">.</span><span class="token function">addTab</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span></code></pre><h5 id="view-tab-布局代码"><a href="#view-tab-布局代码" class="headerlink" title="view_tab 布局代码"></a>view_tab 布局代码</h5><a id="more"></a><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>LinearLayout xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>              android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>              android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>TextView        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tv_tabName"</span>        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"240dp"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"80dp"</span>        android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@drawable/shape_tab"</span>        android<span class="token operator">:</span>gravity<span class="token operator">=</span><span class="token string">"center"</span>        android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"vertical"</span>        android<span class="token operator">:</span>textColor<span class="token operator">=</span><span class="token string">"@color/selector_tab_tv"</span>        android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"24sp"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TabLayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unable-to-resolve-dependency问题的处理</title>
      <link href="/2020/04/29/25.unable-to-resolve-dependency-wen-ti-de-chu-li/"/>
      <url>/2020/04/29/25.unable-to-resolve-dependency-wen-ti-de-chu-li/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/c4bbd66d842a" target="_blank" rel="noopener">原文链接</a></p><p>一、问题现象</p><p>今天在将本地 module 添加为项目的 dependency 时，出现了如下的错误：</p><p>image</p><p>该类错误的格式如下：</p><pre class=" language-java"><code class="language-java">Error<span class="token operator">:</span>Unable to resolve dependency <span class="token keyword">for</span> <span class="token string">':app@App名称/compileClasspath'</span><span class="token operator">:</span> Could not resolve project<span class="token operator">:</span>module库名称<span class="token punctuation">.</span></code></pre><p>二、问题原因：</p><p>刚看到该问题时一脸蒙圈，经过坚持不懈的Google，终于找到了原因和解决方案。</p><p>问题原因是：</p><p>你项目的build.gradle中 buildTypes{} 节点包含的子节点和你依赖的module的 build.type 中 buildType{} 包含的节点不一致</p><p>三、解决方案：</p><p>解决方案其实很简单：</p><p>找到你APP的 build.gradle 文件，将其中的 buildTypes {} 节点完整的拷贝到你的module库的 build.gradle 文件中即可。</p><p>只要节点数量和名称一致即可，节点中的内容可以不一致</p><p>四、解决示例：</p><p>我当前项目 build.gradle 的 buildTypes{} 节点如下：</p><pre class=" language-java"><code class="language-java"> buildTypes <span class="token punctuation">{</span>        debug <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//内容省略</span>        <span class="token punctuation">}</span>        release <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//内容省略</span>        <span class="token punctuation">}</span>        antTest <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//内容省略</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p> 那么，所依赖 moudle 的 build.gradle 的 buildTypes{} 节点如下：</p><pre class=" language-java"><code class="language-java">  buildTypes <span class="token punctuation">{</span>        debug <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//可以没有任何内容，只要节点数量和名称一致即可</span>        <span class="token punctuation">}</span>        release <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//可以没有任何内容，只要节点数量和名称一致即可</span>        <span class="token punctuation">}</span>        antTest <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//可以没有任何内容，只要节点数量和名称一致即可</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>五、参考链接：</p><p><a href="https://stackoverflow.com/questions/46949622/android-studio-3-0-unable-to-resolve-dependency-for-appdexoptions-compileclas" target="_blank" rel="noopener">https://stackoverflow.com/questions/46949622/android-studio-3-0-unable-to-resolve-dependency-for-appdexoptions-compileclas</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selector选择器图片大小不一致的问题</title>
      <link href="/2020/04/29/24.selector-xuan-ze-qi-tu-pian-da-xiao-bu-yi-zhi-de-wen-ti/"/>
      <url>/2020/04/29/24.selector-xuan-ze-qi-tu-pian-da-xiao-bu-yi-zhi-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h4 id="问题-在使用Selector的过程中-设置了选中和非选中状态下的图片-两张图片大小是不一致的-但是在setSelected-true-之后-图片显示的还是默认状态下的大小"><a href="#问题-在使用Selector的过程中-设置了选中和非选中状态下的图片-两张图片大小是不一致的-但是在setSelected-true-之后-图片显示的还是默认状态下的大小" class="headerlink" title="问题: 在使用Selector的过程中,设置了选中和非选中状态下的图片,两张图片大小是不一致的,但是在setSelected(true)之后,图片显示的还是默认状态下的大小."></a>问题: 在使用Selector的过程中,设置了选中和非选中状态下的图片,两张图片大小是不一致的,但是在<code>setSelected(true)</code>之后,图片显示的还是默认状态下的大小.</h4><p>原因:<img src="/images/5.png" alt="image"><br>8.0系统每次切换，这个地方<code>w</code>和<code>mDrawableWidth</code>,<code>h</code>和<code>mDrawableheight</code>的值始终一样，导致没有执行<code>requestLayout()</code>方法</p><p>解决方法:<br>每次<code>setSelected()</code>之后，手动调用一次<code>requestLayout()</code>方法</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Selector </tag>
            
            <tag> 图片选择器 </tag>
            
            <tag> 异常问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio Plugin with id &#39;com.anroid.application&#39; not found的处理</title>
      <link href="/2020/04/29/3.android-studio-plugin-with-id-com.anroid.application-not-found-de-chu-li/"/>
      <url>/2020/04/29/3.android-studio-plugin-with-id-com.anroid.application-not-found-de-chu-li/</url>
      
        <content type="html"><![CDATA[<p>最近在下载Demo运行时遇到<strong>Plugin with id ‘com.anroid.application’ not found</strong>问题，经查询，在项目module的build.gradle下配置以下代码即可解决。</p><pre class=" language-java"><code class="language-java">buildscript <span class="token punctuation">{</span>    repositories <span class="token punctuation">{</span>        <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    dependencies <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//填写自己AS的版本号</span>        classpath <span class="token string">'com.android.tools.build:gradle:2.3.3'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常问题 </tag>
            
            <tag> Android Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监听开机广播打开APP</title>
      <link href="/2020/04/29/27.jian-ting-kai-ji-guang-bo-da-kai-app/"/>
      <url>/2020/04/29/27.jian-ting-kai-ji-guang-bo-da-kai-app/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><ul><li>仅在Android原生系统上测试通过,由于国内手机厂商都有自己的自启动管理,因此不确定是否可用</li></ul><h3 id="1-创建广播接收者"><a href="#1-创建广播接收者" class="headerlink" title="1.创建广播接收者"></a>1.创建广播接收者</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBroadcastReceiver</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"BootBroadcastReceiver"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onReceive: 系统开机了"</span> <span class="token operator">+</span> intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Intent intent2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> MainActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intent2<span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>FLAG_ACTIVITY_NEW_TASK<span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-清单文件中配置权限"><a href="#2-清单文件中配置权限" class="headerlink" title="2.清单文件中配置权限"></a>2.清单文件中配置权限</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>监听开机广播<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.RECEIVE_BOOT_COMPLETED"</span><span class="token operator">/</span><span class="token operator">></span></code></pre><h3 id="3-清单文件中注册广播接收者"><a href="#3-清单文件中注册广播接收者" class="headerlink" title="3.清单文件中注册广播接收者"></a>3.清单文件中注册广播接收者</h3><p>AndroidManifest.xml的application标签中注册</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>开机广播接收者<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>receiver android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">".receiver.MyBroadcastReceiver"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>注册开机广播地址<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>action android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.action.BOOT_COMPLETED"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>category android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.category.DEFAULT"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>receiver<span class="token operator">></span></code></pre><h3 id="4-系统开机完成之后监听到广播自动打开App默认启动页面"><a href="#4-系统开机完成之后监听到广播自动打开App默认启动页面" class="headerlink" title="4.系统开机完成之后监听到广播自动打开App默认启动页面"></a>4.系统开机完成之后监听到广播自动打开App默认启动页面</h3><p><img src="/images/4.png" alt="4.png"></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 广播 </tag>
            
            <tag> 自启动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RGB颜色深浅排序</title>
      <link href="/2020/04/29/23.rgb-yan-se-shen-qian-pai-xu/"/>
      <url>/2020/04/29/23.rgb-yan-se-shen-qian-pai-xu/</url>
      
        <content type="html"><![CDATA[<p>最近由于项目需要,需要对后台传递过来的十六进制的RGB,按照颜色由浅至深进行排序.<br>参考此链接<a href="http://blog.sina.com.cn/s/blog_4b0617280100tx0w.html" target="_blank" rel="noopener">RGB排序</a>，通过将RGB 模式转换成YUK模式，而 Y 是明亮度（灰阶），因此只需要获得 Y 的值而判断他是否足够亮就可以了,当和大于等于此值就为浅色</p><pre class=" language-java"><code class="language-java">$grayLevel <span class="token operator">=</span> $R <span class="token operator">*</span> <span class="token number">0.299</span> <span class="token operator">+</span> $G <span class="token operator">*</span> <span class="token number">0.587</span> <span class="token operator">+</span> $B <span class="token operator">*</span> <span class="token number">0.114</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>$grayLevel <span class="token operator">>=</span> <span class="token number">192</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// add shadow</span><span class="token punctuation">}</span></code></pre><p>因此,通过对结果进行排序,可以得到我们需要的颜色深浅值,由于服务器返回的结果是十六进制的颜色值,类似<code>#3f45f8</code>这种,所以需要先转换成十进制. </p><pre class=" language-java"><code class="language-java">String color <span class="token operator">=</span> <span class="token string">"#3f45f8"</span><span class="token punctuation">;</span>String red <span class="token operator">=</span> color <span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String green <span class="token operator">=</span> color <span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String blue <span class="token operator">=</span> color <span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> r <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>red <span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> g <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>green <span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>blue <span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> grayLevel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>r <span class="token operator">*</span> <span class="token number">0.299</span> <span class="token operator">+</span> g <span class="token operator">*</span> <span class="token number">0.587</span> <span class="token operator">+</span> b <span class="token operator">*</span> <span class="token number">0.114</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>最后可以将得到的结果存入List或者是Map中排序,得到自己需要的结果~</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Color </tag>
            
            <tag> 排序 </tag>
            
            <tag> RGB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>item宽高无法自适应问题处理</title>
      <link href="/2020/04/29/12.item-kuan-gao-wu-fa-zi-gua-ying-wen-ti-chu-li/"/>
      <url>/2020/04/29/12.item-kuan-gao-wu-fa-zi-gua-ying-wen-ti-chu-li/</url>
      
        <content type="html"><![CDATA[<p>最近在使用RecyclerView的时候，需要item根据内容自适应高度，但是总是出现item高度无法自适应的情况，最终问题得到解决,在此记录下。<br>在RecyclerView父布局中设置了Match_parent,item布局设置了wrap_content，item无法自适应高度，代码如下</p><p>父布局代码</p><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RecyclerView        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/rv_list"</span>        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_marginTop<span class="token operator">=</span><span class="token string">"70dp"</span><span class="token operator">/</span><span class="token operator">></span></code></pre><p>子布局代码</p><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>LinearLayout        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>ImageView            android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/iv_photo"</span>            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span></code></pre><p>实际显示出来的效果是所有item高度都一致，默认都是第一个item内容的高度自适应，造成内容显示不全或者布局显示错乱，搜索了下，发现RecyclerView常用的LinearLayoutManager并没有自适应相关的内容。</p><h5 id="解决方法有两种："><a href="#解决方法有两种：" class="headerlink" title="解决方法有两种："></a>解决方法有两种：</h5><ul><li>1.继承并且重写LinearLayoutManager<br><a href="https://blog.csdn.net/u013519290/article/details/72860027/" target="_blank" rel="noopener">参考链接</a></li><li>2.使用其他LayoutManager  <code>StaggeredGridLayoutManager</code><ul><li>StaggeredGridLayoutManager是RecyclerView自带的瀑布流布局，可以设置水平或者垂直方向的布局，因此也可以用在自适应高度或者自适应宽度上，用法与创建LinearLayoutManager一样,高度自适应就设置<code>StaggeredGridLayoutManager.HORIZONTAL</code>,宽度自适应就设置<code>StaggeredGridLayoutManager.VERTICAL</code>,问题得到解决。</li></ul></li></ul><pre class=" language-java"><code class="language-java">StaggeredGridLayoutManager horizontalManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaggeredGridLayoutManager</span><span class="token punctuation">(</span>spanCount<span class="token punctuation">,</span> StaggeredGridLayoutManager<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">)</span><span class="token punctuation">;</span>mRecyclerView<span class="token punctuation">.</span><span class="token function">setLayoutManager</span><span class="token punctuation">(</span>horizontalManager<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RecyclerView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android属性动画的三种使用方式</title>
      <link href="/2020/04/29/6.android-shu-xing-dong-hua-de-san-chong-shi-yong-fang-shi/"/>
      <url>/2020/04/29/6.android-shu-xing-dong-hua-de-san-chong-shi-yong-fang-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="第一种：ViewPropertyAnimator"><a href="#第一种：ViewPropertyAnimator" class="headerlink" title="第一种：ViewPropertyAnimator"></a>第一种：ViewPropertyAnimator</h3><p>专门针对view设计的，使用简单操作方便，但是不易于扩展</p><h5 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h5><pre class=" language-java"><code class="language-java">view<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">translationX</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="第二种：ObjectAnimator"><a href="#第二种：ObjectAnimator" class="headerlink" title="第二种：ObjectAnimator"></a>第二种：ObjectAnimator</h3><p>继承自<code>ValueAnimator</code><br>实际上是通过调用view里面的<code>setter()</code>方法来更新参数值，例如下面的alpha实际上是调用的view里面的setAlpha()方法来更新值</p><h5 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h5><h6 id="旋转-rotation、rotationX、rotationY"><a href="#旋转-rotation、rotationX、rotationY" class="headerlink" title="旋转 rotation、rotationX、rotationY"></a>旋转 <code>rotation</code>、<code>rotationX</code>、<code>rotationY</code></h6><ul><li>rotationX：表示围绕 X 轴旋转，rotationX 表示旋转度数</li><li>rotationY:表示围绕 Y 轴旋转，rotationY 表示旋转度数</li><li>rotation:表示围绕 Z 旋转,rotation 表示旋转度数<h6 id="移动-translationX、translationY"><a href="#移动-translationX、translationY" class="headerlink" title="移动 translationX、translationY"></a>移动 <code>translationX</code>、<code>translationY</code></h6></li><li>translationX :表示在 X 轴上的平移距离,以当前控件为原点，向右为正方向，参数 translationX 表示移动的距离。</li><li>translationY :表示在 Y 轴上的平移距离，以当前控件为原点，向下为正方向，参数 translationY 表示移动的距离。<h6 id="缩放-scaleX、scaleY"><a href="#缩放-scaleX、scaleY" class="headerlink" title="缩放 scaleX、scaleY"></a>缩放 <code>scaleX</code>、<code>scaleY</code></h6></li><li>scaleX:在 X 轴上缩放，scaleX 表示缩放倍数</li><li>scaleY:在 Y 轴上缩放，scaleY 表示缩放倍数<h6 id="透明度-alpha"><a href="#透明度-alpha" class="headerlink" title="透明度 alpha"></a>透明度 <code>alpha</code></h6></li><li>alpha:改变透明度 范围：0-1 </li><li>1：不透明    0：完全透明</li></ul><pre class=" language-java"><code class="language-java">ObjectAnimator animator <span class="token operator">=</span> ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span><span class="token string">"alpha"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animator<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  animator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><a id="more"></a><h3 id="第三种方式：-ValueAnimator"><a href="#第三种方式：-ValueAnimator" class="headerlink" title="第三种方式： ValueAnimator"></a>第三种方式： ValueAnimator</h3><ul><li>ValueAnimator 是 ObjectAnimator 的父类，实际上，ValueAnimator 就是一个不能指定目标对象版本的 ObjectAnimator。</li><li>无法指定view对象，而是通过自身不断变化的值，自己手动去调用某个view的setter()方法来变化参数值</li><li>适用于第三方库控件里面属性没有对应的setter / getter 方法的时候，会需要用到它<h5 id="使用方式：-1"><a href="#使用方式：-1" class="headerlink" title="使用方式："></a>使用方式：</h5></li></ul><pre class=" language-java"><code class="language-java">ValueAnimator animator <span class="token operator">=</span> ValueAnimator<span class="token punctuation">.</span><span class="token function">ofInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个值从0到400的动画</span>animator<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//动画时长为1s</span>animator<span class="token punctuation">.</span><span class="token function">addUpdateListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValueAnimator<span class="token punctuation">.</span>AnimatorUpdateListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationUpdate</span><span class="token punctuation">(</span>ValueAnimator animation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> curValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>animation<span class="token punctuation">.</span><span class="token function">getAnimatedValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tv<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>curValue<span class="token punctuation">,</span>curValue<span class="token punctuation">,</span>curValue<span class="token operator">+</span>tv<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>curValue<span class="token operator">+</span>tv<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="三种方式的区别："><a href="#三种方式的区别：" class="headerlink" title="三种方式的区别："></a>三种方式的区别：</h3><ul><li>ViewPropertyAnimator、ObjectAnimator、ValueAnimator 这三种 Animator，它们其实是一种递进的关系：从左到右依次变得更加难用，也更加灵活。</li><li>它们的性能是一样的，因为 ViewPropertyAnimator 和 ObjectAnimator 的内部实现其实都是 ValueAnimator，ObjectAnimator 更是本来就是 ValueAnimator 的子类，它们三个的性能并没有差别。它们的差别只是使用的便捷性以及功能的灵活性。所以在实际使用时候的选择，只要遵循一个原则就行：尽量用简单的。能用 View.animate() 实现就不用 ObjectAnimator，能用 ObjectAnimator 就不用 ValueAnimator。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 动画 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动画 </tag>
            
            <tag> Animator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RecyclerView刷新ItemDecorations间距不断增加问题的处理</title>
      <link href="/2020/04/29/22.recyclerview-shua-xin-itemdecorations-jian-ju-bu-duan-zeng-jia-wen-ti-de-chu-li/"/>
      <url>/2020/04/29/22.recyclerview-shua-xin-itemdecorations-jian-ju-bu-duan-zeng-jia-wen-ti-de-chu-li/</url>
      
        <content type="html"><![CDATA[<p>为RecyclerView设置了<code>ItemDecorations</code>之后，在Adapter刷新数据<code>notifyDataSetChanged</code>后，item的间距会不断增大。</p><p><strong>原因</strong>：<br>recyclerView.addItemDecoration()方法中mItemDecorations并没有clear，每次都会添加进去，导致间距不断变大。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addItemDecoration</span><span class="token punctuation">(</span>ItemDecoration decor<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mLayout <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mLayout<span class="token punctuation">.</span><span class="token function">assertNotInLayoutOrScroll</span><span class="token punctuation">(</span><span class="token string">"Cannot add item decoration during a scroll  or"</span>                    <span class="token operator">+</span> <span class="token string">" layout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mItemDecorations<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setWillNotDraw</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mItemDecorations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>decor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            mItemDecorations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> decor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">markItemDecorInsetsDirty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">requestLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>解决方法：</strong></p><ul><li><p>1.清除添加的ItemDecorations</p><pre class=" language-bash"><code class="language-bash">recyclerView.removeItemDecoration<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>2.判断是否已经添加了ItemDecorations，如果存在就不添加</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>recyclerView<span class="token punctuation">.</span><span class="token function">getItemDecorationCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  recyclerView<span class="token punctuation">.</span><span class="token function">addItemDecoration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SpacesItemDecoration2</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><p>通过上述两种方式可以解决Item间距刷新后不断增加的问题。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RecyclerView </tag>
            
            <tag> ItemDecorations </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RecyclerView的getChildCount()返回item数量不正确</title>
      <link href="/2020/04/29/19.recyclerview-de-getchildcount-fan-hui-item-shu-liang-bu-zheng-que/"/>
      <url>/2020/04/29/19.recyclerview-de-getchildcount-fan-hui-item-shu-liang-bu-zheng-que/</url>
      
        <content type="html"><![CDATA[<p>最近在使用RecyclerView的时候需要遍历item执行一些操作，但是在使用RecyclerView的<code>getChildCount()</code>方法的时候发现返回的item数量和实际上的不一致。<br>查看源码发现<code>getChildCount()</code>实际上返回的是整数的可见的item数量，所以导致和实际的数量不一致，同样的<code>getChildAt(int index)</code>获取的也是可见的第index个位置的item。</p><p><img src="/images/1.png" alt="1.png"></p><p>解决方法就是使用适配器里面的方法<code>getAdapter().getItemCount()</code>，这个返回的就是实际的item数量<br><img src="/images/2.png" alt="2.png"></p><p>这样返回的item数量就是实际的数量。<br><img src="/images/3.png" alt="3.png"></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RecyclerView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java和Kotlin中的ViewStub用法</title>
      <link href="/2020/04/29/13.java-he-kotlin-zhong-de-viewstub-yong-fa/"/>
      <url>/2020/04/29/13.java-he-kotlin-zhong-de-viewstub-yong-fa/</url>
      
        <content type="html"><![CDATA[<p>Mac下配置了环境变量但是只在当前命令行窗口内有效，关闭之后重新打开就又需要输入<br><code>source .base_profile</code>才能生效，出现的原因是因为系统默认使用的是zsh终端导致，然后网上已经有很多种解决方案了，但是我自己试了都是没有效果，最终直接将<code>.base_profile</code>内的环境变量全部复制到<code>.zshrc</code>文件内。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># If you come from bash you might have to change your $PATH.</span><span class="token comment" spellcheck="true"># export PATH=$HOME/bin:/usr/local/bin:$PATH</span><span class="token comment" spellcheck="true"># Path to your oh-my-zsh installation.</span><span class="token function">export</span> ZSH<span class="token operator">=</span><span class="token string">"/Users/xxx/.oh-my-zsh"</span><span class="token function">export</span> PATH<span class="token operator">=</span>/Users/xxx/Development/flutter/bin:<span class="token variable">$PATH</span><span class="token function">export</span> ANDROID_HOME<span class="token operator">=</span><span class="token string">"/Users/xxx/Library/Android/sdk"</span> <span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">${PATH}</span>:/Users/xxx/Library/Android/sdk/platform-tools<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">${PATH}</span>:/Users/xxx/Library/Android/sdk/tools<span class="token function">export</span> PUB_HOSTED_URL<span class="token operator">=</span>https://pub.flutter-io.cn<span class="token function">export</span> FLUTTER_STORAGE_BASE_URL<span class="token operator">=</span>https://storage.flutter-io.cn</code></pre><p>最后在终端内输入<code>source .zshrc</code>立即生效，问题得到解决。</p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ViewStub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下环境变量无法生效的解决方案</title>
      <link href="/2020/04/29/17.mac-xia-huan-jing-bian-liang-wu-fa-sheng-xiao-de-jie-jue-fang-an/"/>
      <url>/2020/04/29/17.mac-xia-huan-jing-bian-liang-wu-fa-sheng-xiao-de-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<p>Mac下配置了环境变量但是只在当前命令行窗口内有效，关闭之后重新打开就又需要输入<br><code>source .base_profile</code>才能生效，出现的原因是因为系统默认使用的是zsh终端导致，然后网上已经有很多种解决方案了，但是我自己试了都是没有效果，最终直接将<code>.base_profile</code>内的环境变量全部复制到<code>.zshrc</code>文件内。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># If you come from bash you might have to change your $PATH.</span><span class="token comment" spellcheck="true"># export PATH=$HOME/bin:/usr/local/bin:$PATH</span><span class="token comment" spellcheck="true"># Path to your oh-my-zsh installation.</span><span class="token function">export</span> ZSH<span class="token operator">=</span><span class="token string">"/Users/xxx/.oh-my-zsh"</span><span class="token function">export</span> PATH<span class="token operator">=</span>/Users/xxx/Development/flutter/bin:<span class="token variable">$PATH</span><span class="token function">export</span> ANDROID_HOME<span class="token operator">=</span><span class="token string">"/Users/xxx/Library/Android/sdk"</span> <span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">${PATH}</span>:/Users/xxx/Library/Android/sdk/platform-tools<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">${PATH}</span>:/Users/xxx/Library/Android/sdk/tools<span class="token function">export</span> PUB_HOSTED_URL<span class="token operator">=</span>https://pub.flutter-io.cn<span class="token function">export</span> FLUTTER_STORAGE_BASE_URL<span class="token operator">=</span>https://storage.flutter-io.cn</code></pre><p>最后在终端内输入<code>source .zshrc</code>立即生效，问题得到解决。</p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境变量 </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git命令</title>
      <link href="/2020/04/23/10.git-ming-ling/"/>
      <url>/2020/04/23/10.git-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="1-设置用户名和邮箱地址"><a href="#1-设置用户名和邮箱地址" class="headerlink" title="1. 设置用户名和邮箱地址"></a>1. 设置用户名和邮箱地址</h3><pre class=" language-java"><code class="language-java">$ git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name <span class="token string">"Your Name"</span>$ git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email <span class="token string">"email@example.com"</span></code></pre><h3 id="2-Git初始化"><a href="#2-Git初始化" class="headerlink" title="2.  Git初始化"></a>2.  Git初始化</h3><pre class=" language-java"><code class="language-java">git init</code></pre><h3 id="3-Git添加文件"><a href="#3-Git添加文件" class="headerlink" title="3. Git添加文件"></a>3. Git添加文件</h3><h4 id="3-1-添加单个文件"><a href="#3-1-添加单个文件" class="headerlink" title="3.1 添加单个文件"></a>3.1 添加单个文件</h4><pre class=" language-java"><code class="language-java">git add readme<span class="token punctuation">.</span>txt</code></pre><h4 id="3-2-添加所有文件"><a href="#3-2-添加所有文件" class="headerlink" title="3.2 添加所有文件"></a>3.2 添加所有文件</h4><pre class=" language-java"><code class="language-java">git add <span class="token punctuation">.</span></code></pre><h3 id="4-Git查看状态"><a href="#4-Git查看状态" class="headerlink" title="4. Git查看状态"></a>4. Git查看状态</h3><pre class=" language-java"><code class="language-java">git status</code></pre><h3 id="5-Git修改操作"><a href="#5-Git修改操作" class="headerlink" title="5. Git修改操作"></a>5. Git修改操作</h3><h4 id="5-1-查看版本历史记录"><a href="#5-1-查看版本历史记录" class="headerlink" title="5.1  查看版本历史记录"></a>5.1  查看版本历史记录</h4><pre class=" language-java"><code class="language-java">  git log <span class="token operator">--</span>pretty<span class="token operator">=</span>oneline</code></pre><h4 id="5-2-回退到指定版本"><a href="#5-2-回退到指定版本" class="headerlink" title="5.2  回退到指定版本"></a>5.2  回退到指定版本</h4><pre class=" language-java"><code class="language-java">  git reset <span class="token operator">--</span>hard commit_id  版本号没必要写全，前几位就可以了  git reset <span class="token operator">--</span>hard HEAD<span class="token operator">~</span><span class="token number">1</span>  上一个版本就是HEAD<span class="token operator">^</span>，上上一个版本就是HEAD<span class="token operator">^</span><span class="token operator">^</span>，当然往上<span class="token number">100</span>个版本写<span class="token number">100</span>个<span class="token operator">^</span>比较容易数不过来，所以写成HEAD<span class="token operator">~</span><span class="token number">100</span>。</code></pre><h4 id="5-3-查看Git提交历史命令"><a href="#5-3-查看Git提交历史命令" class="headerlink" title="5.3  查看Git提交历史命令"></a>5.3  查看Git提交历史命令</h4><pre class=" language-java"><code class="language-java">  git reflog</code></pre><h4 id="5-4-比较文件区别"><a href="#5-4-比较文件区别" class="headerlink" title="5.4  比较文件区别"></a>5.4  比较文件区别</h4><pre class=" language-java"><code class="language-java">  git diff filename<span class="token operator">:</span>比较工作区和暂存区  git diff HEAD <span class="token operator">--</span> filename<span class="token operator">:</span>比较工作区和版本库的最新版本</code></pre><h4 id="5-5-丢弃工作区的修改"><a href="#5-5-丢弃工作区的修改" class="headerlink" title="5.5  丢弃工作区的修改"></a>5.5  丢弃工作区的修改</h4><pre class=" language-java"><code class="language-java">  git checkout <span class="token operator">--</span> readme<span class="token punctuation">.</span>txt  回到最近一次git commit或git add时的状态  从来没有被添加到版本库就被删除的文件，是无法恢复的！</code></pre><h4 id="5-6-丢弃暂存区的修改"><a href="#5-6-丢弃暂存区的修改" class="headerlink" title="5.6 丢弃暂存区的修改"></a>5.6 丢弃暂存区的修改</h4><pre class=" language-java"><code class="language-java">  git reset HEAD readme<span class="token punctuation">.</span>txt</code></pre><p>  如果已经add到暂存区需要恢复，需要先执行reset再执行checkout</p><h4 id="5-7-删除文件"><a href="#5-7-删除文件" class="headerlink" title="5.7 删除文件"></a>5.7 删除文件</h4><pre class=" language-java"><code class="language-java">  git rm test<span class="token punctuation">.</span>txt</code></pre><h3 id="6-GitHub远程仓库操作"><a href="#6-GitHub远程仓库操作" class="headerlink" title="6. GitHub远程仓库操作"></a>6. GitHub远程仓库操作</h3><h4 id="6-1-创建SSH-Key"><a href="#6-1-创建SSH-Key" class="headerlink" title="6.1 创建SSH Key"></a>6.1 创建SSH Key</h4><pre class=" language-java"><code class="language-java">   ssh<span class="token operator">-</span>keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span>C <span class="token string">"youremail@example.com"</span></code></pre><h4 id="6-2-远程仓库与本地仓库关联"><a href="#6-2-远程仓库与本地仓库关联" class="headerlink" title="6.2 远程仓库与本地仓库关联"></a>6.2 远程仓库与本地仓库关联</h4><pre class=" language-java"><code class="language-java">  git remote add origin git<span class="token annotation punctuation">@github</span><span class="token punctuation">.</span>com<span class="token operator">:</span>用户名<span class="token operator">/</span>仓库名<span class="token punctuation">.</span>git  添加第二个仓库也是这个命令</code></pre><h4 id="6-3-第一次推送"><a href="#6-3-第一次推送" class="headerlink" title="6.3 第一次推送"></a>6.3 第一次推送</h4><pre class=" language-java"><code class="language-java">  git push <span class="token operator">-</span>u origin master  由于远程库是空的，我们第一次推送master分支时，加上了<span class="token operator">-</span>u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令</code></pre><h4 id="6-4-推送到远程仓库"><a href="#6-4-推送到远程仓库" class="headerlink" title="6.4 推送到远程仓库"></a>6.4 推送到远程仓库</h4><pre class=" language-java"><code class="language-java">  git push origin master  origin仓库名 master分支名  多个远程仓库需要不同的仓库名</code></pre><h4 id="6-5-删除已经添加的远程库："><a href="#6-5-删除已经添加的远程库：" class="headerlink" title="6.5 删除已经添加的远程库："></a>6.5 删除已经添加的远程库：</h4><pre class=" language-java"><code class="language-java">  git remote rm <span class="token function">origin</span><span class="token punctuation">(</span>远程库名称<span class="token punctuation">)</span></code></pre><h3 id="7-Git分支管理"><a href="#7-Git分支管理" class="headerlink" title="7. Git分支管理"></a>7. Git分支管理</h3><h4 id="7-1-创建并切换到新分支"><a href="#7-1-创建并切换到新分支" class="headerlink" title="7.1 创建并切换到新分支"></a>7.1 创建并切换到新分支</h4><pre class=" language-java"><code class="language-java">  gut <span class="token keyword">switch</span> <span class="token operator">-</span>c dev    <span class="token comment" spellcheck="true">//新版本命令</span>  git checkout <span class="token operator">-</span>b dev    <span class="token comment" spellcheck="true">//旧的命令</span>  git checkout命令加上<span class="token operator">-</span>b参数表示创建并切换，相当于以下两条命令：  $ git branch dev      <span class="token comment" spellcheck="true">//创建分支</span>  $ git checkout dev  <span class="token comment" spellcheck="true">//切换分支 旧版本</span>  $ git <span class="token keyword">switch</span> dev    <span class="token comment" spellcheck="true">//切换分支 新版本</span>  Switched to branch <span class="token string">'dev'</span></code></pre><h4 id="7-2-合并分支"><a href="#7-2-合并分支" class="headerlink" title="7.2 合并分支"></a>7.2 合并分支</h4><pre class=" language-java"><code class="language-java">  git merge dev  将dev分支内容合并到当前分支</code></pre><h4 id="7-3-合并分支禁用Fast-forward"><a href="#7-3-合并分支禁用Fast-forward" class="headerlink" title="7.3 合并分支禁用Fast forward"></a>7.3 合并分支禁用Fast forward</h4><blockquote><p>通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。</p></blockquote><pre class=" language-java"><code class="language-java">  git merge <span class="token operator">--</span>no<span class="token operator">-</span>ff <span class="token operator">-</span>m <span class="token string">"merge with no-ff"</span> dev  因为本次合并要创建一个新的commit，所以加上<span class="token operator">-</span>m参数，把commit描述写进去。</code></pre><h4 id="7-4-删除分支"><a href="#7-4-删除分支" class="headerlink" title="7.4  删除分支"></a>7.4  删除分支</h4><pre class=" language-java"><code class="language-java">  git branch <span class="token operator">-</span>d dev  如果要丢弃一个没有被合并过的分支，可以通过git branch <span class="token operator">-</span>D <span class="token operator">&lt;</span>name<span class="token operator">></span>强行删除</code></pre><h4 id="7-5-查看分支合并情况"><a href="#7-5-查看分支合并情况" class="headerlink" title="7.5 查看分支合并情况"></a>7.5 查看分支合并情况</h4><pre class=" language-java"><code class="language-java">  git log <span class="token operator">--</span>graph <span class="token operator">--</span>pretty<span class="token operator">=</span>oneline <span class="token operator">--</span>abbrev<span class="token operator">-</span>commit  <span class="token comment" spellcheck="true">//简略</span>  git log <span class="token operator">--</span>graph    <span class="token comment" spellcheck="true">//详细信息</span></code></pre><h4 id="7-6-保存工作状态-未commit时切换分支需要保存工作状态"><a href="#7-6-保存工作状态-未commit时切换分支需要保存工作状态" class="headerlink" title="7.6 保存工作状态(未commit时切换分支需要保存工作状态)"></a>7.6 保存工作状态(未commit时切换分支需要保存工作状态)</h4><pre class=" language-java"><code class="language-java">  git stash  保存状态前需要先add追踪</code></pre><h4 id="7-7-恢复工作状态"><a href="#7-7-恢复工作状态" class="headerlink" title="7.7 恢复工作状态"></a>7.7 恢复工作状态</h4><pre class=" language-java"><code class="language-java">  一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；  另一种方式是用git stash pop，恢复的同时把stash内容也删了：</code></pre><h4 id="7-8-查看保存的工作状态"><a href="#7-8-查看保存的工作状态" class="headerlink" title="7.8 查看保存的工作状态"></a>7.8 查看保存的工作状态</h4><pre class=" language-java"><code class="language-java">  git stash list  多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash  git stash apply stash@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span></code></pre><h4 id="7-9-复制一个特定的提交到当前分支"><a href="#7-9-复制一个特定的提交到当前分支" class="headerlink" title="7.9 复制一个特定的提交到当前分支"></a>7.9 复制一个特定的提交到当前分支</h4><pre class=" language-java"><code class="language-java">  git cherry<span class="token operator">-</span>pick 4c805e2 </code></pre><h4 id="7-10-查看远程库信息"><a href="#7-10-查看远程库信息" class="headerlink" title="7.10 查看远程库信息"></a>7.10 查看远程库信息</h4><pre class=" language-java"><code class="language-java">  git remote   git remote <span class="token operator">-</span>v  查看详细信息</code></pre><h4 id="7-11-本地推送分支要远程库"><a href="#7-11-本地推送分支要远程库" class="headerlink" title="7.11 本地推送分支要远程库"></a>7.11 本地推送分支要远程库</h4><pre class=" language-java"><code class="language-java">  使用git push origin branch<span class="token operator">-</span>name，如果推送失败，先用git pull抓取远程的新提交</code></pre><h4 id="7-12-本地创建远程分支对应的分支"><a href="#7-12-本地创建远程分支对应的分支" class="headerlink" title="7.12 本地创建远程分支对应的分支"></a>7.12 本地创建远程分支对应的分支</h4><pre class=" language-java"><code class="language-java">  git checkout <span class="token operator">-</span>b branch<span class="token operator">-</span>name origin<span class="token operator">/</span>branch<span class="token operator">-</span>name  git <span class="token keyword">switch</span> <span class="token operator">-</span>c branch<span class="token operator">-</span>name origin<span class="token operator">/</span>branch<span class="token operator">-</span>name  本地和远程分支的名称最好一致</code></pre><h4 id="7-13-建立本地分支和远程分支的关联"><a href="#7-13-建立本地分支和远程分支的关联" class="headerlink" title="7.13 建立本地分支和远程分支的关联"></a>7.13 建立本地分支和远程分支的关联</h4><pre class=" language-java"><code class="language-java">  git branch <span class="token operator">--</span>set<span class="token operator">-</span>upstream branch<span class="token operator">-</span>name origin<span class="token operator">/</span>branch<span class="token operator">-</span>name</code></pre><h4 id="7-14-从远程抓取分支"><a href="#7-14-从远程抓取分支" class="headerlink" title="7.14 从远程抓取分支"></a>7.14 从远程抓取分支</h4><pre class=" language-java"><code class="language-java">  git pull </code></pre><h4 id="7-15-删除远程仓库分支"><a href="#7-15-删除远程仓库分支" class="headerlink" title="7.15 删除远程仓库分支"></a>7.15 删除远程仓库分支</h4><pre class=" language-java"><code class="language-java">  git push origin <span class="token operator">--</span>delete dev</code></pre><h4 id="7-16-Rebase"><a href="#7-16-Rebase" class="headerlink" title="7.16 Rebase"></a>7.16 Rebase</h4><pre class=" language-java"><code class="language-java">  Git rebase   在push之前操作   把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。</code></pre><h3 id="8-标签管理"><a href="#8-标签管理" class="headerlink" title="8. 标签管理"></a>8. 标签管理</h3><h4 id="8-1-创建Tag"><a href="#8-1-创建Tag" class="headerlink" title="8.1 创建Tag"></a>8.1 创建Tag</h4><pre class=" language-java"><code class="language-java">  git tag <span class="token operator">&lt;</span>name<span class="token operator">></span> 默认标签是打在最新提交的commit上的  git tag v0<span class="token number">.9</span> f52c633     <span class="token comment" spellcheck="true">//对指定的commit id打tag</span>  git tag <span class="token operator">-</span>a v0<span class="token number">.1</span> <span class="token operator">-</span>m <span class="token string">"version 0.1 released"</span> 1094adb    <span class="token comment" spellcheck="true">//创建带有说明的标签</span></code></pre><h4 id="8-2-查看标签"><a href="#8-2-查看标签" class="headerlink" title="8.2 查看标签"></a>8.2 查看标签</h4><pre class=" language-java"><code class="language-java">  git tag  git show <span class="token operator">&lt;</span>tagname<span class="token operator">></span>        <span class="token comment" spellcheck="true">//查看标签信息</span></code></pre><h4 id="8-3-删除标签"><a href="#8-3-删除标签" class="headerlink" title="8.3 删除标签"></a>8.3 删除标签</h4><pre class=" language-java"><code class="language-java">  git tag <span class="token operator">-</span>d v0<span class="token number">.1</span></code></pre><h4 id="8-4-推送标签到远程库"><a href="#8-4-推送标签到远程库" class="headerlink" title="8.4 推送标签到远程库"></a>8.4 推送标签到远程库</h4><pre class=" language-java"><code class="language-java">  git push origin <span class="token operator">&lt;</span>tagname<span class="token operator">></span>        <span class="token comment" spellcheck="true">//推送某个标签</span>  git push origin <span class="token operator">--</span>tags            <span class="token comment" spellcheck="true">//推送全部标签</span></code></pre><h4 id="8-5-删除远程库标签"><a href="#8-5-删除远程库标签" class="headerlink" title="8.5 删除远程库标签"></a>8.5 删除远程库标签</h4><pre class=" language-java"><code class="language-java">  git tag <span class="token operator">-</span>d v0<span class="token number">.9</span>        <span class="token comment" spellcheck="true">//先删除本地标签</span>  git push origin <span class="token operator">:</span>refs<span class="token operator">/</span>tags<span class="token operator">/</span>v0<span class="token number">.9</span>    <span class="token comment" spellcheck="true">//删除远程标签</span></code></pre><h3 id="9-添加忽略文件"><a href="#9-添加忽略文件" class="headerlink" title="9. 添加忽略文件"></a>9. 添加忽略文件</h3><h4 id="9-1-强制添加已经被忽略的文件"><a href="#9-1-强制添加已经被忽略的文件" class="headerlink" title="9.1 强制添加已经被忽略的文件"></a>9.1 强制添加已经被忽略的文件</h4><p><code>-f</code></p><pre class=" language-java"><code class="language-java">  git add <span class="token operator">-</span>f App<span class="token punctuation">.</span><span class="token keyword">class</span></code></pre><h4 id="9-2-检查忽略文件规则"><a href="#9-2-检查忽略文件规则" class="headerlink" title="9.2 检查忽略文件规则"></a>9.2 检查忽略文件规则</h4><p> <code>git check-ignore</code></p><pre class=" language-java"><code class="language-java">  $ git check<span class="token operator">-</span>ignore <span class="token operator">-</span>v App<span class="token punctuation">.</span><span class="token keyword">class</span>  <span class="token class-name"><span class="token punctuation">.</span>gitignore</span><span class="token operator">:</span><span class="token number">3</span><span class="token operator">:</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token keyword">class</span>    <span class="token class-name">App<span class="token punctuation">.</span>class</span></code></pre><p>  <code>.gitignore</code>文件本身要放到版本库里，并且可以对<code>.gitignore</code>做版本管理</p><h3 id="10-配置别名"><a href="#10-配置别名" class="headerlink" title="10. 配置别名"></a>10. 配置别名</h3><pre class=" language-java"><code class="language-java">  我们只需要敲一行命令，告诉Git，以后st就表示status：  $ git config <span class="token operator">--</span>global alias<span class="token punctuation">.</span>st status</code></pre><p>  每个仓库的Git配置文件都放在<code>.git/config</code>文件中：</p><pre class=" language-java"><code class="language-java">  $ cat <span class="token punctuation">.</span>git<span class="token operator">/</span>config </code></pre><p>  而当前用户的Git配置文件放在用户主目录下的一个隐藏文件<code>.gitconfig</code>中：</p><pre class=" language-java"><code class="language-java">  $ cat <span class="token punctuation">.</span>gitconfig</code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/2020/01/15/hello-hexo/"/>
      <url>/2020/01/15/hello-hexo/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建新的文件"><a href="#创建新的文件" class="headerlink" title="创建新的文件"></a>创建新的文件</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="本地运行服务"><a href="#本地运行服务" class="headerlink" title="本地运行服务"></a>本地运行服务</h3><pre class=" language-bash"><code class="language-bash">$ hexo s$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h3><pre class=" language-bash"><code class="language-bash">$ hexo g$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="上传到远程仓库"><a href="#上传到远程仓库" class="headerlink" title="上传到远程仓库"></a>上传到远程仓库</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
