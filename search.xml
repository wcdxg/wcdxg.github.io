<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git命令</title>
      <link href="/2020/04/23/git-ming-ling/"/>
      <url>/2020/04/23/git-ming-ling/</url>
      
        <content type="html"><![CDATA[<h3 id="设置用户名和邮箱地址"><a href="#设置用户名和邮箱地址" class="headerlink" title="设置用户名和邮箱地址"></a>设置用户名和邮箱地址</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> config --global user.name <span class="token string">"Your Name"</span>$ <span class="token function">git</span> config --global user.email <span class="token string">"email@example.com"</span></code></pre><h3 id="Git初始化"><a href="#Git初始化" class="headerlink" title="Git初始化"></a>Git初始化</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> init</code></pre><h3 id="Git添加文件"><a href="#Git添加文件" class="headerlink" title="Git添加文件"></a>Git添加文件</h3><ul><li>添加单个文件  </li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add readme.txt</code></pre><ul><li>添加所有文件</li></ul><pre class=" language-java"><code class="language-java">git add <span class="token punctuation">.</span></code></pre><h3 id="Git查看状态"><a href="#Git查看状态" class="headerlink" title="Git查看状态"></a>Git查看状态</h3><pre class=" language-java"><code class="language-java">git status</code></pre><h3 id="Git修改操作"><a href="#Git修改操作" class="headerlink" title="Git修改操作"></a>Git修改操作</h3><p>查看版本历史记录</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> log --pretty<span class="token operator">=</span>oneline</code></pre><p>回退到指定版本</p><pre class=" language-java"><code class="language-java">  git reset <span class="token operator">--</span>hard commit_id  版本号没必要写全，前几位就可以了  git reset <span class="token operator">--</span>hard HEAD<span class="token operator">~</span><span class="token number">1</span>  上一个版本就是HEAD<span class="token operator">^</span>，上上一个版本就是HEAD<span class="token operator">^</span><span class="token operator">^</span>，当然往上<span class="token number">100</span>个版本写<span class="token number">100</span>个<span class="token operator">^</span>比较容易数不过来，所以写成HEAD<span class="token operator">~</span><span class="token number">100</span>。</code></pre><p>查看Git提交历史命令</p><pre class=" language-java"><code class="language-java">  git reflog</code></pre>  <a id="more"></a><p>比较文件区别</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> <span class="token function">diff</span> filename:比较工作区和暂存区  <span class="token function">git</span> <span class="token function">diff</span> HEAD -- filename:比较工作区和版本库的最新版本</code></pre><p>丢弃工作区的修改</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> checkout -- readme.txt  回到最近一次git commit或git add时的状态  从来没有被添加到版本库就被删除的文件，是无法恢复的！</code></pre><p>丢弃暂存区的修改</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> reset HEAD readme.txt</code></pre><p>  如果已经add到暂存区需要恢复，需要先执行reset再执行checkout</p><p>删除文件</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> <span class="token function">rm</span> test.txt</code></pre><h3 id="GitHub远程仓库操作"><a href="#GitHub远程仓库操作" class="headerlink" title="GitHub远程仓库操作"></a>GitHub远程仓库操作</h3><p>创建SSH Key</p><pre class=" language-bash"><code class="language-bash">   ssh-keygen -t rsa -C <span class="token string">"youremail@example.com"</span></code></pre><p>远程仓库与本地仓库关联</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> remote add origin git@github.com:用户名/仓库名.git  添加第二个仓库也是这个命令</code></pre><p>第一次推送</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> push -u origin master  由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令</code></pre><p>推送到远程仓库</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> push origin master  origin仓库名 master分支名  多个远程仓库需要不同的仓库名</code></pre><p>删除已经添加的远程库：</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> remote <span class="token function">rm</span> origin<span class="token punctuation">(</span>远程库名称<span class="token punctuation">)</span></code></pre><h3 id="Git分支管理"><a href="#Git分支管理" class="headerlink" title="Git分支管理"></a>Git分支管理</h3><p>创建并切换到新分支</p><pre class=" language-bash"><code class="language-bash">  gut switch -c dev    //新版本命令  <span class="token function">git</span> checkout -b dev    //旧的命令  <span class="token function">git</span> checkout命令加上-b参数表示创建并切换，相当于以下两条命令：  $ <span class="token function">git</span> branch dev      //创建分支  $ <span class="token function">git</span> checkout dev  //切换分支 旧版本  $ <span class="token function">git</span> switch dev    //切换分支 新版本  Switched to branch <span class="token string">'dev'</span></code></pre><p>合并分支</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> merge dev  将dev分支内容合并到当前分支</code></pre><p>合并分支禁用Fast forward </p><blockquote><p>通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。</p></blockquote><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> merge --no-ff -m <span class="token string">"merge with no-ff"</span> dev  因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。</code></pre><p>删除分支</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> branch -d dev  如果要丢弃一个没有被合并过的分支，可以通过git branch -D <span class="token operator">&lt;</span>name<span class="token operator">></span>强行删除</code></pre><p>查看分支合并情况</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> log --graph --pretty<span class="token operator">=</span>oneline --abbrev-commit  //简略  <span class="token function">git</span> log --graph    //详细信息</code></pre><p>保存工作状态(未commit时切换分支需要保存工作状态)</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> stash  保存状态前需要先add追踪</code></pre><p>恢复工作状态</p><pre class=" language-bash"><code class="language-bash">  一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；  另一种方式是用git stash pop，恢复的同时把stash内容也删了：</code></pre><p>查看保存的工作状态</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> stash list  多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash  <span class="token function">git</span> stash apply stash@<span class="token punctuation">{</span>0<span class="token punctuation">}</span></code></pre><p>复制一个特定的提交到当前分支</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> cherry-pick 4c805e2 </code></pre><p>查看远程库信息</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> remote   <span class="token function">git</span> remote -v  查看详细信息</code></pre><p>本地推送分支要远程库</p><pre class=" language-bash"><code class="language-bash">  使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交</code></pre><p>本地创建远程分支对应的分支</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> checkout -b branch-name origin/branch-name  <span class="token function">git</span> switch -c branch-name origin/branch-name  本地和远程分支的名称最好一致</code></pre><p>建立本地分支和远程分支的关联</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> branch --set-upstream branch-name origin/branch-name</code></pre><p>从远程抓取分支</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> pull </code></pre><p>删除远程仓库分支</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> push origin --delete dev</code></pre><h4 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h4><pre class=" language-bash"><code class="language-bash">  Git rebase     在push之前操作操作,把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。</code></pre><h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><p>创建Tag</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> tag <span class="token operator">&lt;</span>name<span class="token operator">></span> 默认标签是打在最新提交的commit上的  <span class="token function">git</span> tag v0.9 f52c633     //对指定的commit id打tag  <span class="token function">git</span> tag -a v0.1 -m <span class="token string">"version 0.1 released"</span> 1094adb    //创建带有说明的标签</code></pre><p>查看标签</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> tag  <span class="token function">git</span> show <span class="token operator">&lt;</span>tagname<span class="token operator">></span>        //查看标签信息</code></pre><p>删除标签</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> tag -d v0.1</code></pre><p>推送标签到远程库</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> push origin <span class="token operator">&lt;</span>tagname<span class="token operator">></span>        //推送某个标签  <span class="token function">git</span> push origin --tags            //推送全部标签</code></pre><p>删除远程库标签</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> tag -d v0.9        //先删除本地标签  <span class="token function">git</span> push origin :refs/tags/v0.9    //删除远程标签</code></pre><h3 id="添加忽略文件"><a href="#添加忽略文件" class="headerlink" title="添加忽略文件"></a>添加忽略文件</h3><p>强制添加已经被忽略的文件 <code>-f</code></p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add -f App.class</code></pre><p>检查忽略文件规则    <code>git check-ignore</code></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> check-ignore -v App.class.gitignore:3:*.class    App.class</code></pre><p><code>.gitignore</code>文件本身要放到版本库里，并且可以对<code>.gitignore</code>做版本管理</p><h3 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h3><p>我们只需要敲一行命令，告诉Git，以后st就表示status：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> config --global alias.st status</code></pre><p>每个仓库的Git配置文件都放在<code>.git/config</code>文件中：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cat</span> .git/config </code></pre><p>而当前用户的Git配置文件放在用户主目录下的一个隐藏文件<code>.gitconfig</code>中：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cat</span> .gitconfig</code></pre>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo命令</title>
      <link href="/2020/01/15/hello-world/"/>
      <url>/2020/01/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建新的文件"><a href="#创建新的文件" class="headerlink" title="创建新的文件"></a>创建新的文件</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="本地运行服务"><a href="#本地运行服务" class="headerlink" title="本地运行服务"></a>本地运行服务</h3><pre class=" language-bash"><code class="language-bash">$ hexo s$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h3><pre class=" language-bash"><code class="language-bash">$ hexo g$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="上传到远程仓库"><a href="#上传到远程仓库" class="headerlink" title="上传到远程仓库"></a>上传到远程仓库</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
