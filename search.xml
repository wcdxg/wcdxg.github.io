<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>正则表达式</title>
      <link href="/2020/05/19/zheng-ze-biao-da-shi/"/>
      <url>/2020/05/19/zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="1-单个字符的匹配规则如下："><a href="#1-单个字符的匹配规则如下：" class="headerlink" title="1.单个字符的匹配规则如下："></a>1.单个字符的匹配规则如下：</h3><table><thead><tr><th align="left">正则表达式</th><th align="left">规则</th><th align="right">可以匹配</th></tr></thead><tbody><tr><td align="left"><code>A</code></td><td align="left">指定字符</td><td align="right"><code>A</code></td></tr><tr><td align="left"><code>\u548c</code></td><td align="left">指定Unicode字符</td><td align="right"><code>和</code></td></tr><tr><td align="left"><code>.</code></td><td align="left">任意字符</td><td align="right"><code>a</code>，<code>b</code>，<code>&amp;</code>，<code>0</code></td></tr><tr><td align="left"><code>\d</code></td><td align="left">数字0~9</td><td align="right"><code>0</code>~<code>9</code></td></tr><tr><td align="left"><code>\w</code></td><td align="left">大小写字母，数字和下划线</td><td align="right"><code>a</code><del><code>z</code>，<code>A</code></del><code>Z</code>，<code>0</code>~<code>9</code>，<code>_</code></td></tr><tr><td align="left"><code>\s</code></td><td align="left">空格、Tab键</td><td align="right">空格，Tab</td></tr><tr><td align="left"><code>\D</code></td><td align="left">非数字</td><td align="right"><code>a</code>，<code>A</code>，<code>&amp;</code>，<code>_</code>，……</td></tr><tr><td align="left"><code>\W</code></td><td align="left">非\w</td><td align="right"><code>&amp;</code>，<code>@</code>，<code>中</code>，……</td></tr><tr><td align="left"><code>\S</code></td><td align="left">非\s</td><td align="right"><code>a</code>，<code>A</code>，<code>&amp;</code>，<code>_</code>，……</td></tr></tbody></table><h3 id="2-多个字符的匹配规则如下"><a href="#2-多个字符的匹配规则如下" class="headerlink" title="2.多个字符的匹配规则如下"></a>2.多个字符的匹配规则如下</h3><table><thead><tr><th align="left">正则表达式</th><th align="left">规则</th><th align="left">可以匹配</th></tr></thead><tbody><tr><td align="left"><code>A*</code></td><td align="left">任意个数字符</td><td align="left">空，<code>A</code>，<code>AA</code>，<code>AAA</code>，……</td></tr><tr><td align="left"><code>A+</code></td><td align="left">至少1个字符</td><td align="left"><code>A</code>，<code>AA</code>，<code>AAA</code>，……</td></tr><tr><td align="left"><code>A?</code></td><td align="left">0个或1个字符</td><td align="left">空，<code>A</code></td></tr><tr><td align="left"><code>A{3}</code></td><td align="left">指定个数字符</td><td align="left"><code>AAA</code></td></tr><tr><td align="left"><code>A{2,3}</code></td><td align="left">指定范围个数字符</td><td align="left"><code>AA</code>，<code>AAA</code></td></tr><tr><td align="left"><code>A{2,}</code></td><td align="left">至少n个字符</td><td align="left"><code>AA</code>，<code>AAA</code>，<code>AAAA</code>，……</td></tr><tr><td align="left"><code>A{0,3}</code></td><td align="left">最多n个字符</td><td align="left">空，<code>A</code>，<code>AA</code>，<code>AAA</code></td></tr></tbody></table><h3 id="3-匹配指定范围"><a href="#3-匹配指定范围" class="headerlink" title="3.匹配指定范围"></a>3.匹配指定范围</h3><pre class=" language-java"><code class="language-java">比如1A2b3c，我们可以这样写：<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span>9a<span class="token operator">-</span>fA<span class="token operator">-</span>F<span class="token punctuation">]</span>，它表示一共可以匹配以下任意范围的字符：<span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span>：字符<span class="token number">0</span><span class="token operator">~</span><span class="token number">9</span>；a<span class="token operator">-</span>f：字符a<span class="token operator">~</span>f；A<span class="token operator">-</span>F：字符A<span class="token operator">~</span>F。</code></pre><h4 id="3-1排除法"><a href="#3-1排除法" class="headerlink" title="3.1排除法"></a>3.1排除法</h4><ul><li><p>假设我们要匹配任意字符，但不包括数字，可以写<code>[^1-9]{3}</code>：</p><ul><li><p>可以匹配<code>&quot;ABC&quot;</code>，因为不包含字符<code>1</code>~<code>9</code>；</p></li><li><p>可以匹配<code>&quot;A00&quot;</code>，因为不包含字符<code>1</code>~<code>9</code>；</p></li><li><p>不能匹配<code>&quot;A01&quot;</code>，因为包含字符<code>1</code>；</p></li><li><p>不能匹配<code>&quot;A05&quot;</code>，因为包含字符<code>5</code>。</p></li></ul></li></ul><h3 id="4-或规则匹配"><a href="#4-或规则匹配" class="headerlink" title="4.或规则匹配"></a>4.或规则匹配</h3><p>用<code>|</code>连接的两个正则规则是<em>或</em>规则，例如，<code>AB|CD</code>表示可以匹配<code>AB</code>或<code>CD</code></p><h3 id="5-实用括号"><a href="#5-实用括号" class="headerlink" title="5.实用括号"></a>5.实用括号</h3><p>现在我们想要匹配字符串<code>learn java</code>、<code>learn php</code>和<code>learn go</code>怎么办？一个最简单的规则是<code>learn\sjava|learn\sphp|learn\sgo</code>，但是这个规则太复杂了，可以把公共部分提出来，然后用<code>(...)</code>把子规则括起来表示成<code>learn\\s(java|php|go)</code>。</p><pre class=" language-java"><code class="language-java">var 使用括号匹配大写 <span class="token operator">=</span> <span class="token string">"learn\\s([Jj]ava|[Gg]o|[Pp]hp)"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//匹配字符串learn Java、learn Php和learn Go的大小写</span></code></pre><h3 id="6-分组匹配"><a href="#6-分组匹配" class="headerlink" title="6.分组匹配"></a>6.分组匹配</h3><p>正则匹配<code>区号-电话号</code>码这个规则</p><pre class=" language-java"><code class="language-java">\d<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span>\<span class="token operator">-</span>\d<span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span></code></pre><p>如果需要提取区号和电话号码，需要将要提取的规则使用括号分组，把上述正则表达式变为<code>(\d{3,4})\-(\d{6,8})</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Pattern p <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"(\\d{3,4})\\-(\\d{7,8})"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Matcher m <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"010-12345678"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//010-12345678</span>            String g1 <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">////010</span>            String g2 <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//12345678</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g1<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匹配失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用<code>Matcher</code>时，必须首先调用<code>matches()</code>判断是否匹配成功，匹配成功后，才能调用<code>group()</code>提取子串。</p><p>例子：<br>从字符串<code>23:01:59</code>提取时、分、秒</p><pre class=" language-java"><code class="language-java">var time <span class="token operator">=</span> <span class="token string">"([0-1]\\d|2[0-3]):([0-5]\\d):([0-5]\\d)"</span><span class="token punctuation">;</span>Pattern p1 <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>Matcher m1 <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"23:01:59"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>m1<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匹配失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h3 id="7-非贪婪匹配"><a href="#7-非贪婪匹配" class="headerlink" title="7.非贪婪匹配"></a>7.非贪婪匹配</h3>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter打包apk</title>
      <link href="/2020/04/29/flutter-da-bao-apk/"/>
      <url>/2020/04/29/flutter-da-bao-apk/</url>
      
        <content type="html"><![CDATA[<p>许多人在使用Flutter打包apk时都会参照文档的做法，但是按照文档基本上是百分之百失败的[手动狗头],官网的做法是这样的(可以不用看)</p><p><a href="https://flutterchina.club/android-release/" target="_blank" rel="noopener">官网做法</a></p><p>但是方法基本不可行。</p><p><strong>下面介绍一下正确的打包姿势</strong></p><p>如果没有创建key的同学，先在命令行里输入下面的代码</p><pre class=" language-java"><code class="language-java">keytool <span class="token operator">-</span>genkey <span class="token operator">-</span>v <span class="token operator">-</span>keystore D<span class="token operator">:</span><span class="token operator">/</span>key<span class="token punctuation">.</span>jks <span class="token operator">-</span>keyalg RSA <span class="token operator">-</span>keysize <span class="token number">2048</span> <span class="token operator">-</span>validity <span class="token number">10000</span> <span class="token operator">-</span>alias key</code></pre><p>接下来会让你创建密钥库和密钥的密码，记住自己创建的密码，下面会用到，</p><p>然后cmd就会让你输入一些信息，像一些奇奇怪怪的消息比如个人信息直接回车就可以了，然后中间会问你是否确认，输入y就可以了</p><p>不出意外在D盘的根目录下就会创建一个key.jks文件了，注意这个文件一定不要共享给别人。</p><a id="more"></a><ol><li>在android目录下创建一个key.properties文件 输入以下代码,保存一下。</li></ol><pre class=" language-java"><code class="language-java">storePassword<span class="token operator">=</span> 刚刚创建密钥库时的密码keyPassword<span class="token operator">=</span>  刚刚创建密钥的密码keyAlias<span class="token operator">=</span>keystoreFile<span class="token operator">=</span>D<span class="token operator">:</span><span class="token operator">/</span>key<span class="token punctuation">.</span>jks</code></pre><ol start="2"><li>接下来就是和文档不一样的地方了，也是个巨坑。打开flutter的/android/app/build.gradle文件，在android前加入<pre class=" language-java"><code class="language-java">def keystorePropertiesFile <span class="token operator">=</span> rootProject<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"key.properties"</span><span class="token punctuation">)</span>def keystoreProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span>keystoreProperties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>keystorePropertiesFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span></code></pre></li></ol><p>如图</p><p><img src="images/7.png" alt="img"></p><p>把buildTypes换成</p><pre class=" language-java"><code class="language-java">signingConfigs <span class="token punctuation">{</span>    release <span class="token punctuation">{</span>       keyAlias <span class="token string">"创建的密钥别名，如果不知道可以去key.jsk文件所在目录输入keytool -list -v -keystore key.jks -storepass 对应的密码"</span>        keyPassword <span class="token string">"密钥的密码"</span><span class="token operator">*</span><span class="token operator">*</span>        storeFile <span class="token function">file</span><span class="token punctuation">(</span>“密钥所在文件夹，如果是按照我上面的步骤的话是D<span class="token operator">:</span><span class="token operator">/</span>key<span class="token punctuation">.</span>jks”<span class="token punctuation">)</span>        storePassword <span class="token string">"密钥库的密码"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>buildTypes <span class="token punctuation">{</span>    release <span class="token punctuation">{</span>        signingConfig signingConfigs<span class="token punctuation">.</span>release    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如图</p><p><img src="images/8.png" alt="img"><br>最后在命令行输入输入</p><pre class=" language-java"><code class="language-java">flutter build apk</code></pre><p>大概率就大功告成了！</p><p>我们的apk文件保存在Flutter文件夹的build\app\outputs\apk\release\app-release.apk 目录下。</p><p>这样我们就完美避开了G家在文档里挖的坑啦！</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin中的泛型</title>
      <link href="/2020/04/29/kotlin-zhong-de-fan-xing/"/>
      <url>/2020/04/29/kotlin-zhong-de-fan-xing/</url>
      
        <content type="html"><![CDATA[<p>泛型</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>TextView<span class="token operator">></span> textViews <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Button<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//会报错</span></code></pre><p>Java 的泛型类型会在编译时发生类型擦除，为了保证类型安全，不允许这样赋值。</p><p>Java中的解决方式:</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">TextView</span><span class="token operator">></span> textViews <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Button<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>其中 ? 是个通配符，表示这个 List 的泛型类型是一个未知类型这个 ，? extends 叫做「上界通配符」，可以使 Java 泛型具有「协变性 Covariance」，协变就是允许上面的赋值是合法的</p><p>下面几种情况都是可以的：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">TextView</span><span class="token operator">></span> textViews <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>TextView<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 👈 本身</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">TextView</span><span class="token operator">></span> textViews <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Button<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 👈 直接子类</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">TextView</span><span class="token operator">></span> textViews <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>RadioButton<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 👈 间接子类</span></code></pre><p>编译器没法确定 ? 的类型，所以只能 get 到 Object 对象,无法add。</p><p>这个 ? super 叫做「下界通配符」，可以使 Java 泛型具有「逆变性 Contravariance」。</p><p>与上界通配符对应，这里 super 限制了通配符 ? 的子类型，所以称之为下界。</p><pre><code>List&lt;? super Button&gt; buttons = new ArrayList&lt;TextView&gt;();</code></pre><p>下面几种情况都是可以的：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Button<span class="token operator">></span> buttons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Button<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 👈 本身</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Button<span class="token operator">></span> buttons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>TextView<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 👈 直接父类</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Button<span class="token operator">></span> buttons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 👈 间接父类</span></code></pre><a id="more"></a><p>对于使用了下界通配符的 List，我们再看看它的 get 和 add 操作：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Button<span class="token operator">></span> buttons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>TextView<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object object <span class="token operator">=</span> buttons<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 👈 get 出来的是 Object 类型</span>Button button <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>buttons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 👈 add 操作是可以的</span></code></pre><p>Kotlin中的写法:</p><p>和 Java 泛型一样，Kolin 中的泛型本身也是不可变的。</p><ul><li><p>使用关键字 out 来支持协变，等同于 Java 中的上界通配符 ? extends。</p></li><li><p>使用关键字 in 来支持逆变，等同于 Java 中的下界通配符 ? super。</p><p>  🏝️<br>  var textViews: List<out TextView><br>  var textViews: List<in TextView></p></li></ul><p>out 表示，我这个变量或者参数只用来输出，不用来输入，你只能读我不能写我；in就反过来，表示它只用来输入，不用来输出，你只能写我不能读我。</p><p>Kotlin 提供了另外一种写法：可以在声明类的时候，给泛型符号加上 out 关键字，表明泛型参数 T 只会用来输出，在使用的时候就不用额外加 out 了。</p><pre class=" language-java"><code class="language-java">🏝️             👇<span class="token keyword">class</span> <span class="token class-name">Producer</span><span class="token operator">&lt;</span>out T<span class="token operator">></span> <span class="token punctuation">{</span>    fun <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>val producer<span class="token operator">:</span> Producer<span class="token operator">&lt;</span>TextView<span class="token operator">></span> <span class="token operator">=</span> Producer<span class="token operator">&lt;</span>Button<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 👈 这里不写 out 也不会报错</span>val producer<span class="token operator">:</span> Producer<span class="token operator">&lt;</span>out TextView<span class="token operator">></span> <span class="token operator">=</span> Producer<span class="token operator">&lt;</span>Button<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 👈 out 可以但没必要</span></code></pre><p>与 out 一样，可以在声明类的时候，给泛型参数加上 in 关键字，来表明这个泛型参数 T 只用来输入。</p><pre class=" language-java"><code class="language-java">🏝️            👇<span class="token keyword">class</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>in T<span class="token operator">></span> <span class="token punctuation">{</span>    fun <span class="token function">consume</span><span class="token punctuation">(</span>t<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>val consumer<span class="token operator">:</span> Consumer<span class="token operator">&lt;</span>Button<span class="token operator">></span> <span class="token operator">=</span> Consumer<span class="token operator">&lt;</span>TextView<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 👈 这里不写 in 也不会报错</span>val consumer<span class="token operator">:</span> Consumer<span class="token operator">&lt;</span>in Button<span class="token operator">></span> <span class="token operator">=</span> Consumer<span class="token operator">&lt;</span>TextView<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 👈 in 可以但没必要</span></code></pre><ul><li><p>号</p><p>Java 中单个 ? 号也能作为泛型通配符使用，相当于 ? extends Object。 它在 Kotlin 中有等效的写法：*号，相当于 out Any</p></li></ul><p>reified 关键字</p><p>检查一个对象是否为泛型类型 T 的实例：</p><p>Java:</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span>Object item<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               👆        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Kotlin:</p><pre class=" language-java"><code class="language-java">inline fun <span class="token operator">&lt;</span>reified T<span class="token operator">></span> <span class="token function">printIfTypeMatch</span><span class="token punctuation">(</span>item<span class="token operator">:</span> Any<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item is T<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 👈 这里就不会在提示错误了</span>        <span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>练习题</p><ul><li><p>实现一个 fill 函数，传入一个 Array 和一个对象，将对象填充到 Array 中，要求 Array 参数的泛型支持逆变（假设  Array size 为 1）。</p></li><li><p>实现一个 copy 函数，传入两个 Array 参数，将一个 Array 中的元素复制到另外个 Array 中，要求 Array 参数的泛型分别支持协变和逆变。（提示：Kotlin 中的 for 循环如果要用索引，需要使用 Array.indices）</p><pre class=" language-java"><code class="language-java">  fun <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">fill</span><span class="token punctuation">(</span>array<span class="token operator">:</span> Array<span class="token operator">&lt;</span>in T<span class="token operator">></span><span class="token punctuation">,</span> t<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>          array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> t      <span class="token punctuation">}</span>  fun <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">copy</span><span class="token punctuation">(</span>srcArray<span class="token operator">:</span> Array<span class="token operator">&lt;</span>out T<span class="token operator">></span><span class="token punctuation">,</span> dstArray<span class="token operator">:</span> Array<span class="token operator">&lt;</span>in T<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      srcArray<span class="token punctuation">.</span>forEachIndexed <span class="token punctuation">{</span> index<span class="token punctuation">,</span> t <span class="token operator">-</span><span class="token operator">></span>          dstArray<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> t      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Recyclerview 嵌套滑动冲突和非嵌套去除滑动效果的完美解决方案</title>
      <link href="/2020/04/29/recyclerview-qian-tao-hua-dong-chong-tu-he-fei-qian-tao-qu-chu-hua-dong-xiao-guo-de-jie-jue-fang-an/"/>
      <url>/2020/04/29/recyclerview-qian-tao-hua-dong-chong-tu-he-fei-qian-tao-qu-chu-hua-dong-xiao-guo-de-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<p>实际开发过程中，经常会使用Recyclerview嵌套 RecyclerView 或者 ScrollView 中嵌套Recyclerview。然而通过这种嵌套方式会导致 Recyclerview 显示不全、滑动卡顿等问题，下面我们就来提出解决以上问题的方案。</p><p>嵌套滑动解决方案<br>第一种方案 ： 将Recyclerview 放置于 LinearLayout 或 RelateveLayout 中</p><pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span>LinearLayout    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>    android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"vertical"</span><span class="token operator">></span>         <span class="token operator">&lt;</span>android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RecyclerView            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>overScrollMode<span class="token operator">=</span><span class="token string">"never"</span>            android<span class="token operator">:</span>scrollbars<span class="token operator">=</span><span class="token string">"none"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span></code></pre><p>第二种方案 ：用 NestedScrollView 来替换 ScrollView</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>NestedScrollView    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>LinearLayout        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"vertical"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RecyclerView            android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/recyclerView"</span>            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>NestedScrollView<span class="token operator">></span></code></pre><p>但是第二种方案还是会出现滑动卡顿问题，这时只需要禁止 RecyclerView 的滑动即可，<br>通过在 xml 中给 RecyclerView 添加 <strong>android:nestedScrollingEnabled=”false”</strong><br>或者 直接在代码中设置  <strong>recyclerView.setNestedScrollingEnabled(false);</strong></p><p>也可结合方案三使用<br>第三种方案：重写LinearLayoutManager的 canScrollVertically 方法从而禁止滑动 ，代码如下</p><pre class=" language-java"><code class="language-java">recyclerView<span class="token punctuation">.</span><span class="token function">setLayoutManager</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinearLayoutManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canScrollVertically</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>版权声明：本文为CSDN博主「浮生未歇_」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/w13576267399/article/details/86238822" target="_blank" rel="noopener">https://blog.csdn.net/w13576267399/article/details/86238822</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RecyclerView </tag>
            
            <tag> 滑动冲突 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RecyclerView实现ViewPager翻页效果</title>
      <link href="/2020/04/29/recyclerview-shi-xian-viewpager-fan-ye-xiao-guo/"/>
      <url>/2020/04/29/recyclerview-shi-xian-viewpager-fan-ye-xiao-guo/</url>
      
        <content type="html"><![CDATA[<p>RecyclerView通过使用SnapHelper中的PagerSnapHelper可以实现ViewPager类似的一次滑动一页的显示效果:</p><p>在recyclerView设置LayoutManager的时候设置:</p><pre class=" language-java"><code class="language-java">PagerSnapHelper snapHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PagerSnapHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>recyclerView<span class="token punctuation">.</span><span class="token function">setOnFlingListener</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>snapHelper<span class="token punctuation">.</span><span class="token function">attachToRecyclerView</span><span class="token punctuation">(</span>recyclerView<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RecyclerView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>notifyItemRemoved的坑</title>
      <link href="/2020/04/29/recyclerview-notifyitemremoved-de-keng/"/>
      <url>/2020/04/29/recyclerview-notifyitemremoved-de-keng/</url>
      
        <content type="html"><![CDATA[<p>关于RecyclerView如何使用正确notifyItemRemoved,有一些坑必须要填,直接调用</p><pre class=" language-java"><code class="language-java">   data<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>posiiton<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">notifyItemRemoved</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>   position的位置会错乱,  <code>onBindViewHolder</code>不会调用,所以必须加上<code>notifyItemRangeChanged</code>才行</p><pre class=" language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span><span class="token punctuation">{</span>        data<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>posiiton<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">notifyItemRemoved</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">notifyItemRangeChanged</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RecyclerView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GridView与RecycleView滑动事件冲突的解决方案</title>
      <link href="/2020/04/29/gridview-yu-recycleview-hua-dong-shi-jian-chong-tu-de-jie-jue-fang-an/"/>
      <url>/2020/04/29/gridview-yu-recycleview-hua-dong-shi-jian-chong-tu-de-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/0883583f9074/" target="_blank" rel="noopener">GridView滑动事件冲突解决</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>AttributeSet<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>GridView<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by inerdstack on 2016/9/14. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyGridView</span> <span class="token keyword">extends</span> <span class="token class-name">GridView</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyGridView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyGridView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyGridView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> expandSpec <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">,</span>                MeasureSpec<span class="token punctuation">.</span>AT_MOST<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onMeasure</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">,</span> expandSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><a id="more"></a><h2 id="或者手动计算GridView高度"><a href="#或者手动计算GridView高度" class="headerlink" title="或者手动计算GridView高度"></a>或者手动计算GridView高度</h2><p><img src="/images/6.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GridView </tag>
            
            <tag> RecyclerView </tag>
            
            <tag> 滑动冲突 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android RxJava的使用</title>
      <link href="/2020/04/29/android-rxjava-de-shi-yong/"/>
      <url>/2020/04/29/android-rxjava-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建一个上游 Observable：</span>        Observable<span class="token operator">&lt;</span>Integer<span class="token operator">></span> observable <span class="token operator">=</span> Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObservableOnSubscribe</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>ObservableEmitter<span class="token operator">&lt;</span>Integer<span class="token operator">></span> emitter<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                emitter<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                emitter<span class="token punctuation">.</span><span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建一个下游 Observer</span>        Observer<span class="token operator">&lt;</span>Integer<span class="token operator">></span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span>Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"subscribe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>Integer value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">""</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"complete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//建立连接</span>        observable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="线程的切换"><a href="#线程的切换" class="headerlink" title="线程的切换"></a>线程的切换</h3><h4 id="在RxJava中内置了很多线程选项"><a href="#在RxJava中内置了很多线程选项" class="headerlink" title="在RxJava中内置了很多线程选项:"></a>在RxJava中内置了很多线程选项:</h4><ul><li><code>Schedulers.io()</code> 代表io操作的线程, 通常用于网络,读写文件等io密集型的操作</li><li><code>Schedulers.computation()</code> 代表CPU计算密集型的操作, 例如需要大量计算的操作</li><li><code>Schedulers.newThread()</code> 代表一个常规的新线程</li><li><code>AndroidSchedulers.mainThread()</code> 代表Android的主线程</li></ul><h4 id="RxJava的操作符"><a href="#RxJava的操作符" class="headerlink" title="RxJava的操作符"></a>RxJava的操作符</h4><ol><li><code>Map</code>: 对上游发送的每一个事件应用一个函数, 使得每一个事件都按照指定的函数去变化</li><li><code>FlatMap</code>: 上游每发送一个事件, <code>flatMap</code>都将创建一个新的水管, 然后发送转换之后的新的事件, 下游接收到的就是这些新的水管发送的数据.需要注意的是, <code>flatMap</code>并不保证事件接收的顺序, 如果需要保证顺序则需要使用<code>concatMap</code>.</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RxJava </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ViewPager动态添加删除及刷新页面</title>
      <link href="/2020/04/29/viewpager-dong-tai-tian-jia-shan-chu-ji-shua-xin-ye-mian/"/>
      <url>/2020/04/29/viewpager-dong-tai-tian-jia-shan-chu-ji-shua-xin-ye-mian/</url>
      
        <content type="html"><![CDATA[<p>ViewPager的Adapter 支持Fragment动态添加和销毁<br>代码如下：</p><a id="more"></a><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//ViewPager的Adapter 支持Fragment动态添加和销毁</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ViewPagerAdapterNew</span> <span class="token keyword">extends</span> <span class="token class-name">MyFragmentPagerAdapter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>BaseFragment<span class="token operator">></span> mFragmentList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> mItemIdList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ViewPagerAdapterNew</span><span class="token punctuation">(</span>FragmentManager fm<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> List<span class="token operator">&lt;</span>BaseFragment<span class="token operator">></span> fragmentList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>fm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>BaseFragment fragment <span class="token operator">:</span> fragmentList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>mFragmentList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>            mItemIdList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">ViewPagerAdapterNew</span><span class="token punctuation">(</span>FragmentManager fm<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>fm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>BaseFragment<span class="token operator">></span> <span class="token function">getFragmentList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mFragmentList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPage</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> BaseFragment fragment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mFragmentList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>        mItemIdList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> id<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">notifyDataSetChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPage</span><span class="token punctuation">(</span>BaseFragment fragment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mFragmentList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>        mItemIdList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">notifyDataSetChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delPage</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mFragmentList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        mItemIdList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">notifyDataSetChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mFragmentList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mItemIdList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">notifyDataSetChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updatePage</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>BaseFragment<span class="token operator">></span> fragmentList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mFragmentList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mItemIdList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fragmentList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mFragmentList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fragmentList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mItemIdList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意这里是id++，不是i++。</span>        <span class="token punctuation">}</span>        <span class="token function">notifyDataSetChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> BaseFragment <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mFragmentList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mFragmentList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回值有三种，     * POSITION_UNCHANGED  默认值，位置没有改变     * POSITION_NONE       item已经不存在     * position            item新的位置     * 当position发生改变时这个方法应该返回改变后的位置，以便页面刷新。     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getItemPosition</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">BaseFragment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mFragmentList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mFragmentList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> POSITION_NONE<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getItemPosition</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getItemId</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mItemIdList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>链接：<a href="https://blog.csdn.net/wangxiaocheng16/article/details/79028954" target="_blank" rel="noopener">https://blog.csdn.net/wangxiaocheng16/article/details/79028954</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fragment </tag>
            
            <tag> ViewPager </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Layout.Inflater三个参数与两个参数的区别</title>
      <link href="/2020/04/29/layout-inflater-san-ge-can-shu-yu-liang-ge-can-shu-de-qu-bie/"/>
      <url>/2020/04/29/layout-inflater-san-ge-can-shu-yu-liang-ge-can-shu-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java">inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item<span class="token punctuation">,</span>parent<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//item直接绑定在parent,不用手动添加</span>inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item<span class="token punctuation">,</span>parent<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//item测量依赖parent,需要手动添加才能显示在parent</span>inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item<span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不管true、false,item都要手动添加才能显示在parent上，且item测量没有基准，显示效果不理想</span>inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item<span class="token punctuation">,</span>parent<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不管true、false,item都要手动添加才能显示在parent上，且item测量没有基准，显示效果不理想</span>总之一句话，推荐使用下边这种方式：inflate<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item<span class="token punctuation">,</span>parent<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Layout </tag>
            
            <tag> Inflate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android利用adb修改手机的分辨率和dpi</title>
      <link href="/2020/04/29/android-li-yong-adb-xiu-gai-shou-ji-de-fen-bian-lu-he-dpi/"/>
      <url>/2020/04/29/android-li-yong-adb-xiu-gai-shou-ji-de-fen-bian-lu-he-dpi/</url>
      
        <content type="html"><![CDATA[<p>在android开发过程中，适配更多的适配是必不可少的一步，而每次测试适配时，要么购买设配，要么模拟器，买设配太花钱，模拟器太占内存，不过幸好还可以通过修改手机的size(分辨率)和density来进行测试</p><ul><li><p>进入adb shell</p></li><li><p>wm size 查看分辨率</p><pre class=" language-java"><code class="language-java">$ wm sizePhysical size<span class="token operator">:</span> 2560x1600 默认的分辨率</code></pre></li><li><p>wm size 1920x1280 修改分辨率</p><pre class=" language-java"><code class="language-java">$ wm size 1920x1280 （小写的x）修改分辨率$ wm sizePhysical size<span class="token operator">:</span> 2560x1600Override size<span class="token operator">:</span> 1920x1280</code></pre></li><li><p>wm density 查看dpi</p><pre class=" language-java"><code class="language-java">$ wm densityPhysical density<span class="token operator">:</span> <span class="token number">320</span> 默认的dpi</code></pre></li><li><p>修改dpi</p><pre class=" language-java"><code class="language-java">$ wm density <span class="token number">240</span> 修改dpi$ wm densityPhysical density<span class="token operator">:</span> <span class="token number">320</span>Override density<span class="token operator">:</span> <span class="token number">240</span></code></pre></li><li><p>reset</p><pre class=" language-java"><code class="language-java">$ wm size reset$ wm density reset</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ADB </tag>
            
            <tag> dpi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android APP 黑白化实现探索</title>
      <link href="/2020/04/29/android-app-hei-bai-hua-shi-xian-tan-suo/"/>
      <url>/2020/04/29/android-app-hei-bai-hua-shi-xian-tan-suo/</url>
      
        <content type="html"><![CDATA[<p>BaseActivity<br>-&gt;<br>onCreate()<br>-&gt;参考链接</p><p><a href="https://mp.weixin.qq.com/s/EioJ8ogsCxQEFm44mKFiOQ" target="_blank" rel="noopener">App 黑白化实现探索2， 发现了一种更方便的方案，我被锤了</a></p><pre class=" language-java"><code class="language-java">Paint paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ColorMatrix cm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColorMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cm<span class="token punctuation">.</span><span class="token function">setSaturation</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mPaint<span class="token punctuation">.</span><span class="token function">setColorFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColorMatrixColorFilter</span><span class="token punctuation">(</span>cm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDecorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLayerType</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>LAYER_TYPE_HARDWARE<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 黑白化探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fragment的嵌套和切换代码</title>
      <link href="/2020/04/29/fragment-de-qian-tao-he-qie-huan-dai-ma/"/>
      <url>/2020/04/29/fragment-de-qian-tao-he-qie-huan-dai-ma/</url>
      
        <content type="html"><![CDATA[<p>在Activity中获取到FragmentManager</p><pre class=" language-java"><code class="language-java">mFragmentManager <span class="token operator">=</span> <span class="token function">getSupportFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>添加或者切换Fragment</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addView</span><span class="token punctuation">(</span>BaseFragment fragment<span class="token punctuation">,</span> String tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mFragmentTransaction <span class="token operator">=</span> mFragmentManager<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//优先检查，fragment是否存在，避免重叠</span>        BaseFragment tempFragment <span class="token operator">=</span> <span class="token punctuation">(</span>BaseFragment<span class="token punctuation">)</span> mFragmentManager<span class="token punctuation">.</span><span class="token function">findFragmentByTag</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tempFragment <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            fragment <span class="token operator">=</span> tempFragment<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fragment<span class="token punctuation">.</span><span class="token function">isAdded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">addOrShowFragment</span><span class="token punctuation">(</span>fragment<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>currentFragment <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> currentFragment<span class="token punctuation">.</span><span class="token function">isAdded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mFragmentTransaction<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>currentFragment<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>fl_container<span class="token punctuation">,</span> fragment<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commitAllowingStateLoss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                mFragmentTransaction<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>fl_container<span class="token punctuation">,</span> fragment<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commitAllowingStateLoss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            currentFragment <span class="token operator">=</span> fragment<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><a id="more"></a><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * 添加或者显示 fragment     *     * @param fragment     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addOrShowFragment</span><span class="token punctuation">(</span>BaseFragment fragment<span class="token punctuation">,</span> String tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentFragment <span class="token operator">==</span> fragment <span class="token operator">||</span> mFragmentManager <span class="token operator">==</span> null <span class="token operator">||</span> currentFragment <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果当前fragment未被添加，则添加到Fragment管理器中</span>        FragmentTransaction transaction <span class="token operator">=</span> mFragmentManager<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fragment<span class="token punctuation">.</span><span class="token function">isAdded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            transaction<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>currentFragment<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>fl_container<span class="token punctuation">,</span> fragment<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commitAllowingStateLoss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            transaction<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>currentFragment<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commitAllowingStateLoss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        currentFragment<span class="token punctuation">.</span><span class="token function">setUserVisibleHint</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        currentFragment <span class="token operator">=</span> fragment<span class="token punctuation">;</span>        currentFragment<span class="token punctuation">.</span><span class="token function">setUserVisibleHint</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fragment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CoordinatorLayout+AppBarLayout布局下的一键滚动到顶部的实现</title>
      <link href="/2020/04/29/coordinatorlayout-appbarlayout-bu-ju-fang-shi-xia-de-yi-jian-gun-dong-dao-ding-bu-de-shi-xian/"/>
      <url>/2020/04/29/coordinatorlayout-appbarlayout-bu-ju-fang-shi-xia-de-yi-jian-gun-dong-dao-ding-bu-de-shi-xian/</url>
      
        <content type="html"><![CDATA[<p>首先是布局</p><p>CoordinatorLayout嵌套AppBarLayout，滚动的头部都应该放在AppBarLayout里面，并使用app:layout_scrollFlags=”scroll”，<br>下面跟随滚动的使用app:layout_behavior=”@string/appbar_scrolling_view_behavior”</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//拿到 appbar 的 behavior,让 appbar 滚动</span>        ViewGroup<span class="token punctuation">.</span>LayoutParams layoutParams <span class="token operator">=</span> mAppbar<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CoordinatorLayout<span class="token punctuation">.</span>Behavior behavior <span class="token operator">=</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>CoordinatorLayout<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">)</span> layoutParams<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>behavior <span class="token keyword">instanceof</span> <span class="token class-name">AppBarLayout<span class="token punctuation">.</span>Behavior</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            AppBarLayout<span class="token punctuation">.</span>Behavior appBarLayoutBehavior <span class="token operator">=</span> <span class="token punctuation">(</span>AppBarLayout<span class="token punctuation">.</span>Behavior<span class="token punctuation">)</span> behavior<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//拿到下方tabs的y坐标，即为我要的偏移量</span>            <span class="token keyword">float</span> y <span class="token operator">=</span> mLlDataArea<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//注意传递负值</span>            appBarLayoutBehavior<span class="token punctuation">.</span><span class="token function">setTopAndBottomOffset</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//监听滚动</span>    appBarLayout<span class="token punctuation">.</span><span class="token function">addOnOffsetChangedListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AppBarLayout<span class="token punctuation">.</span>OnOffsetChangedListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onOffsetChanged</span><span class="token punctuation">(</span>AppBarLayout appBarLayout<span class="token punctuation">,</span> <span class="token keyword">int</span> verticalOffset<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>verticalOffset<span class="token punctuation">)</span> <span class="token operator">==</span> appBarLayout<span class="token punctuation">.</span><span class="token function">getTotalScrollRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            iv_scroll_to_top<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>VISIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            iv_scroll_to_top<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>GONE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CoordinatorLayout </tag>
            
            <tag> AppBarLayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android自定义TabLayout间距</title>
      <link href="/2020/04/29/android-zi-ding-yi-tablayout-jian-ju/"/>
      <url>/2020/04/29/android-zi-ding-yi-tablayout-jian-ju/</url>
      
        <content type="html"><![CDATA[<h5 id="TabLayout-xml代码"><a href="#TabLayout-xml代码" class="headerlink" title="TabLayout xml代码"></a>TabLayout xml代码</h5><pre class=" language-java"><code class="language-java">   <span class="token operator">&lt;</span>com<span class="token punctuation">.</span>androidkun<span class="token punctuation">.</span>xtablayout<span class="token punctuation">.</span>XTabLayout        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/xTablayout"</span>        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"80dp"</span>        android<span class="token operator">:</span>layout_marginTop<span class="token operator">=</span><span class="token string">"65dp"</span>        app<span class="token operator">:</span>tabMaxWidth<span class="token operator">=</span><span class="token string">"240dp"</span>        app<span class="token operator">:</span>tabMinWidth<span class="token operator">=</span><span class="token string">"240dp"</span>        app<span class="token operator">:</span>tabPaddingEnd<span class="token operator">=</span><span class="token string">"20dp"</span>        app<span class="token operator">:</span>tabPaddingStart<span class="token operator">=</span><span class="token string">"20dp"</span>        app<span class="token operator">:</span>xTabIndicatorColor<span class="token operator">=</span><span class="token string">"@color/gradient_start_color"</span>        app<span class="token operator">:</span>xTabIndicatorHeight<span class="token operator">=</span><span class="token string">"10dp"</span>        app<span class="token operator">:</span>xTabIndicatorWidth<span class="token operator">=</span><span class="token string">"90dp"</span>        app<span class="token operator">:</span>xTabMode<span class="token operator">=</span><span class="token string">"scrollable"</span><span class="token operator">/</span><span class="token operator">></span></code></pre><h5 id="Actitivy代码"><a href="#Actitivy代码" class="headerlink" title="Actitivy代码"></a>Actitivy代码</h5><pre class=" language-java"><code class="language-java">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> labelList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    fragments<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>LabelFragment<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>labelList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    XTabLayout<span class="token punctuation">.</span>Tab tab <span class="token operator">=</span> mXTablayout<span class="token punctuation">.</span><span class="token function">newTab</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    View inflate <span class="token operator">=</span> View<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>mContext<span class="token punctuation">,</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>view_tab<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    TextView tv <span class="token operator">=</span> inflate<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_tabName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    tv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>labelList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLabelName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    LinearLayout<span class="token punctuation">.</span>LayoutParams layoutParams <span class="token operator">=</span> <span class="token punctuation">(</span>LinearLayout<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">)</span> tv<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    layoutParams<span class="token punctuation">.</span>rightMargin <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                    layoutParams<span class="token punctuation">.</span>leftMargin <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                    tv<span class="token punctuation">.</span><span class="token function">setLayoutParams</span><span class="token punctuation">(</span>layoutParams<span class="token punctuation">)</span><span class="token punctuation">;</span>                    tab<span class="token punctuation">.</span><span class="token function">setCustomView</span><span class="token punctuation">(</span>tv<span class="token punctuation">)</span><span class="token punctuation">;</span>                    mXTablayout<span class="token punctuation">.</span><span class="token function">addTab</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span></code></pre><h5 id="view-tab-布局代码"><a href="#view-tab-布局代码" class="headerlink" title="view_tab 布局代码"></a>view_tab 布局代码</h5><a id="more"></a><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>LinearLayout xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>              android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>              android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>TextView        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tv_tabName"</span>        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"240dp"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"80dp"</span>        android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@drawable/shape_tab"</span>        android<span class="token operator">:</span>gravity<span class="token operator">=</span><span class="token string">"center"</span>        android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"vertical"</span>        android<span class="token operator">:</span>textColor<span class="token operator">=</span><span class="token string">"@color/selector_tab_tv"</span>        android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"24sp"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TabLayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unable-to-resolve-dependency问题的处理</title>
      <link href="/2020/04/29/unable-to-resolve-dependency-wen-ti-de-chu-li/"/>
      <url>/2020/04/29/unable-to-resolve-dependency-wen-ti-de-chu-li/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/c4bbd66d842a" target="_blank" rel="noopener">原文链接</a></p><p>一、问题现象</p><p>今天在将本地 module 添加为项目的 dependency 时，出现了如下的错误：</p><p>image</p><p>该类错误的格式如下：</p><pre class=" language-java"><code class="language-java">Error<span class="token operator">:</span>Unable to resolve dependency <span class="token keyword">for</span> <span class="token string">':app@App名称/compileClasspath'</span><span class="token operator">:</span> Could not resolve project<span class="token operator">:</span>module库名称<span class="token punctuation">.</span></code></pre><p>二、问题原因：</p><p>刚看到该问题时一脸蒙圈，经过坚持不懈的Google，终于找到了原因和解决方案。</p><p>问题原因是：</p><p>你项目的build.gradle中 buildTypes{} 节点包含的子节点和你依赖的module的 build.type 中 buildType{} 包含的节点不一致</p><p>三、解决方案：</p><p>解决方案其实很简单：</p><p>找到你APP的 build.gradle 文件，将其中的 buildTypes {} 节点完整的拷贝到你的module库的 build.gradle 文件中即可。</p><p>只要节点数量和名称一致即可，节点中的内容可以不一致</p><p>四、解决示例：</p><p>我当前项目 build.gradle 的 buildTypes{} 节点如下：</p><pre class=" language-java"><code class="language-java"> buildTypes <span class="token punctuation">{</span>        debug <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//内容省略</span>        <span class="token punctuation">}</span>        release <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//内容省略</span>        <span class="token punctuation">}</span>        antTest <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//内容省略</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p> 那么，所依赖 moudle 的 build.gradle 的 buildTypes{} 节点如下：</p><pre class=" language-java"><code class="language-java">  buildTypes <span class="token punctuation">{</span>        debug <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//可以没有任何内容，只要节点数量和名称一致即可</span>        <span class="token punctuation">}</span>        release <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//可以没有任何内容，只要节点数量和名称一致即可</span>        <span class="token punctuation">}</span>        antTest <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//可以没有任何内容，只要节点数量和名称一致即可</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>五、参考链接：</p><p><a href="https://stackoverflow.com/questions/46949622/android-studio-3-0-unable-to-resolve-dependency-for-appdexoptions-compileclas" target="_blank" rel="noopener">https://stackoverflow.com/questions/46949622/android-studio-3-0-unable-to-resolve-dependency-for-appdexoptions-compileclas</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selector选择器图片大小不一致的问题</title>
      <link href="/2020/04/29/selector-xuan-ze-qi-tu-pian-da-xiao-bu-yi-zhi-de-wen-ti/"/>
      <url>/2020/04/29/selector-xuan-ze-qi-tu-pian-da-xiao-bu-yi-zhi-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h4 id="问题-在使用Selector的过程中-设置了选中和非选中状态下的图片-两张图片大小是不一致的-但是在setSelected-true-之后-图片显示的还是默认状态下的大小"><a href="#问题-在使用Selector的过程中-设置了选中和非选中状态下的图片-两张图片大小是不一致的-但是在setSelected-true-之后-图片显示的还是默认状态下的大小" class="headerlink" title="问题: 在使用Selector的过程中,设置了选中和非选中状态下的图片,两张图片大小是不一致的,但是在setSelected(true)之后,图片显示的还是默认状态下的大小."></a>问题: 在使用Selector的过程中,设置了选中和非选中状态下的图片,两张图片大小是不一致的,但是在<code>setSelected(true)</code>之后,图片显示的还是默认状态下的大小.</h4><p>原因:<img src="/images/5.png" alt="image"><br>8.0系统每次切换，这个地方<code>w</code>和<code>mDrawableWidth</code>,<code>h</code>和<code>mDrawableheight</code>的值始终一样，导致没有执行<code>requestLayout()</code>方法</p><p>解决方法:<br>每次<code>setSelected()</code>之后，手动调用一次<code>requestLayout()</code>方法</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常问题 </tag>
            
            <tag> Selector </tag>
            
            <tag> 图片选择器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio Plugin with id &#39;com.anroid.application&#39; not found的处理</title>
      <link href="/2020/04/29/android-studio-plugin-with-id-com.anroid.application-not-found-de-chu-li/"/>
      <url>/2020/04/29/android-studio-plugin-with-id-com.anroid.application-not-found-de-chu-li/</url>
      
        <content type="html"><![CDATA[<p>最近在下载Demo运行时遇到<strong>Plugin with id ‘com.anroid.application’ not found</strong>问题，经查询，在项目module的build.gradle下配置以下代码即可解决。</p><pre class=" language-java"><code class="language-java">buildscript <span class="token punctuation">{</span>    repositories <span class="token punctuation">{</span>        <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    dependencies <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//填写自己AS的版本号</span>        classpath <span class="token string">'com.android.tools.build:gradle:2.3.3'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android Studio </tag>
            
            <tag> 异常问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监听开机广播打开APP</title>
      <link href="/2020/04/29/jian-ting-kai-ji-guang-bo-da-kai-app/"/>
      <url>/2020/04/29/jian-ting-kai-ji-guang-bo-da-kai-app/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><ul><li>仅在Android原生系统上测试通过,由于国内手机厂商都有自己的自启动管理,因此不确定是否可用</li></ul><h3 id="1-创建广播接收者"><a href="#1-创建广播接收者" class="headerlink" title="1.创建广播接收者"></a>1.创建广播接收者</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBroadcastReceiver</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"BootBroadcastReceiver"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onReceive: 系统开机了"</span> <span class="token operator">+</span> intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Intent intent2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> MainActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intent2<span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>FLAG_ACTIVITY_NEW_TASK<span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-清单文件中配置权限"><a href="#2-清单文件中配置权限" class="headerlink" title="2.清单文件中配置权限"></a>2.清单文件中配置权限</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>监听开机广播<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.RECEIVE_BOOT_COMPLETED"</span><span class="token operator">/</span><span class="token operator">></span></code></pre><h3 id="3-清单文件中注册广播接收者"><a href="#3-清单文件中注册广播接收者" class="headerlink" title="3.清单文件中注册广播接收者"></a>3.清单文件中注册广播接收者</h3><p>AndroidManifest.xml的application标签中注册</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>开机广播接收者<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>receiver android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">".receiver.MyBroadcastReceiver"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>注册开机广播地址<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>action android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.action.BOOT_COMPLETED"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>category android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.category.DEFAULT"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>receiver<span class="token operator">></span></code></pre><h3 id="4-系统开机完成之后监听到广播自动打开App默认启动页面"><a href="#4-系统开机完成之后监听到广播自动打开App默认启动页面" class="headerlink" title="4.系统开机完成之后监听到广播自动打开App默认启动页面"></a>4.系统开机完成之后监听到广播自动打开App默认启动页面</h3><p><img src="/images/4.png" alt="4.png"></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 广播 </tag>
            
            <tag> 自启动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RGB颜色深浅排序</title>
      <link href="/2020/04/29/rgb-yan-se-shen-qian-pai-xu/"/>
      <url>/2020/04/29/rgb-yan-se-shen-qian-pai-xu/</url>
      
        <content type="html"><![CDATA[<p>最近由于项目需要,需要对后台传递过来的十六进制的RGB,按照颜色由浅至深进行排序.<br>参考此链接<a href="http://blog.sina.com.cn/s/blog_4b0617280100tx0w.html" target="_blank" rel="noopener">RGB排序</a>，通过将RGB 模式转换成YUK模式，而 Y 是明亮度（灰阶），因此只需要获得 Y 的值而判断他是否足够亮就可以了,当和大于等于此值就为浅色</p><pre class=" language-java"><code class="language-java">$grayLevel <span class="token operator">=</span> $R <span class="token operator">*</span> <span class="token number">0.299</span> <span class="token operator">+</span> $G <span class="token operator">*</span> <span class="token number">0.587</span> <span class="token operator">+</span> $B <span class="token operator">*</span> <span class="token number">0.114</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>$grayLevel <span class="token operator">>=</span> <span class="token number">192</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// add shadow</span><span class="token punctuation">}</span></code></pre><p>因此,通过对结果进行排序,可以得到我们需要的颜色深浅值,由于服务器返回的结果是十六进制的颜色值,类似<code>#3f45f8</code>这种,所以需要先转换成十进制. </p><pre class=" language-java"><code class="language-java">String color <span class="token operator">=</span> <span class="token string">"#3f45f8"</span><span class="token punctuation">;</span>String red <span class="token operator">=</span> color <span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String green <span class="token operator">=</span> color <span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String blue <span class="token operator">=</span> color <span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> r <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>red <span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> g <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>green <span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>blue <span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> grayLevel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>r <span class="token operator">*</span> <span class="token number">0.299</span> <span class="token operator">+</span> g <span class="token operator">*</span> <span class="token number">0.587</span> <span class="token operator">+</span> b <span class="token operator">*</span> <span class="token number">0.114</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>最后可以将得到的结果存入List或者是Map中排序,得到自己需要的结果~</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Color </tag>
            
            <tag> 排序 </tag>
            
            <tag> RGB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>item宽高无法自适应问题处理</title>
      <link href="/2020/04/29/item-kuan-gao-wu-fa-zi-gua-ying-wen-ti-chu-li/"/>
      <url>/2020/04/29/item-kuan-gao-wu-fa-zi-gua-ying-wen-ti-chu-li/</url>
      
        <content type="html"><![CDATA[<p>最近在使用RecyclerView的时候，需要item根据内容自适应高度，但是总是出现item高度无法自适应的情况，最终问题得到解决,在此记录下。<br>在RecyclerView父布局中设置了Match_parent,item布局设置了wrap_content，item无法自适应高度，代码如下</p><p>父布局代码</p><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RecyclerView        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/rv_list"</span>        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_marginTop<span class="token operator">=</span><span class="token string">"70dp"</span><span class="token operator">/</span><span class="token operator">></span></code></pre><p>子布局代码</p><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>LinearLayout        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>ImageView            android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/iv_photo"</span>            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span></code></pre><p>实际显示出来的效果是所有item高度都一致，默认都是第一个item内容的高度自适应，造成内容显示不全或者布局显示错乱，搜索了下，发现RecyclerView常用的LinearLayoutManager并没有自适应相关的内容。</p><h5 id="解决方法有两种："><a href="#解决方法有两种：" class="headerlink" title="解决方法有两种："></a>解决方法有两种：</h5><ul><li>1.继承并且重写LinearLayoutManager<br><a href="https://blog.csdn.net/u013519290/article/details/72860027/" target="_blank" rel="noopener">参考链接</a></li><li>2.使用其他LayoutManager  <code>StaggeredGridLayoutManager</code><ul><li>StaggeredGridLayoutManager是RecyclerView自带的瀑布流布局，可以设置水平或者垂直方向的布局，因此也可以用在自适应高度或者自适应宽度上，用法与创建LinearLayoutManager一样,高度自适应就设置<code>StaggeredGridLayoutManager.HORIZONTAL</code>,宽度自适应就设置<code>StaggeredGridLayoutManager.VERTICAL</code>,问题得到解决。</li></ul></li></ul><pre class=" language-java"><code class="language-java">StaggeredGridLayoutManager horizontalManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaggeredGridLayoutManager</span><span class="token punctuation">(</span>spanCount<span class="token punctuation">,</span> StaggeredGridLayoutManager<span class="token punctuation">.</span>HORIZONTAL<span class="token punctuation">)</span><span class="token punctuation">;</span>mRecyclerView<span class="token punctuation">.</span><span class="token function">setLayoutManager</span><span class="token punctuation">(</span>horizontalManager<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RecyclerView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android属性动画的三种使用方式</title>
      <link href="/2020/04/29/android-shu-xing-dong-hua-de-san-chong-shi-yong-fang-shi/"/>
      <url>/2020/04/29/android-shu-xing-dong-hua-de-san-chong-shi-yong-fang-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="第一种：ViewPropertyAnimator"><a href="#第一种：ViewPropertyAnimator" class="headerlink" title="第一种：ViewPropertyAnimator"></a>第一种：ViewPropertyAnimator</h3><p>专门针对view设计的，使用简单操作方便，但是不易于扩展</p><h5 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h5><pre class=" language-java"><code class="language-java">view<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">translationX</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="第二种：ObjectAnimator"><a href="#第二种：ObjectAnimator" class="headerlink" title="第二种：ObjectAnimator"></a>第二种：ObjectAnimator</h3><p>继承自<code>ValueAnimator</code><br>实际上是通过调用view里面的<code>setter()</code>方法来更新参数值，例如下面的alpha实际上是调用的view里面的setAlpha()方法来更新值</p><h5 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h5><h6 id="旋转-rotation、rotationX、rotationY"><a href="#旋转-rotation、rotationX、rotationY" class="headerlink" title="旋转 rotation、rotationX、rotationY"></a>旋转 <code>rotation</code>、<code>rotationX</code>、<code>rotationY</code></h6><ul><li>rotationX：表示围绕 X 轴旋转，rotationX 表示旋转度数</li><li>rotationY:表示围绕 Y 轴旋转，rotationY 表示旋转度数</li><li>rotation:表示围绕 Z 旋转,rotation 表示旋转度数<h6 id="移动-translationX、translationY"><a href="#移动-translationX、translationY" class="headerlink" title="移动 translationX、translationY"></a>移动 <code>translationX</code>、<code>translationY</code></h6></li><li>translationX :表示在 X 轴上的平移距离,以当前控件为原点，向右为正方向，参数 translationX 表示移动的距离。</li><li>translationY :表示在 Y 轴上的平移距离，以当前控件为原点，向下为正方向，参数 translationY 表示移动的距离。<h6 id="缩放-scaleX、scaleY"><a href="#缩放-scaleX、scaleY" class="headerlink" title="缩放 scaleX、scaleY"></a>缩放 <code>scaleX</code>、<code>scaleY</code></h6></li><li>scaleX:在 X 轴上缩放，scaleX 表示缩放倍数</li><li>scaleY:在 Y 轴上缩放，scaleY 表示缩放倍数<h6 id="透明度-alpha"><a href="#透明度-alpha" class="headerlink" title="透明度 alpha"></a>透明度 <code>alpha</code></h6></li><li>alpha:改变透明度 范围：0-1 </li><li>1：不透明    0：完全透明</li></ul><pre class=" language-java"><code class="language-java">ObjectAnimator animator <span class="token operator">=</span> ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span><span class="token string">"alpha"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animator<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  animator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><a id="more"></a><h3 id="第三种方式：-ValueAnimator"><a href="#第三种方式：-ValueAnimator" class="headerlink" title="第三种方式： ValueAnimator"></a>第三种方式： ValueAnimator</h3><ul><li>ValueAnimator 是 ObjectAnimator 的父类，实际上，ValueAnimator 就是一个不能指定目标对象版本的 ObjectAnimator。</li><li>无法指定view对象，而是通过自身不断变化的值，自己手动去调用某个view的setter()方法来变化参数值</li><li>适用于第三方库控件里面属性没有对应的setter / getter 方法的时候，会需要用到它<h5 id="使用方式：-1"><a href="#使用方式：-1" class="headerlink" title="使用方式："></a>使用方式：</h5></li></ul><pre class=" language-java"><code class="language-java">ValueAnimator animator <span class="token operator">=</span> ValueAnimator<span class="token punctuation">.</span><span class="token function">ofInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个值从0到400的动画</span>animator<span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//动画时长为1s</span>animator<span class="token punctuation">.</span><span class="token function">addUpdateListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValueAnimator<span class="token punctuation">.</span>AnimatorUpdateListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAnimationUpdate</span><span class="token punctuation">(</span>ValueAnimator animation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> curValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>animation<span class="token punctuation">.</span><span class="token function">getAnimatedValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tv<span class="token punctuation">.</span><span class="token function">layout</span><span class="token punctuation">(</span>curValue<span class="token punctuation">,</span>curValue<span class="token punctuation">,</span>curValue<span class="token operator">+</span>tv<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>curValue<span class="token operator">+</span>tv<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="三种方式的区别："><a href="#三种方式的区别：" class="headerlink" title="三种方式的区别："></a>三种方式的区别：</h3><ul><li>ViewPropertyAnimator、ObjectAnimator、ValueAnimator 这三种 Animator，它们其实是一种递进的关系：从左到右依次变得更加难用，也更加灵活。</li><li>它们的性能是一样的，因为 ViewPropertyAnimator 和 ObjectAnimator 的内部实现其实都是 ValueAnimator，ObjectAnimator 更是本来就是 ValueAnimator 的子类，它们三个的性能并没有差别。它们的差别只是使用的便捷性以及功能的灵活性。所以在实际使用时候的选择，只要遵循一个原则就行：尽量用简单的。能用 View.animate() 实现就不用 ObjectAnimator，能用 ObjectAnimator 就不用 ValueAnimator。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 动画 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动画 </tag>
            
            <tag> Animator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RecyclerView刷新ItemDecorations间距不断增加问题的处理</title>
      <link href="/2020/04/29/recyclerview-shua-xin-itemdecorations-jian-ju-bu-duan-zeng-jia-wen-ti-de-chu-li/"/>
      <url>/2020/04/29/recyclerview-shua-xin-itemdecorations-jian-ju-bu-duan-zeng-jia-wen-ti-de-chu-li/</url>
      
        <content type="html"><![CDATA[<p>为RecyclerView设置了<code>ItemDecorations</code>之后，在Adapter刷新数据<code>notifyDataSetChanged</code>后，item的间距会不断增大。</p><p><strong>原因</strong>：<br>recyclerView.addItemDecoration()方法中mItemDecorations并没有clear，每次都会添加进去，导致间距不断变大。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addItemDecoration</span><span class="token punctuation">(</span>ItemDecoration decor<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mLayout <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mLayout<span class="token punctuation">.</span><span class="token function">assertNotInLayoutOrScroll</span><span class="token punctuation">(</span><span class="token string">"Cannot add item decoration during a scroll  or"</span>                    <span class="token operator">+</span> <span class="token string">" layout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mItemDecorations<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setWillNotDraw</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mItemDecorations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>decor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            mItemDecorations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> decor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">markItemDecorInsetsDirty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">requestLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>解决方法：</strong></p><ul><li><p>1.清除添加的ItemDecorations</p><pre class=" language-bash"><code class="language-bash">recyclerView.removeItemDecoration<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>2.判断是否已经添加了ItemDecorations，如果存在就不添加</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>recyclerView<span class="token punctuation">.</span><span class="token function">getItemDecorationCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  recyclerView<span class="token punctuation">.</span><span class="token function">addItemDecoration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SpacesItemDecoration2</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><p>通过上述两种方式可以解决Item间距刷新后不断增加的问题。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RecyclerView </tag>
            
            <tag> ItemDecorations </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RecyclerView的getChildCount()返回item数量不正确</title>
      <link href="/2020/04/29/recyclerview-de-getchildcount-fan-hui-item-shu-liang-bu-zheng-que/"/>
      <url>/2020/04/29/recyclerview-de-getchildcount-fan-hui-item-shu-liang-bu-zheng-que/</url>
      
        <content type="html"><![CDATA[<p>最近在使用RecyclerView的时候需要遍历item执行一些操作，但是在使用RecyclerView的<code>getChildCount()</code>方法的时候发现返回的item数量和实际上的不一致。<br>查看源码发现<code>getChildCount()</code>实际上返回的是整数的可见的item数量，所以导致和实际的数量不一致，同样的<code>getChildAt(int index)</code>获取的也是可见的第index个位置的item。</p><p><img src="/images/1.png" alt="1.png"></p><p>解决方法就是使用适配器里面的方法<code>getAdapter().getItemCount()</code>，这个返回的就是实际的item数量<br><img src="/images/2.png" alt="2.png"></p><p>这样返回的item数量就是实际的数量。<br><img src="/images/3.png" alt="3.png"></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RecyclerView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java和Kotlin中的ViewStub用法</title>
      <link href="/2020/04/29/java-he-kotlin-zhong-de-viewstub-yong-fa/"/>
      <url>/2020/04/29/java-he-kotlin-zhong-de-viewstub-yong-fa/</url>
      
        <content type="html"><![CDATA[<p>Mac下配置了环境变量但是只在当前命令行窗口内有效，关闭之后重新打开就又需要输入<br><code>source .base_profile</code>才能生效，出现的原因是因为系统默认使用的是zsh终端导致，然后网上已经有很多种解决方案了，但是我自己试了都是没有效果，最终直接将<code>.base_profile</code>内的环境变量全部复制到<code>.zshrc</code>文件内。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># If you come from bash you might have to change your $PATH.</span><span class="token comment" spellcheck="true"># export PATH=$HOME/bin:/usr/local/bin:$PATH</span><span class="token comment" spellcheck="true"># Path to your oh-my-zsh installation.</span><span class="token function">export</span> ZSH<span class="token operator">=</span><span class="token string">"/Users/xxx/.oh-my-zsh"</span><span class="token function">export</span> PATH<span class="token operator">=</span>/Users/xxx/Development/flutter/bin:<span class="token variable">$PATH</span><span class="token function">export</span> ANDROID_HOME<span class="token operator">=</span><span class="token string">"/Users/xxx/Library/Android/sdk"</span> <span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">${PATH}</span>:/Users/xxx/Library/Android/sdk/platform-tools<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">${PATH}</span>:/Users/xxx/Library/Android/sdk/tools<span class="token function">export</span> PUB_HOSTED_URL<span class="token operator">=</span>https://pub.flutter-io.cn<span class="token function">export</span> FLUTTER_STORAGE_BASE_URL<span class="token operator">=</span>https://storage.flutter-io.cn</code></pre><p>最后在终端内输入<code>source .zshrc</code>立即生效，问题得到解决。</p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ViewStub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下环境变量无法生效的解决方案</title>
      <link href="/2020/04/29/mac-xia-huan-jing-bian-liang-wu-fa-sheng-xiao-de-jie-jue-fang-an/"/>
      <url>/2020/04/29/mac-xia-huan-jing-bian-liang-wu-fa-sheng-xiao-de-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<p>Mac下配置了环境变量但是只在当前命令行窗口内有效，关闭之后重新打开就又需要输入<br><code>source .base_profile</code>才能生效，出现的原因是因为系统默认使用的是zsh终端导致，然后网上已经有很多种解决方案了，但是我自己试了都是没有效果，最终直接将<code>.base_profile</code>内的环境变量全部复制到<code>.zshrc</code>文件内。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># If you come from bash you might have to change your $PATH.</span><span class="token comment" spellcheck="true"># export PATH=$HOME/bin:/usr/local/bin:$PATH</span><span class="token comment" spellcheck="true"># Path to your oh-my-zsh installation.</span><span class="token function">export</span> ZSH<span class="token operator">=</span><span class="token string">"/Users/xxx/.oh-my-zsh"</span><span class="token function">export</span> PATH<span class="token operator">=</span>/Users/xxx/Development/flutter/bin:<span class="token variable">$PATH</span><span class="token function">export</span> ANDROID_HOME<span class="token operator">=</span><span class="token string">"/Users/xxx/Library/Android/sdk"</span> <span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">${PATH}</span>:/Users/xxx/Library/Android/sdk/platform-tools<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">${PATH}</span>:/Users/xxx/Library/Android/sdk/tools<span class="token function">export</span> PUB_HOSTED_URL<span class="token operator">=</span>https://pub.flutter-io.cn<span class="token function">export</span> FLUTTER_STORAGE_BASE_URL<span class="token operator">=</span>https://storage.flutter-io.cn</code></pre><p>最后在终端内输入<code>source .zshrc</code>立即生效，问题得到解决。</p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境变量 </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git命令</title>
      <link href="/2020/04/23/git-ming-ling/"/>
      <url>/2020/04/23/git-ming-ling/</url>
      
        <content type="html"><![CDATA[<h3 id="设置用户名和邮箱地址"><a href="#设置用户名和邮箱地址" class="headerlink" title="设置用户名和邮箱地址"></a>设置用户名和邮箱地址</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> config --global user.name <span class="token string">"Your Name"</span>$ <span class="token function">git</span> config --global user.email <span class="token string">"email@example.com"</span></code></pre><h3 id="Git初始化"><a href="#Git初始化" class="headerlink" title="Git初始化"></a>Git初始化</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> init</code></pre><h3 id="Git添加文件"><a href="#Git添加文件" class="headerlink" title="Git添加文件"></a>Git添加文件</h3><ul><li>添加单个文件  </li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add readme.txt</code></pre><ul><li>添加所有文件</li></ul><pre class=" language-java"><code class="language-java">git add <span class="token punctuation">.</span></code></pre><h3 id="Git查看状态"><a href="#Git查看状态" class="headerlink" title="Git查看状态"></a>Git查看状态</h3><pre class=" language-java"><code class="language-java">git status</code></pre><h3 id="Git修改操作"><a href="#Git修改操作" class="headerlink" title="Git修改操作"></a>Git修改操作</h3><p>查看版本历史记录</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> log --pretty<span class="token operator">=</span>oneline</code></pre><p>回退到指定版本</p><pre class=" language-java"><code class="language-java">  git reset <span class="token operator">--</span>hard commit_id  版本号没必要写全，前几位就可以了  git reset <span class="token operator">--</span>hard HEAD<span class="token operator">~</span><span class="token number">1</span>  上一个版本就是HEAD<span class="token operator">^</span>，上上一个版本就是HEAD<span class="token operator">^</span><span class="token operator">^</span>，当然往上<span class="token number">100</span>个版本写<span class="token number">100</span>个<span class="token operator">^</span>比较容易数不过来，所以写成HEAD<span class="token operator">~</span><span class="token number">100</span>。</code></pre><p>查看Git提交历史命令</p><pre class=" language-java"><code class="language-java">  git reflog</code></pre>  <a id="more"></a><p>比较文件区别</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> <span class="token function">diff</span> filename:比较工作区和暂存区  <span class="token function">git</span> <span class="token function">diff</span> HEAD -- filename:比较工作区和版本库的最新版本</code></pre><p>丢弃工作区的修改</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> checkout -- readme.txt  回到最近一次git commit或git add时的状态  从来没有被添加到版本库就被删除的文件，是无法恢复的！</code></pre><p>丢弃暂存区的修改</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> reset HEAD readme.txt</code></pre><p>  如果已经add到暂存区需要恢复，需要先执行reset再执行checkout</p><p>删除文件</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> <span class="token function">rm</span> test.txt</code></pre><h3 id="GitHub远程仓库操作"><a href="#GitHub远程仓库操作" class="headerlink" title="GitHub远程仓库操作"></a>GitHub远程仓库操作</h3><p>创建SSH Key</p><pre class=" language-bash"><code class="language-bash">   ssh-keygen -t rsa -C <span class="token string">"youremail@example.com"</span></code></pre><p>远程仓库与本地仓库关联</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> remote add origin git@github.com:用户名/仓库名.git  添加第二个仓库也是这个命令</code></pre><p>第一次推送</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> push -u origin master  由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令</code></pre><p>推送到远程仓库</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> push origin master  origin仓库名 master分支名  多个远程仓库需要不同的仓库名</code></pre><p>删除已经添加的远程库：</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> remote <span class="token function">rm</span> origin<span class="token punctuation">(</span>远程库名称<span class="token punctuation">)</span></code></pre><h3 id="Git分支管理"><a href="#Git分支管理" class="headerlink" title="Git分支管理"></a>Git分支管理</h3><p>创建并切换到新分支</p><pre class=" language-bash"><code class="language-bash">  gut switch -c dev    //新版本命令  <span class="token function">git</span> checkout -b dev    //旧的命令  <span class="token function">git</span> checkout命令加上-b参数表示创建并切换，相当于以下两条命令：  $ <span class="token function">git</span> branch dev      //创建分支  $ <span class="token function">git</span> checkout dev  //切换分支 旧版本  $ <span class="token function">git</span> switch dev    //切换分支 新版本  Switched to branch <span class="token string">'dev'</span></code></pre><p>合并分支</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> merge dev  将dev分支内容合并到当前分支</code></pre><p>合并分支禁用Fast forward </p><blockquote><p>通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。</p></blockquote><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> merge --no-ff -m <span class="token string">"merge with no-ff"</span> dev  因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。</code></pre><p>删除分支</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> branch -d dev  如果要丢弃一个没有被合并过的分支，可以通过git branch -D <span class="token operator">&lt;</span>name<span class="token operator">></span>强行删除</code></pre><p>查看分支合并情况</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> log --graph --pretty<span class="token operator">=</span>oneline --abbrev-commit  //简略  <span class="token function">git</span> log --graph    //详细信息</code></pre><p>保存工作状态(未commit时切换分支需要保存工作状态)</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> stash  保存状态前需要先add追踪</code></pre><p>恢复工作状态</p><pre class=" language-bash"><code class="language-bash">  一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；  另一种方式是用git stash pop，恢复的同时把stash内容也删了：</code></pre><p>查看保存的工作状态</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> stash list  多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash  <span class="token function">git</span> stash apply stash@<span class="token punctuation">{</span>0<span class="token punctuation">}</span></code></pre><p>复制一个特定的提交到当前分支</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> cherry-pick 4c805e2 </code></pre><p>查看远程库信息</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> remote   <span class="token function">git</span> remote -v  查看详细信息</code></pre><p>本地推送分支要远程库</p><pre class=" language-bash"><code class="language-bash">  使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交</code></pre><p>本地创建远程分支对应的分支</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> checkout -b branch-name origin/branch-name  <span class="token function">git</span> switch -c branch-name origin/branch-name  本地和远程分支的名称最好一致</code></pre><p>建立本地分支和远程分支的关联</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> branch --set-upstream branch-name origin/branch-name</code></pre><p>从远程抓取分支</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> pull </code></pre><p>删除远程仓库分支</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> push origin --delete dev</code></pre><h4 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h4><pre class=" language-bash"><code class="language-bash">  Git rebase     在push之前操作操作,把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。</code></pre><h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><p>创建Tag</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> tag <span class="token operator">&lt;</span>name<span class="token operator">></span> 默认标签是打在最新提交的commit上的  <span class="token function">git</span> tag v0.9 f52c633     //对指定的commit id打tag  <span class="token function">git</span> tag -a v0.1 -m <span class="token string">"version 0.1 released"</span> 1094adb    //创建带有说明的标签</code></pre><p>查看标签</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> tag  <span class="token function">git</span> show <span class="token operator">&lt;</span>tagname<span class="token operator">></span>        //查看标签信息</code></pre><p>删除标签</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> tag -d v0.1</code></pre><p>推送标签到远程库</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> push origin <span class="token operator">&lt;</span>tagname<span class="token operator">></span>        //推送某个标签  <span class="token function">git</span> push origin --tags            //推送全部标签</code></pre><p>删除远程库标签</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> tag -d v0.9        //先删除本地标签  <span class="token function">git</span> push origin :refs/tags/v0.9    //删除远程标签</code></pre><h3 id="添加忽略文件"><a href="#添加忽略文件" class="headerlink" title="添加忽略文件"></a>添加忽略文件</h3><p>强制添加已经被忽略的文件 <code>-f</code></p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add -f App.class</code></pre><p>检查忽略文件规则    <code>git check-ignore</code></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> check-ignore -v App.class.gitignore:3:*.class    App.class</code></pre><p><code>.gitignore</code>文件本身要放到版本库里，并且可以对<code>.gitignore</code>做版本管理</p><h3 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h3><p>我们只需要敲一行命令，告诉Git，以后st就表示status：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> config --global alias.st status</code></pre><p>每个仓库的Git配置文件都放在<code>.git/config</code>文件中：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cat</span> .git/config </code></pre><p>而当前用户的Git配置文件放在用户主目录下的一个隐藏文件<code>.gitconfig</code>中：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cat</span> .gitconfig</code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/2020/01/15/hello-hexo/"/>
      <url>/2020/01/15/hello-hexo/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建新的文件"><a href="#创建新的文件" class="headerlink" title="创建新的文件"></a>创建新的文件</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="本地运行服务"><a href="#本地运行服务" class="headerlink" title="本地运行服务"></a>本地运行服务</h3><pre class=" language-bash"><code class="language-bash">$ hexo s$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h3><pre class=" language-bash"><code class="language-bash">$ hexo g$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="上传到远程仓库"><a href="#上传到远程仓库" class="headerlink" title="上传到远程仓库"></a>上传到远程仓库</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
